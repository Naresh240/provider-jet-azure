/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteCircuitAuthorizationObservation struct {
	AuthorizationUseStatus *string `json:"authorizationUseStatus,omitempty" tf:"authorization_use_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteCircuitAuthorizationParameters struct {

	// +kubebuilder:validation:Required
	ExpressRouteCircuitName *string `json:"expressRouteCircuitName" tf:"express_route_circuit_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// RouteCircuitAuthorizationSpec defines the desired state of RouteCircuitAuthorization
type RouteCircuitAuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteCircuitAuthorizationParameters `json:"forProvider"`
}

// RouteCircuitAuthorizationStatus defines the observed state of RouteCircuitAuthorization.
type RouteCircuitAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteCircuitAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteCircuitAuthorization is the Schema for the RouteCircuitAuthorizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RouteCircuitAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteCircuitAuthorizationSpec   `json:"spec"`
	Status            RouteCircuitAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteCircuitAuthorizationList contains a list of RouteCircuitAuthorizations
type RouteCircuitAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteCircuitAuthorization `json:"items"`
}

// Repository type metadata.
var (
	RouteCircuitAuthorization_Kind             = "RouteCircuitAuthorization"
	RouteCircuitAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteCircuitAuthorization_Kind}.String()
	RouteCircuitAuthorization_KindAPIVersion   = RouteCircuitAuthorization_Kind + "." + CRDGroupVersion.String()
	RouteCircuitAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(RouteCircuitAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteCircuitAuthorization{}, &RouteCircuitAuthorizationList{})
}
