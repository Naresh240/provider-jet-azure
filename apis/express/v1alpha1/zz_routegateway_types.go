/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RouteGatewayObservation struct {
}

type RouteGatewayParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ScaleUnits *int64 `json:"scaleUnits" tf:"scale_units,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VirtualHubID *string `json:"virtualHubId" tf:"virtual_hub_id,omitempty"`
}

// RouteGatewaySpec defines the desired state of RouteGateway
type RouteGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteGatewayParameters `json:"forProvider"`
}

// RouteGatewayStatus defines the observed state of RouteGateway.
type RouteGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteGateway is the Schema for the RouteGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RouteGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteGatewaySpec   `json:"spec"`
	Status            RouteGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteGatewayList contains a list of RouteGateways
type RouteGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteGateway `json:"items"`
}

// Repository type metadata.
var (
	RouteGateway_Kind             = "RouteGateway"
	RouteGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteGateway_Kind}.String()
	RouteGateway_KindAPIVersion   = RouteGateway_Kind + "." + CRDGroupVersion.String()
	RouteGateway_GroupVersionKind = CRDGroupVersion.WithKind(RouteGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteGateway{}, &RouteGatewayList{})
}
