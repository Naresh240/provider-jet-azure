/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PropagatedRouteTableObservation struct {
}

type PropagatedRouteTableParameters struct {

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	RouteTableIds []*string `json:"routeTableIds,omitempty" tf:"route_table_ids,omitempty"`
}

type RouteConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RouteConnectionParameters struct {

	// +kubebuilder:validation:Optional
	AuthorizationKey *string `json:"authorizationKey,omitempty" tf:"authorization_key,omitempty"`

	// +kubebuilder:validation:Optional
	EnableInternetSecurity *bool `json:"enableInternetSecurity,omitempty" tf:"enable_internet_security,omitempty"`

	// +kubebuilder:validation:Required
	ExpressRouteCircuitPeeringID *string `json:"expressRouteCircuitPeeringId" tf:"express_route_circuit_peering_id,omitempty"`

	// +kubebuilder:validation:Required
	ExpressRouteGatewayID *string `json:"expressRouteGatewayId" tf:"express_route_gateway_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Routing []RoutingParameters `json:"routing,omitempty" tf:"routing,omitempty"`

	// +kubebuilder:validation:Optional
	RoutingWeight *int64 `json:"routingWeight,omitempty" tf:"routing_weight,omitempty"`
}

type RoutingObservation struct {
}

type RoutingParameters struct {

	// +kubebuilder:validation:Optional
	AssociatedRouteTableID *string `json:"associatedRouteTableId,omitempty" tf:"associated_route_table_id,omitempty"`

	// +kubebuilder:validation:Optional
	PropagatedRouteTable []PropagatedRouteTableParameters `json:"propagatedRouteTable,omitempty" tf:"propagated_route_table,omitempty"`
}

// RouteConnectionSpec defines the desired state of RouteConnection
type RouteConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RouteConnectionParameters `json:"forProvider"`
}

// RouteConnectionStatus defines the observed state of RouteConnection.
type RouteConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RouteConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RouteConnection is the Schema for the RouteConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RouteConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RouteConnectionSpec   `json:"spec"`
	Status            RouteConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RouteConnectionList contains a list of RouteConnections
type RouteConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RouteConnection `json:"items"`
}

// Repository type metadata.
var (
	RouteConnection_Kind             = "RouteConnection"
	RouteConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RouteConnection_Kind}.String()
	RouteConnection_KindAPIVersion   = RouteConnection_Kind + "." + CRDGroupVersion.String()
	RouteConnection_GroupVersionKind = CRDGroupVersion.WithKind(RouteConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&RouteConnection{}, &RouteConnectionList{})
}
