/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudEndpointObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CloudEndpointParameters struct {

	// +kubebuilder:validation:Required
	FileShareName *string `json:"fileShareName" tf:"file_share_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountTenantID *string `json:"storageAccountTenantId,omitempty" tf:"storage_account_tenant_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageSyncGroupID *string `json:"storageSyncGroupId" tf:"storage_sync_group_id,omitempty"`
}

// CloudEndpointSpec defines the desired state of CloudEndpoint
type CloudEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudEndpointParameters `json:"forProvider"`
}

// CloudEndpointStatus defines the observed state of CloudEndpoint.
type CloudEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudEndpoint is the Schema for the CloudEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CloudEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudEndpointSpec   `json:"spec"`
	Status            CloudEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudEndpointList contains a list of CloudEndpoints
type CloudEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudEndpoint `json:"items"`
}

// Repository type metadata.
var (
	CloudEndpoint_Kind             = "CloudEndpoint"
	CloudEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudEndpoint_Kind}.String()
	CloudEndpoint_KindAPIVersion   = CloudEndpoint_Kind + "." + CRDGroupVersion.String()
	CloudEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(CloudEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudEndpoint{}, &CloudEndpointList{})
}
