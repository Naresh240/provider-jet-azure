/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CustomDomainDeveloperPortalObservation struct {
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type CustomDomainDeveloperPortalParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef *v1.SecretKeySelector `json:"certificatePasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id,omitempty"`
}

type CustomDomainManagementObservation struct {
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type CustomDomainManagementParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef *v1.SecretKeySelector `json:"certificatePasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id,omitempty"`
}

type CustomDomainObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CustomDomainParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID *string `json:"apiManagementId" tf:"api_management_id,omitempty"`

	// +kubebuilder:validation:Optional
	DeveloperPortal []CustomDomainDeveloperPortalParameters `json:"developerPortal,omitempty" tf:"developer_portal,omitempty"`

	// +kubebuilder:validation:Optional
	Management []CustomDomainManagementParameters `json:"management,omitempty" tf:"management,omitempty"`

	// +kubebuilder:validation:Optional
	Portal []CustomDomainPortalParameters `json:"portal,omitempty" tf:"portal,omitempty"`

	// +kubebuilder:validation:Optional
	Proxy []CustomDomainProxyParameters `json:"proxy,omitempty" tf:"proxy,omitempty"`

	// +kubebuilder:validation:Optional
	Scm []CustomDomainScmParameters `json:"scm,omitempty" tf:"scm,omitempty"`
}

type CustomDomainPortalObservation struct {
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type CustomDomainPortalParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef *v1.SecretKeySelector `json:"certificatePasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id,omitempty"`
}

type CustomDomainProxyObservation struct {
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type CustomDomainProxyParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef *v1.SecretKeySelector `json:"certificatePasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	DefaultSSLBinding *bool `json:"defaultSslBinding,omitempty" tf:"default_ssl_binding,omitempty"`

	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id,omitempty"`
}

type CustomDomainScmObservation struct {
	Expiry *string `json:"expiry,omitempty" tf:"expiry,omitempty"`

	Subject *string `json:"subject,omitempty" tf:"subject,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type CustomDomainScmParameters struct {

	// +kubebuilder:validation:Optional
	CertificatePasswordSecretRef *v1.SecretKeySelector `json:"certificatePasswordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	CertificateSecretRef *v1.SecretKeySelector `json:"certificateSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	HostName *string `json:"hostName" tf:"host_name,omitempty"`

	// +kubebuilder:validation:Optional
	KeyVaultID *string `json:"keyVaultId,omitempty" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Optional
	NegotiateClientCertificate *bool `json:"negotiateClientCertificate,omitempty" tf:"negotiate_client_certificate,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyvaultIdentityClientID *string `json:"sslKeyvaultIdentityClientId,omitempty" tf:"ssl_keyvault_identity_client_id,omitempty"`
}

// CustomDomainSpec defines the desired state of CustomDomain
type CustomDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CustomDomainParameters `json:"forProvider"`
}

// CustomDomainStatus defines the observed state of CustomDomain.
type CustomDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CustomDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDomain is the Schema for the CustomDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CustomDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CustomDomainSpec   `json:"spec"`
	Status            CustomDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CustomDomainList contains a list of CustomDomains
type CustomDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CustomDomain `json:"items"`
}

// Repository type metadata.
var (
	CustomDomain_Kind             = "CustomDomain"
	CustomDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CustomDomain_Kind}.String()
	CustomDomain_KindAPIVersion   = CustomDomain_Kind + "." + CRDGroupVersion.String()
	CustomDomain_GroupVersionKind = CRDGroupVersion.WithKind(CustomDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&CustomDomain{}, &CustomDomainList{})
}
