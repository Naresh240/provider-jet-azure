/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationRecipientEmailObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NotificationRecipientEmailParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID *string `json:"apiManagementId" tf:"api_management_id,omitempty"`

	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Required
	NotificationType *string `json:"notificationType" tf:"notification_type,omitempty"`
}

// NotificationRecipientEmailSpec defines the desired state of NotificationRecipientEmail
type NotificationRecipientEmailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NotificationRecipientEmailParameters `json:"forProvider"`
}

// NotificationRecipientEmailStatus defines the observed state of NotificationRecipientEmail.
type NotificationRecipientEmailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NotificationRecipientEmailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationRecipientEmail is the Schema for the NotificationRecipientEmails API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NotificationRecipientEmail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NotificationRecipientEmailSpec   `json:"spec"`
	Status            NotificationRecipientEmailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NotificationRecipientEmailList contains a list of NotificationRecipientEmails
type NotificationRecipientEmailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NotificationRecipientEmail `json:"items"`
}

// Repository type metadata.
var (
	NotificationRecipientEmail_Kind             = "NotificationRecipientEmail"
	NotificationRecipientEmail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NotificationRecipientEmail_Kind}.String()
	NotificationRecipientEmail_KindAPIVersion   = NotificationRecipientEmail_Kind + "." + CRDGroupVersion.String()
	NotificationRecipientEmail_GroupVersionKind = CRDGroupVersion.WithKind(NotificationRecipientEmail_Kind)
)

func init() {
	SchemeBuilder.Register(&NotificationRecipientEmail{}, &NotificationRecipientEmailList{})
}
