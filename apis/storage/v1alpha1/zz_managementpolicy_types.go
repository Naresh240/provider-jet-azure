/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ActionsObservation struct {
}

type ActionsParameters struct {

	// +kubebuilder:validation:Optional
	BaseBlob []BaseBlobParameters `json:"baseBlob,omitempty" tf:"base_blob,omitempty"`

	// +kubebuilder:validation:Optional
	Snapshot []SnapshotParameters `json:"snapshot,omitempty" tf:"snapshot,omitempty"`

	// +kubebuilder:validation:Optional
	Version []VersionParameters `json:"version,omitempty" tf:"version,omitempty"`
}

type BaseBlobObservation struct {
}

type BaseBlobParameters struct {

	// +kubebuilder:validation:Optional
	DeleteAfterDaysSinceModificationGreaterThan *int64 `json:"deleteAfterDaysSinceModificationGreaterThan,omitempty" tf:"delete_after_days_since_modification_greater_than,omitempty"`

	// +kubebuilder:validation:Optional
	TierToArchiveAfterDaysSinceModificationGreaterThan *int64 `json:"tierToArchiveAfterDaysSinceModificationGreaterThan,omitempty" tf:"tier_to_archive_after_days_since_modification_greater_than,omitempty"`

	// +kubebuilder:validation:Optional
	TierToCoolAfterDaysSinceModificationGreaterThan *int64 `json:"tierToCoolAfterDaysSinceModificationGreaterThan,omitempty" tf:"tier_to_cool_after_days_since_modification_greater_than,omitempty"`
}

type FiltersObservation struct {
}

type FiltersParameters struct {

	// +kubebuilder:validation:Optional
	BlobTypes []*string `json:"blobTypes,omitempty" tf:"blob_types,omitempty"`

	// +kubebuilder:validation:Optional
	MatchBlobIndexTag []MatchBlobIndexTagParameters `json:"matchBlobIndexTag,omitempty" tf:"match_blob_index_tag,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixMatch []*string `json:"prefixMatch,omitempty" tf:"prefix_match,omitempty"`
}

type ManagementPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Rule []RuleParameters `json:"rule,omitempty" tf:"rule,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`
}

type MatchBlobIndexTagObservation struct {
}

type MatchBlobIndexTagParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

type RuleObservation struct {
}

type RuleParameters struct {

	// +kubebuilder:validation:Required
	Actions []ActionsParameters `json:"actions" tf:"actions,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Filters []FiltersParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type SnapshotObservation struct {
}

type SnapshotParameters struct {

	// +kubebuilder:validation:Optional
	ChangeTierToArchiveAfterDaysSinceCreation *int64 `json:"changeTierToArchiveAfterDaysSinceCreation,omitempty" tf:"change_tier_to_archive_after_days_since_creation,omitempty"`

	// +kubebuilder:validation:Optional
	ChangeTierToCoolAfterDaysSinceCreation *int64 `json:"changeTierToCoolAfterDaysSinceCreation,omitempty" tf:"change_tier_to_cool_after_days_since_creation,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAfterDaysSinceCreationGreaterThan *int64 `json:"deleteAfterDaysSinceCreationGreaterThan,omitempty" tf:"delete_after_days_since_creation_greater_than,omitempty"`
}

type VersionObservation struct {
}

type VersionParameters struct {

	// +kubebuilder:validation:Optional
	ChangeTierToArchiveAfterDaysSinceCreation *int64 `json:"changeTierToArchiveAfterDaysSinceCreation,omitempty" tf:"change_tier_to_archive_after_days_since_creation,omitempty"`

	// +kubebuilder:validation:Optional
	ChangeTierToCoolAfterDaysSinceCreation *int64 `json:"changeTierToCoolAfterDaysSinceCreation,omitempty" tf:"change_tier_to_cool_after_days_since_creation,omitempty"`

	// +kubebuilder:validation:Optional
	DeleteAfterDaysSinceCreation *int64 `json:"deleteAfterDaysSinceCreation,omitempty" tf:"delete_after_days_since_creation,omitempty"`
}

// ManagementPolicySpec defines the desired state of ManagementPolicy
type ManagementPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementPolicyParameters `json:"forProvider"`
}

// ManagementPolicyStatus defines the observed state of ManagementPolicy.
type ManagementPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementPolicy is the Schema for the ManagementPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementPolicySpec   `json:"spec"`
	Status            ManagementPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementPolicyList contains a list of ManagementPolicys
type ManagementPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementPolicy `json:"items"`
}

// Repository type metadata.
var (
	ManagementPolicy_Kind             = "ManagementPolicy"
	ManagementPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementPolicy_Kind}.String()
	ManagementPolicy_KindAPIVersion   = ManagementPolicy_Kind + "." + CRDGroupVersion.String()
	ManagementPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ManagementPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementPolicy{}, &ManagementPolicyList{})
}
