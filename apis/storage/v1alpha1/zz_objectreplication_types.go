/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ObjectReplicationObservation struct {
	DestinationObjectReplicationID *string `json:"destinationObjectReplicationId,omitempty" tf:"destination_object_replication_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SourceObjectReplicationID *string `json:"sourceObjectReplicationId,omitempty" tf:"source_object_replication_id,omitempty"`
}

type ObjectReplicationParameters struct {

	// +kubebuilder:validation:Required
	DestinationStorageAccountID *string `json:"destinationStorageAccountId" tf:"destination_storage_account_id,omitempty"`

	// +kubebuilder:validation:Required
	Rules []ObjectReplicationRulesParameters `json:"rules" tf:"rules,omitempty"`

	// +kubebuilder:validation:Required
	SourceStorageAccountID *string `json:"sourceStorageAccountId" tf:"source_storage_account_id,omitempty"`
}

type ObjectReplicationRulesObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type ObjectReplicationRulesParameters struct {

	// +kubebuilder:validation:Optional
	CopyBlobsCreatedAfter *string `json:"copyBlobsCreatedAfter,omitempty" tf:"copy_blobs_created_after,omitempty"`

	// +kubebuilder:validation:Required
	DestinationContainerName *string `json:"destinationContainerName" tf:"destination_container_name,omitempty"`

	// +kubebuilder:validation:Optional
	FilterOutBlobsWithPrefix []*string `json:"filterOutBlobsWithPrefix,omitempty" tf:"filter_out_blobs_with_prefix,omitempty"`

	// +kubebuilder:validation:Required
	SourceContainerName *string `json:"sourceContainerName" tf:"source_container_name,omitempty"`
}

// ObjectReplicationSpec defines the desired state of ObjectReplication
type ObjectReplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ObjectReplicationParameters `json:"forProvider"`
}

// ObjectReplicationStatus defines the observed state of ObjectReplication.
type ObjectReplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ObjectReplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectReplication is the Schema for the ObjectReplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ObjectReplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ObjectReplicationSpec   `json:"spec"`
	Status            ObjectReplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ObjectReplicationList contains a list of ObjectReplications
type ObjectReplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ObjectReplication `json:"items"`
}

// Repository type metadata.
var (
	ObjectReplication_Kind             = "ObjectReplication"
	ObjectReplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ObjectReplication_Kind}.String()
	ObjectReplication_KindAPIVersion   = ObjectReplication_Kind + "." + CRDGroupVersion.String()
	ObjectReplication_GroupVersionKind = CRDGroupVersion.WithKind(ObjectReplication_Kind)
)

func init() {
	SchemeBuilder.Register(&ObjectReplication{}, &ObjectReplicationList{})
}
