/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TableEntityObservation struct {
}

type TableEntityParameters struct {

	// +kubebuilder:validation:Required
	Entity map[string]*string `json:"entity" tf:"entity,omitempty"`

	// +kubebuilder:validation:Required
	PartitionKey *string `json:"partitionKey" tf:"partition_key,omitempty"`

	// +kubebuilder:validation:Required
	RowKey *string `json:"rowKey" tf:"row_key,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountName *string `json:"storageAccountName" tf:"storage_account_name,omitempty"`

	// +kubebuilder:validation:Required
	TableName *string `json:"tableName" tf:"table_name,omitempty"`
}

// TableEntitySpec defines the desired state of TableEntity
type TableEntitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TableEntityParameters `json:"forProvider"`
}

// TableEntityStatus defines the observed state of TableEntity.
type TableEntityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TableEntityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TableEntity is the Schema for the TableEntitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TableEntity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TableEntitySpec   `json:"spec"`
	Status            TableEntityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TableEntityList contains a list of TableEntitys
type TableEntityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TableEntity `json:"items"`
}

// Repository type metadata.
var (
	TableEntity_Kind             = "TableEntity"
	TableEntity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TableEntity_Kind}.String()
	TableEntity_KindAPIVersion   = TableEntity_Kind + "." + CRDGroupVersion.String()
	TableEntity_GroupVersionKind = CRDGroupVersion.WithKind(TableEntity_Kind)
)

func init() {
	SchemeBuilder.Register(&TableEntity{}, &TableEntityList{})
}
