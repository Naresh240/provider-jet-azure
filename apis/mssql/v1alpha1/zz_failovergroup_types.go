/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FailoverGroupObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FailoverGroupParameters struct {

	// +kubebuilder:validation:Optional
	Databases []*string `json:"databases,omitempty" tf:"databases,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PartnerServer []PartnerServerParameters `json:"partnerServer" tf:"partner_server,omitempty"`

	// +kubebuilder:validation:Required
	ReadWriteEndpointFailoverPolicy []ReadWriteEndpointFailoverPolicyParameters `json:"readWriteEndpointFailoverPolicy" tf:"read_write_endpoint_failover_policy,omitempty"`

	// +kubebuilder:validation:Optional
	ReadonlyEndpointFailoverPolicyEnabled *bool `json:"readonlyEndpointFailoverPolicyEnabled,omitempty" tf:"readonly_endpoint_failover_policy_enabled,omitempty"`

	// +kubebuilder:validation:Required
	ServerID *string `json:"serverId" tf:"server_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type PartnerServerObservation struct {
	Location *string `json:"location,omitempty" tf:"location,omitempty"`

	Role *string `json:"role,omitempty" tf:"role,omitempty"`
}

type PartnerServerParameters struct {

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

type ReadWriteEndpointFailoverPolicyObservation struct {
}

type ReadWriteEndpointFailoverPolicyParameters struct {

	// +kubebuilder:validation:Optional
	GraceMinutes *int64 `json:"graceMinutes,omitempty" tf:"grace_minutes,omitempty"`

	// +kubebuilder:validation:Required
	Mode *string `json:"mode" tf:"mode,omitempty"`
}

// FailoverGroupSpec defines the desired state of FailoverGroup
type FailoverGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FailoverGroupParameters `json:"forProvider"`
}

// FailoverGroupStatus defines the observed state of FailoverGroup.
type FailoverGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FailoverGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FailoverGroup is the Schema for the FailoverGroups API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FailoverGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FailoverGroupSpec   `json:"spec"`
	Status            FailoverGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FailoverGroupList contains a list of FailoverGroups
type FailoverGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FailoverGroup `json:"items"`
}

// Repository type metadata.
var (
	FailoverGroup_Kind             = "FailoverGroup"
	FailoverGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FailoverGroup_Kind}.String()
	FailoverGroup_KindAPIVersion   = FailoverGroup_Kind + "." + CRDGroupVersion.String()
	FailoverGroup_GroupVersionKind = CRDGroupVersion.WithKind(FailoverGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&FailoverGroup{}, &FailoverGroupList{})
}
