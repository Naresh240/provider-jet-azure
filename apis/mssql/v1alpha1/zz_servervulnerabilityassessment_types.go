/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecurringScansObservation struct {
}

type RecurringScansParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubscriptionAdmins *bool `json:"emailSubscriptionAdmins,omitempty" tf:"email_subscription_admins,omitempty"`

	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

type ServerVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServerVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	RecurringScans []RecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// +kubebuilder:validation:Required
	ServerSecurityAlertPolicyID *string `json:"serverSecurityAlertPolicyId" tf:"server_security_alert_policy_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageContainerSasKeySecretRef *v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`
}

// ServerVulnerabilityAssessmentSpec defines the desired state of ServerVulnerabilityAssessment
type ServerVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerVulnerabilityAssessmentParameters `json:"forProvider"`
}

// ServerVulnerabilityAssessmentStatus defines the observed state of ServerVulnerabilityAssessment.
type ServerVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServerVulnerabilityAssessment is the Schema for the ServerVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServerVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServerVulnerabilityAssessmentSpec   `json:"spec"`
	Status            ServerVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerVulnerabilityAssessmentList contains a list of ServerVulnerabilityAssessments
type ServerVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServerVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	ServerVulnerabilityAssessment_Kind             = "ServerVulnerabilityAssessment"
	ServerVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServerVulnerabilityAssessment_Kind}.String()
	ServerVulnerabilityAssessment_KindAPIVersion   = ServerVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	ServerVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(ServerVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&ServerVulnerabilityAssessment{}, &ServerVulnerabilityAssessmentList{})
}
