/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignToUserObservation struct {
}

type AssignToUserParameters struct {

	// +kubebuilder:validation:Optional
	ObjectID *string `json:"objectId,omitempty" tf:"object_id,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type LearningComputeInstanceIdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type LearningComputeInstanceIdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LearningComputeInstanceObservation struct {
}

type LearningComputeInstanceParameters struct {

	// +kubebuilder:validation:Optional
	AssignToUser []AssignToUserParameters `json:"assignToUser,omitempty" tf:"assign_to_user,omitempty"`

	// +kubebuilder:validation:Optional
	AuthorizationType *string `json:"authorizationType,omitempty" tf:"authorization_type,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Identity []LearningComputeInstanceIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	MachineLearningWorkspaceID *string `json:"machineLearningWorkspaceId" tf:"machine_learning_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SSH []LearningComputeInstanceSSHParameters `json:"ssh,omitempty" tf:"ssh,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetResourceID *string `json:"subnetResourceId,omitempty" tf:"subnet_resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineSize *string `json:"virtualMachineSize" tf:"virtual_machine_size,omitempty"`
}

type LearningComputeInstanceSSHObservation struct {
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type LearningComputeInstanceSSHParameters struct {

	// +kubebuilder:validation:Required
	PublicKey *string `json:"publicKey" tf:"public_key,omitempty"`
}

// LearningComputeInstanceSpec defines the desired state of LearningComputeInstance
type LearningComputeInstanceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LearningComputeInstanceParameters `json:"forProvider"`
}

// LearningComputeInstanceStatus defines the observed state of LearningComputeInstance.
type LearningComputeInstanceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LearningComputeInstanceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LearningComputeInstance is the Schema for the LearningComputeInstances API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type LearningComputeInstance struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LearningComputeInstanceSpec   `json:"spec"`
	Status            LearningComputeInstanceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LearningComputeInstanceList contains a list of LearningComputeInstances
type LearningComputeInstanceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LearningComputeInstance `json:"items"`
}

// Repository type metadata.
var (
	LearningComputeInstance_Kind             = "LearningComputeInstance"
	LearningComputeInstance_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LearningComputeInstance_Kind}.String()
	LearningComputeInstance_KindAPIVersion   = LearningComputeInstance_Kind + "." + CRDGroupVersion.String()
	LearningComputeInstance_GroupVersionKind = CRDGroupVersion.WithKind(LearningComputeInstance_Kind)
)

func init() {
	SchemeBuilder.Register(&LearningComputeInstance{}, &LearningComputeInstanceList{})
}
