/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudAppObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	URL *string `json:"url,omitempty" tf:"url,omitempty"`
}

type CloudAppParameters struct {

	// +kubebuilder:validation:Optional
	HTTPSOnly *bool `json:"httpsOnly,omitempty" tf:"https_only,omitempty"`

	// +kubebuilder:validation:Optional
	Identity []IdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// +kubebuilder:validation:Optional
	IsPublic *bool `json:"isPublic,omitempty" tf:"is_public,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PersistentDisk []PersistentDiskParameters `json:"persistentDisk,omitempty" tf:"persistent_disk,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Optional
	TLSEnabled *bool `json:"tlsEnabled,omitempty" tf:"tls_enabled,omitempty"`
}

type IdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type IdentityParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PersistentDiskObservation struct {
}

type PersistentDiskParameters struct {

	// +kubebuilder:validation:Optional
	MountPath *string `json:"mountPath,omitempty" tf:"mount_path,omitempty"`

	// +kubebuilder:validation:Required
	SizeInGb *int64 `json:"sizeInGb" tf:"size_in_gb,omitempty"`
}

// CloudAppSpec defines the desired state of CloudApp
type CloudAppSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudAppParameters `json:"forProvider"`
}

// CloudAppStatus defines the observed state of CloudApp.
type CloudAppStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudAppObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudApp is the Schema for the CloudApps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CloudApp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudAppSpec   `json:"spec"`
	Status            CloudAppStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudAppList contains a list of CloudApps
type CloudAppList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudApp `json:"items"`
}

// Repository type metadata.
var (
	CloudApp_Kind             = "CloudApp"
	CloudApp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudApp_Kind}.String()
	CloudApp_KindAPIVersion   = CloudApp_Kind + "." + CRDGroupVersion.String()
	CloudApp_GroupVersionKind = CRDGroupVersion.WithKind(CloudApp_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudApp{}, &CloudAppList{})
}
