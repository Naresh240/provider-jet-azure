/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CloudCustomDomainObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CloudCustomDomainParameters struct {

	// +kubebuilder:validation:Optional
	CertificateName *string `json:"certificateName,omitempty" tf:"certificate_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SpringCloudAppID *string `json:"springCloudAppId" tf:"spring_cloud_app_id,omitempty"`

	// +kubebuilder:validation:Optional
	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

// CloudCustomDomainSpec defines the desired state of CloudCustomDomain
type CloudCustomDomainSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CloudCustomDomainParameters `json:"forProvider"`
}

// CloudCustomDomainStatus defines the observed state of CloudCustomDomain.
type CloudCustomDomainStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CloudCustomDomainObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CloudCustomDomain is the Schema for the CloudCustomDomains API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CloudCustomDomain struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CloudCustomDomainSpec   `json:"spec"`
	Status            CloudCustomDomainStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CloudCustomDomainList contains a list of CloudCustomDomains
type CloudCustomDomainList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CloudCustomDomain `json:"items"`
}

// Repository type metadata.
var (
	CloudCustomDomain_Kind             = "CloudCustomDomain"
	CloudCustomDomain_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CloudCustomDomain_Kind}.String()
	CloudCustomDomain_KindAPIVersion   = CloudCustomDomain_Kind + "." + CRDGroupVersion.String()
	CloudCustomDomain_GroupVersionKind = CRDGroupVersion.WithKind(CloudCustomDomain_Kind)
)

func init() {
	SchemeBuilder.Register(&CloudCustomDomain{}, &CloudCustomDomainList{})
}
