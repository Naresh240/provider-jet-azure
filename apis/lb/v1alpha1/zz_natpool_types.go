/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NatPoolObservation struct {
	FrontendIPConfigurationID *string `json:"frontendIpConfigurationId,omitempty" tf:"frontend_ip_configuration_id,omitempty"`
}

type NatPoolParameters struct {

	// +kubebuilder:validation:Required
	BackendPort *int64 `json:"backendPort" tf:"backend_port,omitempty"`

	// +kubebuilder:validation:Required
	FrontendIPConfigurationName *string `json:"frontendIpConfigurationName" tf:"frontend_ip_configuration_name,omitempty"`

	// +kubebuilder:validation:Required
	FrontendPortEnd *int64 `json:"frontendPortEnd" tf:"frontend_port_end,omitempty"`

	// +kubebuilder:validation:Required
	FrontendPortStart *int64 `json:"frontendPortStart" tf:"frontend_port_start,omitempty"`

	// +kubebuilder:validation:Required
	LoadbalancerID *string `json:"loadbalancerId" tf:"loadbalancer_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// NatPoolSpec defines the desired state of NatPool
type NatPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatPoolParameters `json:"forProvider"`
}

// NatPoolStatus defines the observed state of NatPool.
type NatPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NatPool is the Schema for the NatPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NatPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NatPoolSpec   `json:"spec"`
	Status            NatPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatPoolList contains a list of NatPools
type NatPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NatPool `json:"items"`
}

// Repository type metadata.
var (
	NatPool_Kind             = "NatPool"
	NatPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NatPool_Kind}.String()
	NatPool_KindAPIVersion   = NatPool_Kind + "." + CRDGroupVersion.String()
	NatPool_GroupVersionKind = CRDGroupVersion.WithKind(NatPool_Kind)
)

func init() {
	SchemeBuilder.Register(&NatPool{}, &NatPoolList{})
}
