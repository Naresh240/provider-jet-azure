/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackendAddressObservation struct {
}

type BackendAddressParameters struct {

	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	VirtualNetworkID *string `json:"virtualNetworkId" tf:"virtual_network_id,omitempty"`
}

type BackendAddressPoolObservation struct {
	BackendIPConfigurations []*string `json:"backendIpConfigurations,omitempty" tf:"backend_ip_configurations,omitempty"`

	LoadBalancingRules []*string `json:"loadBalancingRules,omitempty" tf:"load_balancing_rules,omitempty"`

	OutboundRules []*string `json:"outboundRules,omitempty" tf:"outbound_rules,omitempty"`
}

type BackendAddressPoolParameters struct {

	// +kubebuilder:validation:Optional
	BackendAddress []BackendAddressParameters `json:"backendAddress,omitempty" tf:"backend_address,omitempty"`

	// +kubebuilder:validation:Required
	LoadbalancerID *string `json:"loadbalancerId" tf:"loadbalancer_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`
}

// BackendAddressPoolSpec defines the desired state of BackendAddressPool
type BackendAddressPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackendAddressPoolParameters `json:"forProvider"`
}

// BackendAddressPoolStatus defines the observed state of BackendAddressPool.
type BackendAddressPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackendAddressPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackendAddressPool is the Schema for the BackendAddressPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BackendAddressPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackendAddressPoolSpec   `json:"spec"`
	Status            BackendAddressPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackendAddressPoolList contains a list of BackendAddressPools
type BackendAddressPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackendAddressPool `json:"items"`
}

// Repository type metadata.
var (
	BackendAddressPool_Kind             = "BackendAddressPool"
	BackendAddressPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackendAddressPool_Kind}.String()
	BackendAddressPool_KindAPIVersion   = BackendAddressPool_Kind + "." + CRDGroupVersion.String()
	BackendAddressPool_GroupVersionKind = CRDGroupVersion.WithKind(BackendAddressPool_Kind)
)

func init() {
	SchemeBuilder.Register(&BackendAddressPool{}, &BackendAddressPoolList{})
}
