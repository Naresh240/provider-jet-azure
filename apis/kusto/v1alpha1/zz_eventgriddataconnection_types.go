/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EventgridDataConnectionObservation struct {
}

type EventgridDataConnectionParameters struct {

	// +kubebuilder:validation:Optional
	BlobStorageEventType *string `json:"blobStorageEventType,omitempty" tf:"blob_storage_event_type,omitempty"`

	// +kubebuilder:validation:Required
	ClusterName *string `json:"clusterName" tf:"cluster_name,omitempty"`

	// +kubebuilder:validation:Optional
	DataFormat *string `json:"dataFormat,omitempty" tf:"data_format,omitempty"`

	// +kubebuilder:validation:Required
	DatabaseName *string `json:"databaseName" tf:"database_name,omitempty"`

	// +kubebuilder:validation:Required
	EventhubConsumerGroupName *string `json:"eventhubConsumerGroupName" tf:"eventhub_consumer_group_name,omitempty"`

	// +kubebuilder:validation:Required
	EventhubID *string `json:"eventhubId" tf:"eventhub_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	MappingRuleName *string `json:"mappingRuleName,omitempty" tf:"mapping_rule_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SkipFirstRecord *bool `json:"skipFirstRecord,omitempty" tf:"skip_first_record,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`
}

// EventgridDataConnectionSpec defines the desired state of EventgridDataConnection
type EventgridDataConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventgridDataConnectionParameters `json:"forProvider"`
}

// EventgridDataConnectionStatus defines the observed state of EventgridDataConnection.
type EventgridDataConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventgridDataConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridDataConnection is the Schema for the EventgridDataConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EventgridDataConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventgridDataConnectionSpec   `json:"spec"`
	Status            EventgridDataConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventgridDataConnectionList contains a list of EventgridDataConnections
type EventgridDataConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventgridDataConnection `json:"items"`
}

// Repository type metadata.
var (
	EventgridDataConnection_Kind             = "EventgridDataConnection"
	EventgridDataConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventgridDataConnection_Kind}.String()
	EventgridDataConnection_KindAPIVersion   = EventgridDataConnection_Kind + "." + CRDGroupVersion.String()
	EventgridDataConnection_GroupVersionKind = CRDGroupVersion.WithKind(EventgridDataConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&EventgridDataConnection{}, &EventgridDataConnectionList{})
}
