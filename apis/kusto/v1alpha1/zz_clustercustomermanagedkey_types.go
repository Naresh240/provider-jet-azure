/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterCustomerManagedKeyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ClusterCustomerManagedKeyParameters struct {

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyName *string `json:"keyName" tf:"key_name,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultID *string `json:"keyVaultId" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyVersion *string `json:"keyVersion" tf:"key_version,omitempty"`

	// +kubebuilder:validation:Optional
	UserIdentity *string `json:"userIdentity,omitempty" tf:"user_identity,omitempty"`
}

// ClusterCustomerManagedKeySpec defines the desired state of ClusterCustomerManagedKey
type ClusterCustomerManagedKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterCustomerManagedKeyParameters `json:"forProvider"`
}

// ClusterCustomerManagedKeyStatus defines the observed state of ClusterCustomerManagedKey.
type ClusterCustomerManagedKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterCustomerManagedKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterCustomerManagedKey is the Schema for the ClusterCustomerManagedKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ClusterCustomerManagedKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ClusterCustomerManagedKeySpec   `json:"spec"`
	Status            ClusterCustomerManagedKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterCustomerManagedKeyList contains a list of ClusterCustomerManagedKeys
type ClusterCustomerManagedKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ClusterCustomerManagedKey `json:"items"`
}

// Repository type metadata.
var (
	ClusterCustomerManagedKey_Kind             = "ClusterCustomerManagedKey"
	ClusterCustomerManagedKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ClusterCustomerManagedKey_Kind}.String()
	ClusterCustomerManagedKey_KindAPIVersion   = ClusterCustomerManagedKey_Kind + "." + CRDGroupVersion.String()
	ClusterCustomerManagedKey_GroupVersionKind = CRDGroupVersion.WithKind(ClusterCustomerManagedKey_Kind)
)

func init() {
	SchemeBuilder.Register(&ClusterCustomerManagedKey{}, &ClusterCustomerManagedKeyList{})
}
