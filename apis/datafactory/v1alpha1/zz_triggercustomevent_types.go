/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TriggerCustomEventObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TriggerCustomEventParameters struct {

	// +kubebuilder:validation:Optional
	Activated *bool `json:"activated,omitempty" tf:"activated,omitempty"`

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryID *string `json:"dataFactoryId" tf:"data_factory_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EventGridTopicID *string `json:"eventgridTopicId" tf:"eventgrid_topic_id,omitempty"`

	// +kubebuilder:validation:Required
	Events []*string `json:"events" tf:"events,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Pipeline []TriggerCustomEventPipelineParameters `json:"pipeline" tf:"pipeline,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty" tf:"subject_begins_with,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty" tf:"subject_ends_with,omitempty"`
}

type TriggerCustomEventPipelineObservation struct {
}

type TriggerCustomEventPipelineParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`
}

// TriggerCustomEventSpec defines the desired state of TriggerCustomEvent
type TriggerCustomEventSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TriggerCustomEventParameters `json:"forProvider"`
}

// TriggerCustomEventStatus defines the observed state of TriggerCustomEvent.
type TriggerCustomEventStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TriggerCustomEventObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerCustomEvent is the Schema for the TriggerCustomEvents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TriggerCustomEvent struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TriggerCustomEventSpec   `json:"spec"`
	Status            TriggerCustomEventStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TriggerCustomEventList contains a list of TriggerCustomEvents
type TriggerCustomEventList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TriggerCustomEvent `json:"items"`
}

// Repository type metadata.
var (
	TriggerCustomEvent_Kind             = "TriggerCustomEvent"
	TriggerCustomEvent_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TriggerCustomEvent_Kind}.String()
	TriggerCustomEvent_KindAPIVersion   = TriggerCustomEvent_Kind + "." + CRDGroupVersion.String()
	TriggerCustomEvent_GroupVersionKind = CRDGroupVersion.WithKind(TriggerCustomEvent_Kind)
)

func init() {
	SchemeBuilder.Register(&TriggerCustomEvent{}, &TriggerCustomEventList{})
}
