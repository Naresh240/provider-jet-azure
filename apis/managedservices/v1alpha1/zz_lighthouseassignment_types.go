/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LighthouseAssignmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LighthouseAssignmentParameters struct {

	// +kubebuilder:validation:Required
	LighthouseDefinitionID *string `json:"lighthouseDefinitionId" tf:"lighthouse_definition_id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`
}

// LighthouseAssignmentSpec defines the desired state of LighthouseAssignment
type LighthouseAssignmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LighthouseAssignmentParameters `json:"forProvider"`
}

// LighthouseAssignmentStatus defines the observed state of LighthouseAssignment.
type LighthouseAssignmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LighthouseAssignmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LighthouseAssignment is the Schema for the LighthouseAssignments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type LighthouseAssignment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LighthouseAssignmentSpec   `json:"spec"`
	Status            LighthouseAssignmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LighthouseAssignmentList contains a list of LighthouseAssignments
type LighthouseAssignmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LighthouseAssignment `json:"items"`
}

// Repository type metadata.
var (
	LighthouseAssignment_Kind             = "LighthouseAssignment"
	LighthouseAssignment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LighthouseAssignment_Kind}.String()
	LighthouseAssignment_KindAPIVersion   = LighthouseAssignment_Kind + "." + CRDGroupVersion.String()
	LighthouseAssignment_GroupVersionKind = CRDGroupVersion.WithKind(LighthouseAssignment_Kind)
)

func init() {
	SchemeBuilder.Register(&LighthouseAssignment{}, &LighthouseAssignmentList{})
}
