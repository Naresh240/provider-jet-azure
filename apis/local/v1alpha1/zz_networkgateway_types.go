/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BgpSettingsObservation struct {
}

type BgpSettingsParameters struct {

	// +kubebuilder:validation:Required
	Asn *int64 `json:"asn" tf:"asn,omitempty"`

	// +kubebuilder:validation:Required
	BgpPeeringAddress *string `json:"bgpPeeringAddress" tf:"bgp_peering_address,omitempty"`

	// +kubebuilder:validation:Optional
	PeerWeight *int64 `json:"peerWeight,omitempty" tf:"peer_weight,omitempty"`
}

type NetworkGatewayObservation struct {
}

type NetworkGatewayParameters struct {

	// +kubebuilder:validation:Optional
	AddressSpace []*string `json:"addressSpace,omitempty" tf:"address_space,omitempty"`

	// +kubebuilder:validation:Optional
	BgpSettings []BgpSettingsParameters `json:"bgpSettings,omitempty" tf:"bgp_settings,omitempty"`

	// +kubebuilder:validation:Optional
	GatewayAddress *string `json:"gatewayAddress,omitempty" tf:"gateway_address,omitempty"`

	// +kubebuilder:validation:Optional
	GatewayFqdn *string `json:"gatewayFqdn,omitempty" tf:"gateway_fqdn,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// NetworkGatewaySpec defines the desired state of NetworkGateway
type NetworkGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkGatewayParameters `json:"forProvider"`
}

// NetworkGatewayStatus defines the observed state of NetworkGateway.
type NetworkGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkGateway is the Schema for the NetworkGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NetworkGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NetworkGatewaySpec   `json:"spec"`
	Status            NetworkGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkGatewayList contains a list of NetworkGateways
type NetworkGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkGateway `json:"items"`
}

// Repository type metadata.
var (
	NetworkGateway_Kind             = "NetworkGateway"
	NetworkGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkGateway_Kind}.String()
	NetworkGateway_KindAPIVersion   = NetworkGateway_Kind + "." + CRDGroupVersion.String()
	NetworkGateway_GroupVersionKind = CRDGroupVersion.WithKind(NetworkGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkGateway{}, &NetworkGatewayList{})
}
