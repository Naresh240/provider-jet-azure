/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RegistryTokenObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RegistryTokenParameters struct {

	// +kubebuilder:validation:Required
	ContainerRegistryName *string `json:"containerRegistryName" tf:"container_registry_name,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ScopeMapID *string `json:"scopeMapId" tf:"scope_map_id,omitempty"`
}

// RegistryTokenSpec defines the desired state of RegistryToken
type RegistryTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RegistryTokenParameters `json:"forProvider"`
}

// RegistryTokenStatus defines the observed state of RegistryToken.
type RegistryTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RegistryTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryToken is the Schema for the RegistryTokens API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RegistryToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RegistryTokenSpec   `json:"spec"`
	Status            RegistryTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RegistryTokenList contains a list of RegistryTokens
type RegistryTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RegistryToken `json:"items"`
}

// Repository type metadata.
var (
	RegistryToken_Kind             = "RegistryToken"
	RegistryToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RegistryToken_Kind}.String()
	RegistryToken_KindAPIVersion   = RegistryToken_Kind + "." + CRDGroupVersion.String()
	RegistryToken_GroupVersionKind = CRDGroupVersion.WithKind(RegistryToken_Kind)
)

func init() {
	SchemeBuilder.Register(&RegistryToken{}, &RegistryTokenList{})
}
