/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ExpressRouteAuthorizationObservation struct {
	ExpressRouteAuthorizationID *string `json:"expressRouteAuthorizationId,omitempty" tf:"express_route_authorization_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ExpressRouteAuthorizationParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PrivateCloudID *string `json:"privateCloudId" tf:"private_cloud_id,omitempty"`
}

// ExpressRouteAuthorizationSpec defines the desired state of ExpressRouteAuthorization
type ExpressRouteAuthorizationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ExpressRouteAuthorizationParameters `json:"forProvider"`
}

// ExpressRouteAuthorizationStatus defines the observed state of ExpressRouteAuthorization.
type ExpressRouteAuthorizationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ExpressRouteAuthorizationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteAuthorization is the Schema for the ExpressRouteAuthorizations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ExpressRouteAuthorization struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ExpressRouteAuthorizationSpec   `json:"spec"`
	Status            ExpressRouteAuthorizationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ExpressRouteAuthorizationList contains a list of ExpressRouteAuthorizations
type ExpressRouteAuthorizationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ExpressRouteAuthorization `json:"items"`
}

// Repository type metadata.
var (
	ExpressRouteAuthorization_Kind             = "ExpressRouteAuthorization"
	ExpressRouteAuthorization_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ExpressRouteAuthorization_Kind}.String()
	ExpressRouteAuthorization_KindAPIVersion   = ExpressRouteAuthorization_Kind + "." + CRDGroupVersion.String()
	ExpressRouteAuthorization_GroupVersionKind = CRDGroupVersion.WithKind(ExpressRouteAuthorization_Kind)
)

func init() {
	SchemeBuilder.Register(&ExpressRouteAuthorization{}, &ExpressRouteAuthorizationList{})
}
