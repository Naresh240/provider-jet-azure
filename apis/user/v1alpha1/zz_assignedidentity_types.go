/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignedIdentityObservation struct {
	ClientID *string `json:"clientId,omitempty" tf:"client_id,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AssignedIdentityParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// AssignedIdentitySpec defines the desired state of AssignedIdentity
type AssignedIdentitySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssignedIdentityParameters `json:"forProvider"`
}

// AssignedIdentityStatus defines the observed state of AssignedIdentity.
type AssignedIdentityStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssignedIdentityObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssignedIdentity is the Schema for the AssignedIdentitys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AssignedIdentity struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssignedIdentitySpec   `json:"spec"`
	Status            AssignedIdentityStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssignedIdentityList contains a list of AssignedIdentitys
type AssignedIdentityList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssignedIdentity `json:"items"`
}

// Repository type metadata.
var (
	AssignedIdentity_Kind             = "AssignedIdentity"
	AssignedIdentity_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AssignedIdentity_Kind}.String()
	AssignedIdentity_KindAPIVersion   = AssignedIdentity_Kind + "." + CRDGroupVersion.String()
	AssignedIdentity_GroupVersionKind = CRDGroupVersion.WithKind(AssignedIdentity_Kind)
)

func init() {
	SchemeBuilder.Register(&AssignedIdentity{}, &AssignedIdentityList{})
}
