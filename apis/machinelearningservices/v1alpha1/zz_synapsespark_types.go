/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SynapseSparkIdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type SynapseSparkIdentityParameters struct {

	// +kubebuilder:validation:Optional
	IdentityIds []*string `json:"identityIds,omitempty" tf:"identity_ids,omitempty"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type SynapseSparkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SynapseSparkParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Identity []SynapseSparkIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	MachineLearningWorkspaceID *string `json:"machineLearningWorkspaceId" tf:"machine_learning_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SynapseSparkPoolID *string `json:"synapseSparkPoolId" tf:"synapse_spark_pool_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SynapseSparkSpec defines the desired state of SynapseSpark
type SynapseSparkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SynapseSparkParameters `json:"forProvider"`
}

// SynapseSparkStatus defines the observed state of SynapseSpark.
type SynapseSparkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SynapseSparkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseSpark is the Schema for the SynapseSparks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SynapseSpark struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SynapseSparkSpec   `json:"spec"`
	Status            SynapseSparkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SynapseSparkList contains a list of SynapseSparks
type SynapseSparkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SynapseSpark `json:"items"`
}

// Repository type metadata.
var (
	SynapseSpark_Kind             = "SynapseSpark"
	SynapseSpark_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SynapseSpark_Kind}.String()
	SynapseSpark_KindAPIVersion   = SynapseSpark_Kind + "." + CRDGroupVersion.String()
	SynapseSpark_GroupVersionKind = CRDGroupVersion.WithKind(SynapseSpark_Kind)
)

func init() {
	SchemeBuilder.Register(&SynapseSpark{}, &SynapseSparkList{})
}
