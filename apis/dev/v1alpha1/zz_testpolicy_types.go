/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TestPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TestPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	EvaluatorType *string `json:"evaluatorType" tf:"evaluator_type,omitempty"`

	// +kubebuilder:validation:Optional
	FactData *string `json:"factData,omitempty" tf:"fact_data,omitempty"`

	// +kubebuilder:validation:Required
	LabName *string `json:"labName" tf:"lab_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PolicySetName *string `json:"policySetName" tf:"policy_set_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Threshold *string `json:"threshold" tf:"threshold,omitempty"`
}

// TestPolicySpec defines the desired state of TestPolicy
type TestPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TestPolicyParameters `json:"forProvider"`
}

// TestPolicyStatus defines the observed state of TestPolicy.
type TestPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TestPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TestPolicy is the Schema for the TestPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TestPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TestPolicySpec   `json:"spec"`
	Status            TestPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TestPolicyList contains a list of TestPolicys
type TestPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TestPolicy `json:"items"`
}

// Repository type metadata.
var (
	TestPolicy_Kind             = "TestPolicy"
	TestPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TestPolicy_Kind}.String()
	TestPolicy_KindAPIVersion   = TestPolicy_Kind + "." + CRDGroupVersion.String()
	TestPolicy_GroupVersionKind = CRDGroupVersion.WithKind(TestPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&TestPolicy{}, &TestPolicyList{})
}
