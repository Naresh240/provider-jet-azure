/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NotificationSettingsObservation struct {
}

type NotificationSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TimeInMinutes *int64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

type TestGlobalVmShutdownScheduleObservation struct {
}

type TestGlobalVmShutdownScheduleParameters struct {

	// +kubebuilder:validation:Required
	DailyRecurrenceTime *string `json:"dailyRecurrenceTime" tf:"daily_recurrence_time,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	NotificationSettings []NotificationSettingsParameters `json:"notificationSettings" tf:"notification_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineID *string `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

// TestGlobalVmShutdownScheduleSpec defines the desired state of TestGlobalVmShutdownSchedule
type TestGlobalVmShutdownScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TestGlobalVmShutdownScheduleParameters `json:"forProvider"`
}

// TestGlobalVmShutdownScheduleStatus defines the observed state of TestGlobalVmShutdownSchedule.
type TestGlobalVmShutdownScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TestGlobalVmShutdownScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TestGlobalVmShutdownSchedule is the Schema for the TestGlobalVmShutdownSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TestGlobalVmShutdownSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TestGlobalVmShutdownScheduleSpec   `json:"spec"`
	Status            TestGlobalVmShutdownScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TestGlobalVmShutdownScheduleList contains a list of TestGlobalVmShutdownSchedules
type TestGlobalVmShutdownScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TestGlobalVmShutdownSchedule `json:"items"`
}

// Repository type metadata.
var (
	TestGlobalVmShutdownSchedule_Kind             = "TestGlobalVmShutdownSchedule"
	TestGlobalVmShutdownSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TestGlobalVmShutdownSchedule_Kind}.String()
	TestGlobalVmShutdownSchedule_KindAPIVersion   = TestGlobalVmShutdownSchedule_Kind + "." + CRDGroupVersion.String()
	TestGlobalVmShutdownSchedule_GroupVersionKind = CRDGroupVersion.WithKind(TestGlobalVmShutdownSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&TestGlobalVmShutdownSchedule{}, &TestGlobalVmShutdownScheduleList{})
}
