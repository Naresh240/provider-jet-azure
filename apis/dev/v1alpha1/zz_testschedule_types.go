/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DailyRecurrenceObservation struct {
}

type DailyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`
}

type HourlyRecurrenceObservation struct {
}

type HourlyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Minute *int64 `json:"minute" tf:"minute,omitempty"`
}

type TestScheduleNotificationSettingsObservation struct {
}

type TestScheduleNotificationSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TimeInMinutes *int64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

type TestScheduleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TestScheduleParameters struct {

	// +kubebuilder:validation:Optional
	DailyRecurrence []DailyRecurrenceParameters `json:"dailyRecurrence,omitempty" tf:"daily_recurrence,omitempty"`

	// +kubebuilder:validation:Optional
	HourlyRecurrence []HourlyRecurrenceParameters `json:"hourlyRecurrence,omitempty" tf:"hourly_recurrence,omitempty"`

	// +kubebuilder:validation:Required
	LabName *string `json:"labName" tf:"lab_name,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NotificationSettings []TestScheduleNotificationSettingsParameters `json:"notificationSettings" tf:"notification_settings,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TaskType *string `json:"taskType" tf:"task_type,omitempty"`

	// +kubebuilder:validation:Required
	TimeZoneID *string `json:"timeZoneId" tf:"time_zone_id,omitempty"`

	// +kubebuilder:validation:Optional
	WeeklyRecurrence []WeeklyRecurrenceParameters `json:"weeklyRecurrence,omitempty" tf:"weekly_recurrence,omitempty"`
}

type WeeklyRecurrenceObservation struct {
}

type WeeklyRecurrenceParameters struct {

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`

	// +kubebuilder:validation:Optional
	WeekDays []*string `json:"weekDays,omitempty" tf:"week_days,omitempty"`
}

// TestScheduleSpec defines the desired state of TestSchedule
type TestScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TestScheduleParameters `json:"forProvider"`
}

// TestScheduleStatus defines the observed state of TestSchedule.
type TestScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TestScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TestSchedule is the Schema for the TestSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TestSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TestScheduleSpec   `json:"spec"`
	Status            TestScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TestScheduleList contains a list of TestSchedules
type TestScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TestSchedule `json:"items"`
}

// Repository type metadata.
var (
	TestSchedule_Kind             = "TestSchedule"
	TestSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TestSchedule_Kind}.String()
	TestSchedule_KindAPIVersion   = TestSchedule_Kind + "." + CRDGroupVersion.String()
	TestSchedule_GroupVersionKind = CRDGroupVersion.WithKind(TestSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&TestSchedule{}, &TestScheduleList{})
}
