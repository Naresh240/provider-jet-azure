/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HardwareSecurityModuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type HardwareSecurityModuleParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NetworkProfile []NetworkProfileParameters `json:"networkProfile" tf:"network_profile,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	StampID *string `json:"stampId,omitempty" tf:"stamp_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

type NetworkProfileObservation struct {
}

type NetworkProfileParameters struct {

	// +kubebuilder:validation:Required
	NetworkInterfacePrivateIPAddresses []*string `json:"networkInterfacePrivateIpAddresses" tf:"network_interface_private_ip_addresses,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// HardwareSecurityModuleSpec defines the desired state of HardwareSecurityModule
type HardwareSecurityModuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HardwareSecurityModuleParameters `json:"forProvider"`
}

// HardwareSecurityModuleStatus defines the observed state of HardwareSecurityModule.
type HardwareSecurityModuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HardwareSecurityModuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HardwareSecurityModule is the Schema for the HardwareSecurityModules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type HardwareSecurityModule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HardwareSecurityModuleSpec   `json:"spec"`
	Status            HardwareSecurityModuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HardwareSecurityModuleList contains a list of HardwareSecurityModules
type HardwareSecurityModuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HardwareSecurityModule `json:"items"`
}

// Repository type metadata.
var (
	HardwareSecurityModule_Kind             = "HardwareSecurityModule"
	HardwareSecurityModule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HardwareSecurityModule_Kind}.String()
	HardwareSecurityModule_KindAPIVersion   = HardwareSecurityModule_Kind + "." + CRDGroupVersion.String()
	HardwareSecurityModule_GroupVersionKind = CRDGroupVersion.WithKind(HardwareSecurityModule_Kind)
)

func init() {
	SchemeBuilder.Register(&HardwareSecurityModule{}, &HardwareSecurityModuleList{})
}
