/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PtrRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type PtrRecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Records []*string `json:"records" tf:"records,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

// PtrRecordSpec defines the desired state of PtrRecord
type PtrRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PtrRecordParameters `json:"forProvider"`
}

// PtrRecordStatus defines the observed state of PtrRecord.
type PtrRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PtrRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PtrRecord is the Schema for the PtrRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type PtrRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PtrRecordSpec   `json:"spec"`
	Status            PtrRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PtrRecordList contains a list of PtrRecords
type PtrRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PtrRecord `json:"items"`
}

// Repository type metadata.
var (
	PtrRecord_Kind             = "PtrRecord"
	PtrRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PtrRecord_Kind}.String()
	PtrRecord_KindAPIVersion   = PtrRecord_Kind + "." + CRDGroupVersion.String()
	PtrRecord_GroupVersionKind = CRDGroupVersion.WithKind(PtrRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&PtrRecord{}, &PtrRecordList{})
}
