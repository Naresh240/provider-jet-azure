/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SrvRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SrvRecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Record []SrvRecordRecordParameters `json:"record" tf:"record,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

type SrvRecordRecordObservation struct {
}

type SrvRecordRecordParameters struct {

	// +kubebuilder:validation:Required
	Port *int64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`

	// +kubebuilder:validation:Required
	Target *string `json:"target" tf:"target,omitempty"`

	// +kubebuilder:validation:Required
	Weight *int64 `json:"weight" tf:"weight,omitempty"`
}

// SrvRecordSpec defines the desired state of SrvRecord
type SrvRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SrvRecordParameters `json:"forProvider"`
}

// SrvRecordStatus defines the observed state of SrvRecord.
type SrvRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SrvRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SrvRecord is the Schema for the SrvRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SrvRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SrvRecordSpec   `json:"spec"`
	Status            SrvRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SrvRecordList contains a list of SrvRecords
type SrvRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SrvRecord `json:"items"`
}

// Repository type metadata.
var (
	SrvRecord_Kind             = "SrvRecord"
	SrvRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SrvRecord_Kind}.String()
	SrvRecord_KindAPIVersion   = SrvRecord_Kind + "." + CRDGroupVersion.String()
	SrvRecord_GroupVersionKind = CRDGroupVersion.WithKind(SrvRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&SrvRecord{}, &SrvRecordList{})
}
