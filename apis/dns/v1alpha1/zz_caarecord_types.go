/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CaaRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type CaaRecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Record []RecordParameters `json:"record" tf:"record,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

type RecordObservation struct {
}

type RecordParameters struct {

	// +kubebuilder:validation:Required
	Flags *int64 `json:"flags" tf:"flags,omitempty"`

	// +kubebuilder:validation:Required
	Tag *string `json:"tag" tf:"tag,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// CaaRecordSpec defines the desired state of CaaRecord
type CaaRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CaaRecordParameters `json:"forProvider"`
}

// CaaRecordStatus defines the observed state of CaaRecord.
type CaaRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CaaRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CaaRecord is the Schema for the CaaRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CaaRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CaaRecordSpec   `json:"spec"`
	Status            CaaRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CaaRecordList contains a list of CaaRecords
type CaaRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CaaRecord `json:"items"`
}

// Repository type metadata.
var (
	CaaRecord_Kind             = "CaaRecord"
	CaaRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CaaRecord_Kind}.String()
	CaaRecord_KindAPIVersion   = CaaRecord_Kind + "." + CRDGroupVersion.String()
	CaaRecord_GroupVersionKind = CRDGroupVersion.WithKind(CaaRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&CaaRecord{}, &CaaRecordList{})
}
