/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CacheBlobTargetObservation struct {
}

type CacheBlobTargetParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	CacheName *string `json:"cacheName" tf:"cache_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NamespacePath *string `json:"namespacePath" tf:"namespace_path,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	StorageContainerID *string `json:"storageContainerId" tf:"storage_container_id,omitempty"`
}

// CacheBlobTargetSpec defines the desired state of CacheBlobTarget
type CacheBlobTargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CacheBlobTargetParameters `json:"forProvider"`
}

// CacheBlobTargetStatus defines the observed state of CacheBlobTarget.
type CacheBlobTargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CacheBlobTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CacheBlobTarget is the Schema for the CacheBlobTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CacheBlobTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheBlobTargetSpec   `json:"spec"`
	Status            CacheBlobTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CacheBlobTargetList contains a list of CacheBlobTargets
type CacheBlobTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CacheBlobTarget `json:"items"`
}

// Repository type metadata.
var (
	CacheBlobTarget_Kind             = "CacheBlobTarget"
	CacheBlobTarget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CacheBlobTarget_Kind}.String()
	CacheBlobTarget_KindAPIVersion   = CacheBlobTarget_Kind + "." + CRDGroupVersion.String()
	CacheBlobTarget_GroupVersionKind = CRDGroupVersion.WithKind(CacheBlobTarget_Kind)
)

func init() {
	SchemeBuilder.Register(&CacheBlobTarget{}, &CacheBlobTargetList{})
}
