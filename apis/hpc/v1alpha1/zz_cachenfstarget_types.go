/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CacheNfsTargetObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CacheNfsTargetParameters struct {

	// +kubebuilder:validation:Required
	CacheName *string `json:"cacheName" tf:"cache_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceJunction []NamespaceJunctionParameters `json:"namespaceJunction" tf:"namespace_junction,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TargetHostName *string `json:"targetHostName" tf:"target_host_name,omitempty"`

	// +kubebuilder:validation:Required
	UsageModel *string `json:"usageModel" tf:"usage_model,omitempty"`
}

type NamespaceJunctionObservation struct {
}

type NamespaceJunctionParameters struct {

	// +kubebuilder:validation:Optional
	AccessPolicyName *string `json:"accessPolicyName,omitempty" tf:"access_policy_name,omitempty"`

	// +kubebuilder:validation:Required
	NamespacePath *string `json:"namespacePath" tf:"namespace_path,omitempty"`

	// +kubebuilder:validation:Required
	NfsExport *string `json:"nfsExport" tf:"nfs_export,omitempty"`

	// +kubebuilder:validation:Optional
	TargetPath *string `json:"targetPath,omitempty" tf:"target_path,omitempty"`
}

// CacheNfsTargetSpec defines the desired state of CacheNfsTarget
type CacheNfsTargetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CacheNfsTargetParameters `json:"forProvider"`
}

// CacheNfsTargetStatus defines the observed state of CacheNfsTarget.
type CacheNfsTargetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CacheNfsTargetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CacheNfsTarget is the Schema for the CacheNfsTargets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CacheNfsTarget struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CacheNfsTargetSpec   `json:"spec"`
	Status            CacheNfsTargetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CacheNfsTargetList contains a list of CacheNfsTargets
type CacheNfsTargetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CacheNfsTarget `json:"items"`
}

// Repository type metadata.
var (
	CacheNfsTarget_Kind             = "CacheNfsTarget"
	CacheNfsTarget_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CacheNfsTarget_Kind}.String()
	CacheNfsTarget_KindAPIVersion   = CacheNfsTarget_Kind + "." + CRDGroupVersion.String()
	CacheNfsTarget_GroupVersionKind = CRDGroupVersion.WithKind(CacheNfsTarget_Kind)
)

func init() {
	SchemeBuilder.Register(&CacheNfsTarget{}, &CacheNfsTargetList{})
}
