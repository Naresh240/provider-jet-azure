/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type QuotaObservation struct {
}

type QuotaParameters struct {

	// +kubebuilder:validation:Optional
	CPU *string `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	Memory *string `json:"memory,omitempty" tf:"memory,omitempty"`
}

type SpringCloudJavaDeploymentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SpringCloudJavaDeploymentParameters struct {

	// +kubebuilder:validation:Optional
	CPU *float64 `json:"cpu,omitempty" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Optional
	EnvironmentVariables map[string]*string `json:"environmentVariables,omitempty" tf:"environment_variables,omitempty"`

	// +kubebuilder:validation:Optional
	InstanceCount *float64 `json:"instanceCount,omitempty" tf:"instance_count,omitempty"`

	// +kubebuilder:validation:Optional
	JvmOptions *string `json:"jvmOptions,omitempty" tf:"jvm_options,omitempty"`

	// +kubebuilder:validation:Optional
	MemoryInGb *float64 `json:"memoryInGb,omitempty" tf:"memory_in_gb,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Quota []QuotaParameters `json:"quota,omitempty" tf:"quota,omitempty"`

	// +kubebuilder:validation:Optional
	RuntimeVersion *string `json:"runtimeVersion,omitempty" tf:"runtime_version,omitempty"`

	// +kubebuilder:validation:Required
	SpringCloudAppID *string `json:"springCloudAppId" tf:"spring_cloud_app_id,omitempty"`
}

// SpringCloudJavaDeploymentSpec defines the desired state of SpringCloudJavaDeployment
type SpringCloudJavaDeploymentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpringCloudJavaDeploymentParameters `json:"forProvider"`
}

// SpringCloudJavaDeploymentStatus defines the observed state of SpringCloudJavaDeployment.
type SpringCloudJavaDeploymentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpringCloudJavaDeploymentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudJavaDeployment is the Schema for the SpringCloudJavaDeployments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SpringCloudJavaDeployment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudJavaDeploymentSpec   `json:"spec"`
	Status            SpringCloudJavaDeploymentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudJavaDeploymentList contains a list of SpringCloudJavaDeployments
type SpringCloudJavaDeploymentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudJavaDeployment `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudJavaDeployment_Kind             = "SpringCloudJavaDeployment"
	SpringCloudJavaDeployment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SpringCloudJavaDeployment_Kind}.String()
	SpringCloudJavaDeployment_KindAPIVersion   = SpringCloudJavaDeployment_Kind + "." + CRDGroupVersion.String()
	SpringCloudJavaDeployment_GroupVersionKind = CRDGroupVersion.WithKind(SpringCloudJavaDeployment_Kind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudJavaDeployment{}, &SpringCloudJavaDeploymentList{})
}
