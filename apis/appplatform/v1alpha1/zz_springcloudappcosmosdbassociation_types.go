/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SpringCloudAppCosmosDBAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SpringCloudAppCosmosDBAssociationParameters struct {

	// +kubebuilder:validation:Required
	APIType *string `json:"apiType" tf:"api_type,omitempty"`

	// +kubebuilder:validation:Required
	CosmosDBAccessKey *string `json:"cosmosdbAccessKey" tf:"cosmosdb_access_key,omitempty"`

	// +kubebuilder:validation:Required
	CosmosDBAccountID *string `json:"cosmosdbAccountId" tf:"cosmosdb_account_id,omitempty"`

	// +kubebuilder:validation:Optional
	CosmosDBCassandraKeySpaceName *string `json:"cosmosdbCassandraKeyspaceName,omitempty" tf:"cosmosdb_cassandra_keyspace_name,omitempty"`

	// +kubebuilder:validation:Optional
	CosmosDBGremlinDatabaseName *string `json:"cosmosdbGremlinDatabaseName,omitempty" tf:"cosmosdb_gremlin_database_name,omitempty"`

	// +kubebuilder:validation:Optional
	CosmosDBGremlinGraphName *string `json:"cosmosdbGremlinGraphName,omitempty" tf:"cosmosdb_gremlin_graph_name,omitempty"`

	// +kubebuilder:validation:Optional
	CosmosDBMongoDatabaseName *string `json:"cosmosdbMongoDatabaseName,omitempty" tf:"cosmosdb_mongo_database_name,omitempty"`

	// +kubebuilder:validation:Optional
	CosmosDBSQLDatabaseName *string `json:"cosmosdbSqlDatabaseName,omitempty" tf:"cosmosdb_sql_database_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SpringCloudAppID *string `json:"springCloudAppId" tf:"spring_cloud_app_id,omitempty"`
}

// SpringCloudAppCosmosDBAssociationSpec defines the desired state of SpringCloudAppCosmosDBAssociation
type SpringCloudAppCosmosDBAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SpringCloudAppCosmosDBAssociationParameters `json:"forProvider"`
}

// SpringCloudAppCosmosDBAssociationStatus defines the observed state of SpringCloudAppCosmosDBAssociation.
type SpringCloudAppCosmosDBAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SpringCloudAppCosmosDBAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudAppCosmosDBAssociation is the Schema for the SpringCloudAppCosmosDBAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SpringCloudAppCosmosDBAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SpringCloudAppCosmosDBAssociationSpec   `json:"spec"`
	Status            SpringCloudAppCosmosDBAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SpringCloudAppCosmosDBAssociationList contains a list of SpringCloudAppCosmosDBAssociations
type SpringCloudAppCosmosDBAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SpringCloudAppCosmosDBAssociation `json:"items"`
}

// Repository type metadata.
var (
	SpringCloudAppCosmosDBAssociation_Kind             = "SpringCloudAppCosmosDBAssociation"
	SpringCloudAppCosmosDBAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SpringCloudAppCosmosDBAssociation_Kind}.String()
	SpringCloudAppCosmosDBAssociation_KindAPIVersion   = SpringCloudAppCosmosDBAssociation_Kind + "." + CRDGroupVersion.String()
	SpringCloudAppCosmosDBAssociation_GroupVersionKind = CRDGroupVersion.WithKind(SpringCloudAppCosmosDBAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&SpringCloudAppCosmosDBAssociation{}, &SpringCloudAppCosmosDBAssociationList{})
}
