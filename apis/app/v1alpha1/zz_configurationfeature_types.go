/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigurationFeatureObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ConfigurationFeatureParameters struct {

	// +kubebuilder:validation:Required
	ConfigurationStoreID *string `json:"configurationStoreId" tf:"configuration_store_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// +kubebuilder:validation:Optional
	Label *string `json:"label,omitempty" tf:"label,omitempty"`

	// +kubebuilder:validation:Optional
	Locked *bool `json:"locked,omitempty" tf:"locked,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PercentageFilterValue *float64 `json:"percentageFilterValue,omitempty" tf:"percentage_filter_value,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TargetingFilter []TargetingFilterParameters `json:"targetingFilter,omitempty" tf:"targeting_filter,omitempty"`

	// +kubebuilder:validation:Optional
	TimewindowFilter []TimewindowFilterParameters `json:"timewindowFilter,omitempty" tf:"timewindow_filter,omitempty"`
}

type GroupsObservation struct {
}

type GroupsParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RolloutPercentage *float64 `json:"rolloutPercentage" tf:"rollout_percentage,omitempty"`
}

type TargetingFilterObservation struct {
}

type TargetingFilterParameters struct {

	// +kubebuilder:validation:Required
	DefaultRolloutPercentage *float64 `json:"defaultRolloutPercentage" tf:"default_rollout_percentage,omitempty"`

	// +kubebuilder:validation:Optional
	Groups []GroupsParameters `json:"groups,omitempty" tf:"groups,omitempty"`

	// +kubebuilder:validation:Optional
	Users []*string `json:"users,omitempty" tf:"users,omitempty"`
}

type TimewindowFilterObservation struct {
}

type TimewindowFilterParameters struct {

	// +kubebuilder:validation:Optional
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	// +kubebuilder:validation:Optional
	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

// ConfigurationFeatureSpec defines the desired state of ConfigurationFeature
type ConfigurationFeatureSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ConfigurationFeatureParameters `json:"forProvider"`
}

// ConfigurationFeatureStatus defines the observed state of ConfigurationFeature.
type ConfigurationFeatureStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ConfigurationFeatureObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationFeature is the Schema for the ConfigurationFeatures API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ConfigurationFeature struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ConfigurationFeatureSpec   `json:"spec"`
	Status            ConfigurationFeatureStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ConfigurationFeatureList contains a list of ConfigurationFeatures
type ConfigurationFeatureList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ConfigurationFeature `json:"items"`
}

// Repository type metadata.
var (
	ConfigurationFeature_Kind             = "ConfigurationFeature"
	ConfigurationFeature_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ConfigurationFeature_Kind}.String()
	ConfigurationFeature_KindAPIVersion   = ConfigurationFeature_Kind + "." + CRDGroupVersion.String()
	ConfigurationFeature_GroupVersionKind = CRDGroupVersion.WithKind(ConfigurationFeature_Kind)
)

func init() {
	SchemeBuilder.Register(&ConfigurationFeature{}, &ConfigurationFeatureList{})
}
