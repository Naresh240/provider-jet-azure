/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceActiveSlotObservation struct {
}

type ServiceActiveSlotParameters struct {

	// +kubebuilder:validation:Required
	AppServiceName *string `json:"appServiceName" tf:"app_service_name,omitempty"`

	// +kubebuilder:validation:Required
	AppServiceSlotName *string `json:"appServiceSlotName" tf:"app_service_slot_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// ServiceActiveSlotSpec defines the desired state of ServiceActiveSlot
type ServiceActiveSlotSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceActiveSlotParameters `json:"forProvider"`
}

// ServiceActiveSlotStatus defines the observed state of ServiceActiveSlot.
type ServiceActiveSlotStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceActiveSlotObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceActiveSlot is the Schema for the ServiceActiveSlots API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceActiveSlot struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceActiveSlotSpec   `json:"spec"`
	Status            ServiceActiveSlotStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceActiveSlotList contains a list of ServiceActiveSlots
type ServiceActiveSlotList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceActiveSlot `json:"items"`
}

// Repository type metadata.
var (
	ServiceActiveSlot_Kind             = "ServiceActiveSlot"
	ServiceActiveSlot_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceActiveSlot_Kind}.String()
	ServiceActiveSlot_KindAPIVersion   = ServiceActiveSlot_Kind + "." + CRDGroupVersion.String()
	ServiceActiveSlot_GroupVersionKind = CRDGroupVersion.WithKind(ServiceActiveSlot_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceActiveSlot{}, &ServiceActiveSlotList{})
}
