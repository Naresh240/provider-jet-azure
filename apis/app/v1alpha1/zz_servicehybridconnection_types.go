/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceHybridConnectionObservation struct {
	NamespaceName *string `json:"namespaceName,omitempty" tf:"namespace_name,omitempty"`

	RelayName *string `json:"relayName,omitempty" tf:"relay_name,omitempty"`

	ServiceBusNamespace *string `json:"serviceBusNamespace,omitempty" tf:"service_bus_namespace,omitempty"`

	ServiceBusSuffix *string `json:"serviceBusSuffix,omitempty" tf:"service_bus_suffix,omitempty"`
}

type ServiceHybridConnectionParameters struct {

	// +kubebuilder:validation:Required
	AppServiceName *string `json:"appServiceName" tf:"app_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Hostname *string `json:"hostname" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Required
	Port *int64 `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	RelayID *string `json:"relayId" tf:"relay_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SendKeyName *string `json:"sendKeyName,omitempty" tf:"send_key_name,omitempty"`
}

// ServiceHybridConnectionSpec defines the desired state of ServiceHybridConnection
type ServiceHybridConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceHybridConnectionParameters `json:"forProvider"`
}

// ServiceHybridConnectionStatus defines the observed state of ServiceHybridConnection.
type ServiceHybridConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceHybridConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceHybridConnection is the Schema for the ServiceHybridConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceHybridConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceHybridConnectionSpec   `json:"spec"`
	Status            ServiceHybridConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceHybridConnectionList contains a list of ServiceHybridConnections
type ServiceHybridConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceHybridConnection `json:"items"`
}

// Repository type metadata.
var (
	ServiceHybridConnection_Kind             = "ServiceHybridConnection"
	ServiceHybridConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceHybridConnection_Kind}.String()
	ServiceHybridConnection_KindAPIVersion   = ServiceHybridConnection_Kind + "." + CRDGroupVersion.String()
	ServiceHybridConnection_GroupVersionKind = CRDGroupVersion.WithKind(ServiceHybridConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceHybridConnection{}, &ServiceHybridConnectionList{})
}
