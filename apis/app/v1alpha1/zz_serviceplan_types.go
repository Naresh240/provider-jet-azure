/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServicePlanObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MaximumNumberOfWorkers *int64 `json:"maximumNumberOfWorkers,omitempty" tf:"maximum_number_of_workers,omitempty"`
}

type ServicePlanParameters struct {

	// +kubebuilder:validation:Optional
	AppServiceEnvironmentID *string `json:"appServiceEnvironmentId,omitempty" tf:"app_service_environment_id,omitempty"`

	// +kubebuilder:validation:Optional
	IsXenon *bool `json:"isXenon,omitempty" tf:"is_xenon,omitempty"`

	// +kubebuilder:validation:Optional
	Kind *string `json:"kind,omitempty" tf:"kind,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	MaximumElasticWorkerCount *int64 `json:"maximumElasticWorkerCount,omitempty" tf:"maximum_elastic_worker_count,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PerSiteScaling *bool `json:"perSiteScaling,omitempty" tf:"per_site_scaling,omitempty"`

	// +kubebuilder:validation:Optional
	Reserved *bool `json:"reserved,omitempty" tf:"reserved,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	Sku []SkuParameters `json:"sku" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ZoneRedundant *bool `json:"zoneRedundant,omitempty" tf:"zone_redundant,omitempty"`
}

type SkuObservation struct {
}

type SkuParameters struct {

	// +kubebuilder:validation:Optional
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	// +kubebuilder:validation:Required
	Size *string `json:"size" tf:"size,omitempty"`

	// +kubebuilder:validation:Required
	Tier *string `json:"tier" tf:"tier,omitempty"`
}

// ServicePlanSpec defines the desired state of ServicePlan
type ServicePlanSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServicePlanParameters `json:"forProvider"`
}

// ServicePlanStatus defines the observed state of ServicePlan.
type ServicePlanStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServicePlanObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePlan is the Schema for the ServicePlans API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServicePlan struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServicePlanSpec   `json:"spec"`
	Status            ServicePlanStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServicePlanList contains a list of ServicePlans
type ServicePlanList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServicePlan `json:"items"`
}

// Repository type metadata.
var (
	ServicePlan_Kind             = "ServicePlan"
	ServicePlan_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServicePlan_Kind}.String()
	ServicePlan_KindAPIVersion   = ServicePlan_Kind + "." + CRDGroupVersion.String()
	ServicePlan_GroupVersionKind = CRDGroupVersion.WithKind(ServicePlan_Kind)
)

func init() {
	SchemeBuilder.Register(&ServicePlan{}, &ServicePlanList{})
}
