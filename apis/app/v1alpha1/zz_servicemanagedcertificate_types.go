/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceManagedCertificateObservation struct {
	CanonicalName *string `json:"canonicalName,omitempty" tf:"canonical_name,omitempty"`

	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	FriendlyName *string `json:"friendlyName,omitempty" tf:"friendly_name,omitempty"`

	HostNames []*string `json:"hostNames,omitempty" tf:"host_names,omitempty"`

	IssueDate *string `json:"issueDate,omitempty" tf:"issue_date,omitempty"`

	Issuer *string `json:"issuer,omitempty" tf:"issuer,omitempty"`

	SubjectName *string `json:"subjectName,omitempty" tf:"subject_name,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type ServiceManagedCertificateParameters struct {

	// +kubebuilder:validation:Required
	CustomHostnameBindingID *string `json:"customHostnameBindingId" tf:"custom_hostname_binding_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ServiceManagedCertificateSpec defines the desired state of ServiceManagedCertificate
type ServiceManagedCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceManagedCertificateParameters `json:"forProvider"`
}

// ServiceManagedCertificateStatus defines the observed state of ServiceManagedCertificate.
type ServiceManagedCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceManagedCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceManagedCertificate is the Schema for the ServiceManagedCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceManagedCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceManagedCertificateSpec   `json:"spec"`
	Status            ServiceManagedCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceManagedCertificateList contains a list of ServiceManagedCertificates
type ServiceManagedCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceManagedCertificate `json:"items"`
}

// Repository type metadata.
var (
	ServiceManagedCertificate_Kind             = "ServiceManagedCertificate"
	ServiceManagedCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceManagedCertificate_Kind}.String()
	ServiceManagedCertificate_KindAPIVersion   = ServiceManagedCertificate_Kind + "." + CRDGroupVersion.String()
	ServiceManagedCertificate_GroupVersionKind = CRDGroupVersion.WithKind(ServiceManagedCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceManagedCertificate{}, &ServiceManagedCertificateList{})
}
