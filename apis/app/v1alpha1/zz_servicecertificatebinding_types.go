/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceCertificateBindingObservation struct {
	AppServiceName *string `json:"appServiceName,omitempty" tf:"app_service_name,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	Thumbprint *string `json:"thumbprint,omitempty" tf:"thumbprint,omitempty"`
}

type ServiceCertificateBindingParameters struct {

	// +kubebuilder:validation:Required
	CertificateID *string `json:"certificateId" tf:"certificate_id,omitempty"`

	// +kubebuilder:validation:Required
	HostnameBindingID *string `json:"hostnameBindingId" tf:"hostname_binding_id,omitempty"`

	// +kubebuilder:validation:Required
	SslState *string `json:"sslState" tf:"ssl_state,omitempty"`
}

// ServiceCertificateBindingSpec defines the desired state of ServiceCertificateBinding
type ServiceCertificateBindingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceCertificateBindingParameters `json:"forProvider"`
}

// ServiceCertificateBindingStatus defines the observed state of ServiceCertificateBinding.
type ServiceCertificateBindingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceCertificateBindingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceCertificateBinding is the Schema for the ServiceCertificateBindings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceCertificateBinding struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceCertificateBindingSpec   `json:"spec"`
	Status            ServiceCertificateBindingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceCertificateBindingList contains a list of ServiceCertificateBindings
type ServiceCertificateBindingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceCertificateBinding `json:"items"`
}

// Repository type metadata.
var (
	ServiceCertificateBinding_Kind             = "ServiceCertificateBinding"
	ServiceCertificateBinding_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceCertificateBinding_Kind}.String()
	ServiceCertificateBinding_KindAPIVersion   = ServiceCertificateBinding_Kind + "." + CRDGroupVersion.String()
	ServiceCertificateBinding_GroupVersionKind = CRDGroupVersion.WithKind(ServiceCertificateBinding_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceCertificateBinding{}, &ServiceCertificateBindingList{})
}
