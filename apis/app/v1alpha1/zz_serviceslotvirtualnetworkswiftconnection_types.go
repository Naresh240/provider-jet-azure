/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSlotVirtualNetworkSwiftConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceSlotVirtualNetworkSwiftConnectionParameters struct {

	// +kubebuilder:validation:Required
	AppServiceID *string `json:"appServiceId" tf:"app_service_id,omitempty"`

	// +kubebuilder:validation:Required
	SlotName *string `json:"slotName" tf:"slot_name,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// ServiceSlotVirtualNetworkSwiftConnectionSpec defines the desired state of ServiceSlotVirtualNetworkSwiftConnection
type ServiceSlotVirtualNetworkSwiftConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSlotVirtualNetworkSwiftConnectionParameters `json:"forProvider"`
}

// ServiceSlotVirtualNetworkSwiftConnectionStatus defines the observed state of ServiceSlotVirtualNetworkSwiftConnection.
type ServiceSlotVirtualNetworkSwiftConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSlotVirtualNetworkSwiftConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSlotVirtualNetworkSwiftConnection is the Schema for the ServiceSlotVirtualNetworkSwiftConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceSlotVirtualNetworkSwiftConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSlotVirtualNetworkSwiftConnectionSpec   `json:"spec"`
	Status            ServiceSlotVirtualNetworkSwiftConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSlotVirtualNetworkSwiftConnectionList contains a list of ServiceSlotVirtualNetworkSwiftConnections
type ServiceSlotVirtualNetworkSwiftConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSlotVirtualNetworkSwiftConnection `json:"items"`
}

// Repository type metadata.
var (
	ServiceSlotVirtualNetworkSwiftConnection_Kind             = "ServiceSlotVirtualNetworkSwiftConnection"
	ServiceSlotVirtualNetworkSwiftConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSlotVirtualNetworkSwiftConnection_Kind}.String()
	ServiceSlotVirtualNetworkSwiftConnection_KindAPIVersion   = ServiceSlotVirtualNetworkSwiftConnection_Kind + "." + CRDGroupVersion.String()
	ServiceSlotVirtualNetworkSwiftConnection_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSlotVirtualNetworkSwiftConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSlotVirtualNetworkSwiftConnection{}, &ServiceSlotVirtualNetworkSwiftConnectionList{})
}
