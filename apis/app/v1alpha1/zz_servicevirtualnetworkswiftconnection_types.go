/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceVirtualNetworkSwiftConnectionObservation struct {
}

type ServiceVirtualNetworkSwiftConnectionParameters struct {

	// +kubebuilder:validation:Required
	AppServiceID *string `json:"appServiceId" tf:"app_service_id,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// ServiceVirtualNetworkSwiftConnectionSpec defines the desired state of ServiceVirtualNetworkSwiftConnection
type ServiceVirtualNetworkSwiftConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceVirtualNetworkSwiftConnectionParameters `json:"forProvider"`
}

// ServiceVirtualNetworkSwiftConnectionStatus defines the observed state of ServiceVirtualNetworkSwiftConnection.
type ServiceVirtualNetworkSwiftConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceVirtualNetworkSwiftConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceVirtualNetworkSwiftConnection is the Schema for the ServiceVirtualNetworkSwiftConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceVirtualNetworkSwiftConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceVirtualNetworkSwiftConnectionSpec   `json:"spec"`
	Status            ServiceVirtualNetworkSwiftConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceVirtualNetworkSwiftConnectionList contains a list of ServiceVirtualNetworkSwiftConnections
type ServiceVirtualNetworkSwiftConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceVirtualNetworkSwiftConnection `json:"items"`
}

// Repository type metadata.
var (
	ServiceVirtualNetworkSwiftConnection_Kind             = "ServiceVirtualNetworkSwiftConnection"
	ServiceVirtualNetworkSwiftConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceVirtualNetworkSwiftConnection_Kind}.String()
	ServiceVirtualNetworkSwiftConnection_KindAPIVersion   = ServiceVirtualNetworkSwiftConnection_Kind + "." + CRDGroupVersion.String()
	ServiceVirtualNetworkSwiftConnection_GroupVersionKind = CRDGroupVersion.WithKind(ServiceVirtualNetworkSwiftConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceVirtualNetworkSwiftConnection{}, &ServiceVirtualNetworkSwiftConnectionList{})
}
