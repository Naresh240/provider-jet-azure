/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServiceSourceControlTokenObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ServiceSourceControlTokenParameters struct {

	// +kubebuilder:validation:Required
	TokenSecretRef v1.SecretKeySelector `json:"tokenSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	TokenSecretSecretRef *v1.SecretKeySelector `json:"tokenSecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

// ServiceSourceControlTokenSpec defines the desired state of ServiceSourceControlToken
type ServiceSourceControlTokenSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServiceSourceControlTokenParameters `json:"forProvider"`
}

// ServiceSourceControlTokenStatus defines the observed state of ServiceSourceControlToken.
type ServiceSourceControlTokenStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServiceSourceControlTokenObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSourceControlToken is the Schema for the ServiceSourceControlTokens API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ServiceSourceControlToken struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ServiceSourceControlTokenSpec   `json:"spec"`
	Status            ServiceSourceControlTokenStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServiceSourceControlTokenList contains a list of ServiceSourceControlTokens
type ServiceSourceControlTokenList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ServiceSourceControlToken `json:"items"`
}

// Repository type metadata.
var (
	ServiceSourceControlToken_Kind             = "ServiceSourceControlToken"
	ServiceSourceControlToken_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ServiceSourceControlToken_Kind}.String()
	ServiceSourceControlToken_KindAPIVersion   = ServiceSourceControlToken_Kind + "." + CRDGroupVersion.String()
	ServiceSourceControlToken_GroupVersionKind = CRDGroupVersion.WithKind(ServiceSourceControlToken_Kind)
)

func init() {
	SchemeBuilder.Register(&ServiceSourceControlToken{}, &ServiceSourceControlTokenList{})
}
