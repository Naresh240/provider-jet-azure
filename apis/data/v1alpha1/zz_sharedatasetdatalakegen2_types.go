/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ShareDatasetDataLakeGen2Observation struct {
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`
}

type ShareDatasetDataLakeGen2Parameters struct {

	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemName *string `json:"fileSystemName" tf:"file_system_name,omitempty"`

	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`
}

// ShareDatasetDataLakeGen2Spec defines the desired state of ShareDatasetDataLakeGen2
type ShareDatasetDataLakeGen2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareDatasetDataLakeGen2Parameters `json:"forProvider"`
}

// ShareDatasetDataLakeGen2Status defines the observed state of ShareDatasetDataLakeGen2.
type ShareDatasetDataLakeGen2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareDatasetDataLakeGen2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetDataLakeGen2 is the Schema for the ShareDatasetDataLakeGen2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ShareDatasetDataLakeGen2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareDatasetDataLakeGen2Spec   `json:"spec"`
	Status            ShareDatasetDataLakeGen2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetDataLakeGen2List contains a list of ShareDatasetDataLakeGen2s
type ShareDatasetDataLakeGen2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareDatasetDataLakeGen2 `json:"items"`
}

// Repository type metadata.
var (
	ShareDatasetDataLakeGen2_Kind             = "ShareDatasetDataLakeGen2"
	ShareDatasetDataLakeGen2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareDatasetDataLakeGen2_Kind}.String()
	ShareDatasetDataLakeGen2_KindAPIVersion   = ShareDatasetDataLakeGen2_Kind + "." + CRDGroupVersion.String()
	ShareDatasetDataLakeGen2_GroupVersionKind = CRDGroupVersion.WithKind(ShareDatasetDataLakeGen2_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareDatasetDataLakeGen2{}, &ShareDatasetDataLakeGen2List{})
}
