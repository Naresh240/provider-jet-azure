/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryDatasetJsonAzureBlobStorageLocationObservation struct {
}

type FactoryDatasetJsonAzureBlobStorageLocationParameters struct {

	// +kubebuilder:validation:Required
	Container *string `json:"container" tf:"container,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Filename *string `json:"filename" tf:"filename,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`
}

type FactoryDatasetJsonHTTPServerLocationObservation struct {
}

type FactoryDatasetJsonHTTPServerLocationParameters struct {

	// +kubebuilder:validation:Optional
	DynamicFilenameEnabled *bool `json:"dynamicFilenameEnabled,omitempty" tf:"dynamic_filename_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicPathEnabled *bool `json:"dynamicPathEnabled,omitempty" tf:"dynamic_path_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Filename *string `json:"filename" tf:"filename,omitempty"`

	// +kubebuilder:validation:Required
	Path *string `json:"path" tf:"path,omitempty"`

	// +kubebuilder:validation:Required
	RelativeURL *string `json:"relativeUrl" tf:"relative_url,omitempty"`
}

type FactoryDatasetJsonObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FactoryDatasetJsonParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	AzureBlobStorageLocation []FactoryDatasetJsonAzureBlobStorageLocationParameters `json:"azureBlobStorageLocation,omitempty" tf:"azure_blob_storage_location,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Encoding *string `json:"encoding,omitempty" tf:"encoding,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPServerLocation []FactoryDatasetJsonHTTPServerLocationParameters `json:"httpServerLocation,omitempty" tf:"http_server_location,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []FactoryDatasetJsonSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`
}

type FactoryDatasetJsonSchemaColumnObservation struct {
}

type FactoryDatasetJsonSchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// FactoryDatasetJsonSpec defines the desired state of FactoryDatasetJson
type FactoryDatasetJsonSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryDatasetJsonParameters `json:"forProvider"`
}

// FactoryDatasetJsonStatus defines the observed state of FactoryDatasetJson.
type FactoryDatasetJsonStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryDatasetJsonObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetJson is the Schema for the FactoryDatasetJsons API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryDatasetJson struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryDatasetJsonSpec   `json:"spec"`
	Status            FactoryDatasetJsonStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetJsonList contains a list of FactoryDatasetJsons
type FactoryDatasetJsonList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryDatasetJson `json:"items"`
}

// Repository type metadata.
var (
	FactoryDatasetJson_Kind             = "FactoryDatasetJson"
	FactoryDatasetJson_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryDatasetJson_Kind}.String()
	FactoryDatasetJson_KindAPIVersion   = FactoryDatasetJson_Kind + "." + CRDGroupVersion.String()
	FactoryDatasetJson_GroupVersionKind = CRDGroupVersion.WithKind(FactoryDatasetJson_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryDatasetJson{}, &FactoryDatasetJsonList{})
}
