/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryLinkedServiceCosmosdbObservation struct {
}

type FactoryLinkedServiceCosmosdbParameters struct {

	// +kubebuilder:validation:Optional
	AccountEndpoint *string `json:"accountEndpoint,omitempty" tf:"account_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	AccountKeySecretRef *v1.SecretKeySelector `json:"accountKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	ConnectionStringSecretRef *v1.SecretKeySelector `json:"connectionStringSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Database *string `json:"database,omitempty" tf:"database,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// FactoryLinkedServiceCosmosdbSpec defines the desired state of FactoryLinkedServiceCosmosdb
type FactoryLinkedServiceCosmosdbSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryLinkedServiceCosmosdbParameters `json:"forProvider"`
}

// FactoryLinkedServiceCosmosdbStatus defines the observed state of FactoryLinkedServiceCosmosdb.
type FactoryLinkedServiceCosmosdbStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryLinkedServiceCosmosdbObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryLinkedServiceCosmosdb is the Schema for the FactoryLinkedServiceCosmosdbs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryLinkedServiceCosmosdb struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryLinkedServiceCosmosdbSpec   `json:"spec"`
	Status            FactoryLinkedServiceCosmosdbStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryLinkedServiceCosmosdbList contains a list of FactoryLinkedServiceCosmosdbs
type FactoryLinkedServiceCosmosdbList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryLinkedServiceCosmosdb `json:"items"`
}

// Repository type metadata.
var (
	FactoryLinkedServiceCosmosdb_Kind             = "FactoryLinkedServiceCosmosdb"
	FactoryLinkedServiceCosmosdb_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryLinkedServiceCosmosdb_Kind}.String()
	FactoryLinkedServiceCosmosdb_KindAPIVersion   = FactoryLinkedServiceCosmosdb_Kind + "." + CRDGroupVersion.String()
	FactoryLinkedServiceCosmosdb_GroupVersionKind = CRDGroupVersion.WithKind(FactoryLinkedServiceCosmosdb_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryLinkedServiceCosmosdb{}, &FactoryLinkedServiceCosmosdbList{})
}
