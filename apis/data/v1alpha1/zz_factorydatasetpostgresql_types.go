/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryDatasetPostgresqlObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FactoryDatasetPostgresqlParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []FactoryDatasetPostgresqlSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`

	// +kubebuilder:validation:Optional
	TableName *string `json:"tableName,omitempty" tf:"table_name,omitempty"`
}

type FactoryDatasetPostgresqlSchemaColumnObservation struct {
}

type FactoryDatasetPostgresqlSchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// FactoryDatasetPostgresqlSpec defines the desired state of FactoryDatasetPostgresql
type FactoryDatasetPostgresqlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryDatasetPostgresqlParameters `json:"forProvider"`
}

// FactoryDatasetPostgresqlStatus defines the observed state of FactoryDatasetPostgresql.
type FactoryDatasetPostgresqlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryDatasetPostgresqlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetPostgresql is the Schema for the FactoryDatasetPostgresqls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryDatasetPostgresql struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryDatasetPostgresqlSpec   `json:"spec"`
	Status            FactoryDatasetPostgresqlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetPostgresqlList contains a list of FactoryDatasetPostgresqls
type FactoryDatasetPostgresqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryDatasetPostgresql `json:"items"`
}

// Repository type metadata.
var (
	FactoryDatasetPostgresql_Kind             = "FactoryDatasetPostgresql"
	FactoryDatasetPostgresql_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryDatasetPostgresql_Kind}.String()
	FactoryDatasetPostgresql_KindAPIVersion   = FactoryDatasetPostgresql_Kind + "." + CRDGroupVersion.String()
	FactoryDatasetPostgresql_GroupVersionKind = CRDGroupVersion.WithKind(FactoryDatasetPostgresql_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryDatasetPostgresql{}, &FactoryDatasetPostgresqlList{})
}
