/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LakeStoreIdentityObservation struct {
	PrincipalID *string `json:"principalId,omitempty" tf:"principal_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type LakeStoreIdentityParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type LakeStoreObservation struct {
	Endpoint *string `json:"endpoint,omitempty" tf:"endpoint,omitempty"`
}

type LakeStoreParameters struct {

	// +kubebuilder:validation:Optional
	EncryptionState *string `json:"encryptionState,omitempty" tf:"encryption_state,omitempty"`

	// +kubebuilder:validation:Optional
	EncryptionType *string `json:"encryptionType,omitempty" tf:"encryption_type,omitempty"`

	// +kubebuilder:validation:Optional
	FirewallAllowAzureIps *string `json:"firewallAllowAzureIps,omitempty" tf:"firewall_allow_azure_ips,omitempty"`

	// +kubebuilder:validation:Optional
	FirewallState *string `json:"firewallState,omitempty" tf:"firewall_state,omitempty"`

	// +kubebuilder:validation:Optional
	Identity []LakeStoreIdentityParameters `json:"identity,omitempty" tf:"identity,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Tier *string `json:"tier,omitempty" tf:"tier,omitempty"`
}

// LakeStoreSpec defines the desired state of LakeStore
type LakeStoreSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LakeStoreParameters `json:"forProvider"`
}

// LakeStoreStatus defines the observed state of LakeStore.
type LakeStoreStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LakeStoreObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LakeStore is the Schema for the LakeStores API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type LakeStore struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LakeStoreSpec   `json:"spec"`
	Status            LakeStoreStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LakeStoreList contains a list of LakeStores
type LakeStoreList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LakeStore `json:"items"`
}

// Repository type metadata.
var (
	LakeStore_Kind             = "LakeStore"
	LakeStore_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LakeStore_Kind}.String()
	LakeStore_KindAPIVersion   = LakeStore_Kind + "." + CRDGroupVersion.String()
	LakeStore_GroupVersionKind = CRDGroupVersion.WithKind(LakeStore_Kind)
)

func init() {
	SchemeBuilder.Register(&LakeStore{}, &LakeStoreList{})
}
