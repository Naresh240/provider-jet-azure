/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryDatasetHttpObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type FactoryDatasetHttpParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	RelativeURL *string `json:"relativeUrl,omitempty" tf:"relative_url,omitempty"`

	// +kubebuilder:validation:Optional
	RequestBody *string `json:"requestBody,omitempty" tf:"request_body,omitempty"`

	// +kubebuilder:validation:Optional
	RequestMethod *string `json:"requestMethod,omitempty" tf:"request_method,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []FactoryDatasetHttpSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`
}

type FactoryDatasetHttpSchemaColumnObservation struct {
}

type FactoryDatasetHttpSchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// FactoryDatasetHttpSpec defines the desired state of FactoryDatasetHttp
type FactoryDatasetHttpSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryDatasetHttpParameters `json:"forProvider"`
}

// FactoryDatasetHttpStatus defines the observed state of FactoryDatasetHttp.
type FactoryDatasetHttpStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryDatasetHttpObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetHttp is the Schema for the FactoryDatasetHttps API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryDatasetHttp struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryDatasetHttpSpec   `json:"spec"`
	Status            FactoryDatasetHttpStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetHttpList contains a list of FactoryDatasetHttps
type FactoryDatasetHttpList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryDatasetHttp `json:"items"`
}

// Repository type metadata.
var (
	FactoryDatasetHttp_Kind             = "FactoryDatasetHttp"
	FactoryDatasetHttp_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryDatasetHttp_Kind}.String()
	FactoryDatasetHttp_KindAPIVersion   = FactoryDatasetHttp_Kind + "." + CRDGroupVersion.String()
	FactoryDatasetHttp_GroupVersionKind = CRDGroupVersion.WithKind(FactoryDatasetHttp_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryDatasetHttp{}, &FactoryDatasetHttpList{})
}
