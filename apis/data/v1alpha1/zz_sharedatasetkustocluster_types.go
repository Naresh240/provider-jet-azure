/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ShareDatasetKustoClusterObservation struct {
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KustoClusterLocation *string `json:"kustoClusterLocation,omitempty" tf:"kusto_cluster_location,omitempty"`
}

type ShareDatasetKustoClusterParameters struct {

	// +kubebuilder:validation:Required
	KustoClusterID *string `json:"kustoClusterId" tf:"kusto_cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`
}

// ShareDatasetKustoClusterSpec defines the desired state of ShareDatasetKustoCluster
type ShareDatasetKustoClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareDatasetKustoClusterParameters `json:"forProvider"`
}

// ShareDatasetKustoClusterStatus defines the observed state of ShareDatasetKustoCluster.
type ShareDatasetKustoClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareDatasetKustoClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetKustoCluster is the Schema for the ShareDatasetKustoClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ShareDatasetKustoCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareDatasetKustoClusterSpec   `json:"spec"`
	Status            ShareDatasetKustoClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetKustoClusterList contains a list of ShareDatasetKustoClusters
type ShareDatasetKustoClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareDatasetKustoCluster `json:"items"`
}

// Repository type metadata.
var (
	ShareDatasetKustoCluster_Kind             = "ShareDatasetKustoCluster"
	ShareDatasetKustoCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareDatasetKustoCluster_Kind}.String()
	ShareDatasetKustoCluster_KindAPIVersion   = ShareDatasetKustoCluster_Kind + "." + CRDGroupVersion.String()
	ShareDatasetKustoCluster_GroupVersionKind = CRDGroupVersion.WithKind(ShareDatasetKustoCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareDatasetKustoCluster{}, &ShareDatasetKustoClusterList{})
}
