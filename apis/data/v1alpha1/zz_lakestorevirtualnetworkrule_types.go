/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LakeStoreVirtualNetworkRuleObservation struct {
}

type LakeStoreVirtualNetworkRuleParameters struct {

	// +kubebuilder:validation:Required
	AccountName *string `json:"accountName" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// LakeStoreVirtualNetworkRuleSpec defines the desired state of LakeStoreVirtualNetworkRule
type LakeStoreVirtualNetworkRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LakeStoreVirtualNetworkRuleParameters `json:"forProvider"`
}

// LakeStoreVirtualNetworkRuleStatus defines the observed state of LakeStoreVirtualNetworkRule.
type LakeStoreVirtualNetworkRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LakeStoreVirtualNetworkRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LakeStoreVirtualNetworkRule is the Schema for the LakeStoreVirtualNetworkRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type LakeStoreVirtualNetworkRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LakeStoreVirtualNetworkRuleSpec   `json:"spec"`
	Status            LakeStoreVirtualNetworkRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LakeStoreVirtualNetworkRuleList contains a list of LakeStoreVirtualNetworkRules
type LakeStoreVirtualNetworkRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LakeStoreVirtualNetworkRule `json:"items"`
}

// Repository type metadata.
var (
	LakeStoreVirtualNetworkRule_Kind             = "LakeStoreVirtualNetworkRule"
	LakeStoreVirtualNetworkRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LakeStoreVirtualNetworkRule_Kind}.String()
	LakeStoreVirtualNetworkRule_KindAPIVersion   = LakeStoreVirtualNetworkRule_Kind + "." + CRDGroupVersion.String()
	LakeStoreVirtualNetworkRule_GroupVersionKind = CRDGroupVersion.WithKind(LakeStoreVirtualNetworkRule_Kind)
)

func init() {
	SchemeBuilder.Register(&LakeStoreVirtualNetworkRule{}, &LakeStoreVirtualNetworkRuleList{})
}
