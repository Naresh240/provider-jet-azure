/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ShareDatasetKustoDatabaseObservation struct {
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	KustoClusterLocation *string `json:"kustoClusterLocation,omitempty" tf:"kusto_cluster_location,omitempty"`
}

type ShareDatasetKustoDatabaseParameters struct {

	// +kubebuilder:validation:Required
	KustoDatabaseID *string `json:"kustoDatabaseId" tf:"kusto_database_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`
}

// ShareDatasetKustoDatabaseSpec defines the desired state of ShareDatasetKustoDatabase
type ShareDatasetKustoDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ShareDatasetKustoDatabaseParameters `json:"forProvider"`
}

// ShareDatasetKustoDatabaseStatus defines the observed state of ShareDatasetKustoDatabase.
type ShareDatasetKustoDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ShareDatasetKustoDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetKustoDatabase is the Schema for the ShareDatasetKustoDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ShareDatasetKustoDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ShareDatasetKustoDatabaseSpec   `json:"spec"`
	Status            ShareDatasetKustoDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ShareDatasetKustoDatabaseList contains a list of ShareDatasetKustoDatabases
type ShareDatasetKustoDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ShareDatasetKustoDatabase `json:"items"`
}

// Repository type metadata.
var (
	ShareDatasetKustoDatabase_Kind             = "ShareDatasetKustoDatabase"
	ShareDatasetKustoDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ShareDatasetKustoDatabase_Kind}.String()
	ShareDatasetKustoDatabase_KindAPIVersion   = ShareDatasetKustoDatabase_Kind + "." + CRDGroupVersion.String()
	ShareDatasetKustoDatabase_GroupVersionKind = CRDGroupVersion.WithKind(ShareDatasetKustoDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&ShareDatasetKustoDatabase{}, &ShareDatasetKustoDatabaseList{})
}
