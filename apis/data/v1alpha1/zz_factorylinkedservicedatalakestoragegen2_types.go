/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryLinkedServiceDataLakeStorageGen2Observation struct {
}

type FactoryLinkedServiceDataLakeStorageGen2Parameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IntegrationRuntimeName *string `json:"integrationRuntimeName,omitempty" tf:"integration_runtime_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServicePrincipalID *string `json:"servicePrincipalId,omitempty" tf:"service_principal_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServicePrincipalKey *string `json:"servicePrincipalKey,omitempty" tf:"service_principal_key,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountKey *string `json:"storageAccountKey,omitempty" tf:"storage_account_key,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`

	// +kubebuilder:validation:Optional
	UseManagedIdentity *bool `json:"useManagedIdentity,omitempty" tf:"use_managed_identity,omitempty"`
}

// FactoryLinkedServiceDataLakeStorageGen2Spec defines the desired state of FactoryLinkedServiceDataLakeStorageGen2
type FactoryLinkedServiceDataLakeStorageGen2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryLinkedServiceDataLakeStorageGen2Parameters `json:"forProvider"`
}

// FactoryLinkedServiceDataLakeStorageGen2Status defines the observed state of FactoryLinkedServiceDataLakeStorageGen2.
type FactoryLinkedServiceDataLakeStorageGen2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryLinkedServiceDataLakeStorageGen2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryLinkedServiceDataLakeStorageGen2 is the Schema for the FactoryLinkedServiceDataLakeStorageGen2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryLinkedServiceDataLakeStorageGen2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryLinkedServiceDataLakeStorageGen2Spec   `json:"spec"`
	Status            FactoryLinkedServiceDataLakeStorageGen2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryLinkedServiceDataLakeStorageGen2List contains a list of FactoryLinkedServiceDataLakeStorageGen2s
type FactoryLinkedServiceDataLakeStorageGen2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryLinkedServiceDataLakeStorageGen2 `json:"items"`
}

// Repository type metadata.
var (
	FactoryLinkedServiceDataLakeStorageGen2_Kind             = "FactoryLinkedServiceDataLakeStorageGen2"
	FactoryLinkedServiceDataLakeStorageGen2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryLinkedServiceDataLakeStorageGen2_Kind}.String()
	FactoryLinkedServiceDataLakeStorageGen2_KindAPIVersion   = FactoryLinkedServiceDataLakeStorageGen2_Kind + "." + CRDGroupVersion.String()
	FactoryLinkedServiceDataLakeStorageGen2_GroupVersionKind = CRDGroupVersion.WithKind(FactoryLinkedServiceDataLakeStorageGen2_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryLinkedServiceDataLakeStorageGen2{}, &FactoryLinkedServiceDataLakeStorageGen2List{})
}
