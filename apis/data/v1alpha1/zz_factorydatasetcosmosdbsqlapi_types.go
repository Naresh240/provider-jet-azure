/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FactoryDatasetCosmosdbSqlapiObservation struct {
}

type FactoryDatasetCosmosdbSqlapiParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalProperties map[string]*string `json:"additionalProperties,omitempty" tf:"additional_properties,omitempty"`

	// +kubebuilder:validation:Optional
	Annotations []*string `json:"annotations,omitempty" tf:"annotations,omitempty"`

	// +kubebuilder:validation:Optional
	CollectionName *string `json:"collectionName,omitempty" tf:"collection_name,omitempty"`

	// +kubebuilder:validation:Required
	DataFactoryName *string `json:"dataFactoryName" tf:"data_factory_name,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Required
	LinkedServiceName *string `json:"linkedServiceName" tf:"linked_service_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SchemaColumn []FactoryDatasetCosmosdbSqlapiSchemaColumnParameters `json:"schemaColumn,omitempty" tf:"schema_column,omitempty"`
}

type FactoryDatasetCosmosdbSqlapiSchemaColumnObservation struct {
}

type FactoryDatasetCosmosdbSqlapiSchemaColumnParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// FactoryDatasetCosmosdbSqlapiSpec defines the desired state of FactoryDatasetCosmosdbSqlapi
type FactoryDatasetCosmosdbSqlapiSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FactoryDatasetCosmosdbSqlapiParameters `json:"forProvider"`
}

// FactoryDatasetCosmosdbSqlapiStatus defines the observed state of FactoryDatasetCosmosdbSqlapi.
type FactoryDatasetCosmosdbSqlapiStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FactoryDatasetCosmosdbSqlapiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetCosmosdbSqlapi is the Schema for the FactoryDatasetCosmosdbSqlapis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FactoryDatasetCosmosdbSqlapi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FactoryDatasetCosmosdbSqlapiSpec   `json:"spec"`
	Status            FactoryDatasetCosmosdbSqlapiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FactoryDatasetCosmosdbSqlapiList contains a list of FactoryDatasetCosmosdbSqlapis
type FactoryDatasetCosmosdbSqlapiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FactoryDatasetCosmosdbSqlapi `json:"items"`
}

// Repository type metadata.
var (
	FactoryDatasetCosmosdbSqlapi_Kind             = "FactoryDatasetCosmosdbSqlapi"
	FactoryDatasetCosmosdbSqlapi_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FactoryDatasetCosmosdbSqlapi_Kind}.String()
	FactoryDatasetCosmosdbSqlapi_KindAPIVersion   = FactoryDatasetCosmosdbSqlapi_Kind + "." + CRDGroupVersion.String()
	FactoryDatasetCosmosdbSqlapi_GroupVersionKind = CRDGroupVersion.WithKind(FactoryDatasetCosmosdbSqlapi_Kind)
)

func init() {
	SchemeBuilder.Register(&FactoryDatasetCosmosdbSqlapi{}, &FactoryDatasetCosmosdbSqlapiList{})
}
