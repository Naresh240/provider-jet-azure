/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectionBackupPolicyPostgresqlObservation struct {
}

type ProtectionBackupPolicyPostgresqlParameters struct {

	// +kubebuilder:validation:Required
	BackupRepeatingTimeIntervals []*string `json:"backupRepeatingTimeIntervals" tf:"backup_repeating_time_intervals,omitempty"`

	// +kubebuilder:validation:Required
	DefaultRetentionDuration *string `json:"defaultRetentionDuration" tf:"default_retention_duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionRule []ProtectionBackupPolicyPostgresqlRetentionRuleParameters `json:"retentionRule,omitempty" tf:"retention_rule,omitempty"`

	// +kubebuilder:validation:Required
	VaultName *string `json:"vaultName" tf:"vault_name,omitempty"`
}

type ProtectionBackupPolicyPostgresqlRetentionRuleObservation struct {
}

type ProtectionBackupPolicyPostgresqlRetentionRuleParameters struct {

	// +kubebuilder:validation:Required
	Criteria []RetentionRuleCriteriaParameters `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Required
	Duration *string `json:"duration" tf:"duration,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Priority *int64 `json:"priority" tf:"priority,omitempty"`
}

type RetentionRuleCriteriaObservation struct {
}

type RetentionRuleCriteriaParameters struct {

	// +kubebuilder:validation:Optional
	AbsoluteCriteria *string `json:"absoluteCriteria,omitempty" tf:"absolute_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	DaysOfWeek []*string `json:"daysOfWeek,omitempty" tf:"days_of_week,omitempty"`

	// +kubebuilder:validation:Optional
	MonthsOfYear []*string `json:"monthsOfYear,omitempty" tf:"months_of_year,omitempty"`

	// +kubebuilder:validation:Optional
	ScheduledBackupTimes []*string `json:"scheduledBackupTimes,omitempty" tf:"scheduled_backup_times,omitempty"`

	// +kubebuilder:validation:Optional
	WeeksOfMonth []*string `json:"weeksOfMonth,omitempty" tf:"weeks_of_month,omitempty"`
}

// ProtectionBackupPolicyPostgresqlSpec defines the desired state of ProtectionBackupPolicyPostgresql
type ProtectionBackupPolicyPostgresqlSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectionBackupPolicyPostgresqlParameters `json:"forProvider"`
}

// ProtectionBackupPolicyPostgresqlStatus defines the observed state of ProtectionBackupPolicyPostgresql.
type ProtectionBackupPolicyPostgresqlStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectionBackupPolicyPostgresqlObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionBackupPolicyPostgresql is the Schema for the ProtectionBackupPolicyPostgresqls API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ProtectionBackupPolicyPostgresql struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectionBackupPolicyPostgresqlSpec   `json:"spec"`
	Status            ProtectionBackupPolicyPostgresqlStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectionBackupPolicyPostgresqlList contains a list of ProtectionBackupPolicyPostgresqls
type ProtectionBackupPolicyPostgresqlList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtectionBackupPolicyPostgresql `json:"items"`
}

// Repository type metadata.
var (
	ProtectionBackupPolicyPostgresql_Kind             = "ProtectionBackupPolicyPostgresql"
	ProtectionBackupPolicyPostgresql_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtectionBackupPolicyPostgresql_Kind}.String()
	ProtectionBackupPolicyPostgresql_KindAPIVersion   = ProtectionBackupPolicyPostgresql_Kind + "." + CRDGroupVersion.String()
	ProtectionBackupPolicyPostgresql_GroupVersionKind = CRDGroupVersion.WithKind(ProtectionBackupPolicyPostgresql_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtectionBackupPolicyPostgresql{}, &ProtectionBackupPolicyPostgresqlList{})
}
