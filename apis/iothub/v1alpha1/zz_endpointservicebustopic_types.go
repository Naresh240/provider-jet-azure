/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointServicebusTopicObservation struct {
}

type EndpointServicebusTopicParameters struct {

	// +kubebuilder:validation:Required
	ConnectionStringSecretRef v1.SecretKeySelector `json:"connectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	IothubName *string `json:"iothubName" tf:"iothub_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// EndpointServicebusTopicSpec defines the desired state of EndpointServicebusTopic
type EndpointServicebusTopicSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointServicebusTopicParameters `json:"forProvider"`
}

// EndpointServicebusTopicStatus defines the observed state of EndpointServicebusTopic.
type EndpointServicebusTopicStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointServicebusTopicObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointServicebusTopic is the Schema for the EndpointServicebusTopics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EndpointServicebusTopic struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointServicebusTopicSpec   `json:"spec"`
	Status            EndpointServicebusTopicStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointServicebusTopicList contains a list of EndpointServicebusTopics
type EndpointServicebusTopicList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointServicebusTopic `json:"items"`
}

// Repository type metadata.
var (
	EndpointServicebusTopic_Kind             = "EndpointServicebusTopic"
	EndpointServicebusTopic_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointServicebusTopic_Kind}.String()
	EndpointServicebusTopic_KindAPIVersion   = EndpointServicebusTopic_Kind + "." + CRDGroupVersion.String()
	EndpointServicebusTopic_GroupVersionKind = CRDGroupVersion.WithKind(EndpointServicebusTopic_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointServicebusTopic{}, &EndpointServicebusTopicList{})
}
