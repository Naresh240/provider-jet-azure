/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DPSCertificateObservation struct {
}

type DPSCertificateParameters struct {

	// +kubebuilder:validation:Required
	CertificateContentSecretRef v1.SecretKeySelector `json:"certificateContentSecretRef" tf:"-"`

	// +crossplane:generate:reference:type=DPS
	// +kubebuilder:validation:Optional
	IotDpsName *string `json:"iotDpsName,omitempty" tf:"iot_dps_name,omitempty"`

	// +kubebuilder:validation:Optional
	IotDpsNameRef *v1.Reference `json:"iotDpsNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	IotDpsNameSelector *v1.Selector `json:"iotDpsNameSelector,omitempty" tf:"-"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha1.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`
}

// DPSCertificateSpec defines the desired state of DPSCertificate
type DPSCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DPSCertificateParameters `json:"forProvider"`
}

// DPSCertificateStatus defines the observed state of DPSCertificate.
type DPSCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DPSCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DPSCertificate is the Schema for the DPSCertificates API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DPSCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DPSCertificateSpec   `json:"spec"`
	Status            DPSCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DPSCertificateList contains a list of DPSCertificates
type DPSCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DPSCertificate `json:"items"`
}

// Repository type metadata.
var (
	DPSCertificate_Kind             = "DPSCertificate"
	DPSCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DPSCertificate_Kind}.String()
	DPSCertificate_KindAPIVersion   = DPSCertificate_Kind + "." + CRDGroupVersion.String()
	DPSCertificate_GroupVersionKind = CRDGroupVersion.WithKind(DPSCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&DPSCertificate{}, &DPSCertificateList{})
}
