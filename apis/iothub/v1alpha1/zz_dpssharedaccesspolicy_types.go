/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DpsSharedAccessPolicyObservation struct {
}

type DpsSharedAccessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	EnrollmentRead *bool `json:"enrollmentRead,omitempty" tf:"enrollment_read,omitempty"`

	// +kubebuilder:validation:Optional
	EnrollmentWrite *bool `json:"enrollmentWrite,omitempty" tf:"enrollment_write,omitempty"`

	// +kubebuilder:validation:Required
	IothubDpsName *string `json:"iothubDpsName" tf:"iothub_dps_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RegistrationRead *bool `json:"registrationRead,omitempty" tf:"registration_read,omitempty"`

	// +kubebuilder:validation:Optional
	RegistrationWrite *bool `json:"registrationWrite,omitempty" tf:"registration_write,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceConfig *bool `json:"serviceConfig,omitempty" tf:"service_config,omitempty"`
}

// DpsSharedAccessPolicySpec defines the desired state of DpsSharedAccessPolicy
type DpsSharedAccessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DpsSharedAccessPolicyParameters `json:"forProvider"`
}

// DpsSharedAccessPolicyStatus defines the observed state of DpsSharedAccessPolicy.
type DpsSharedAccessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DpsSharedAccessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DpsSharedAccessPolicy is the Schema for the DpsSharedAccessPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DpsSharedAccessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DpsSharedAccessPolicySpec   `json:"spec"`
	Status            DpsSharedAccessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DpsSharedAccessPolicyList contains a list of DpsSharedAccessPolicys
type DpsSharedAccessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DpsSharedAccessPolicy `json:"items"`
}

// Repository type metadata.
var (
	DpsSharedAccessPolicy_Kind             = "DpsSharedAccessPolicy"
	DpsSharedAccessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DpsSharedAccessPolicy_Kind}.String()
	DpsSharedAccessPolicy_KindAPIVersion   = DpsSharedAccessPolicy_Kind + "." + CRDGroupVersion.String()
	DpsSharedAccessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(DpsSharedAccessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&DpsSharedAccessPolicy{}, &DpsSharedAccessPolicyList{})
}
