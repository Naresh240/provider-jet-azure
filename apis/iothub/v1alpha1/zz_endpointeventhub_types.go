/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EndpointEventhubObservation struct {
}

type EndpointEventhubParameters struct {

	// +kubebuilder:validation:Required
	ConnectionStringSecretRef v1.SecretKeySelector `json:"connectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	IothubName *string `json:"iothubName" tf:"iothub_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// EndpointEventhubSpec defines the desired state of EndpointEventhub
type EndpointEventhubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EndpointEventhubParameters `json:"forProvider"`
}

// EndpointEventhubStatus defines the observed state of EndpointEventhub.
type EndpointEventhubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EndpointEventhubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointEventhub is the Schema for the EndpointEventhubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EndpointEventhub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EndpointEventhubSpec   `json:"spec"`
	Status            EndpointEventhubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EndpointEventhubList contains a list of EndpointEventhubs
type EndpointEventhubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EndpointEventhub `json:"items"`
}

// Repository type metadata.
var (
	EndpointEventhub_Kind             = "EndpointEventhub"
	EndpointEventhub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EndpointEventhub_Kind}.String()
	EndpointEventhub_KindAPIVersion   = EndpointEventhub_Kind + "." + CRDGroupVersion.String()
	EndpointEventhub_GroupVersionKind = CRDGroupVersion.WithKind(EndpointEventhub_Kind)
)

func init() {
	SchemeBuilder.Register(&EndpointEventhub{}, &EndpointEventhubList{})
}
