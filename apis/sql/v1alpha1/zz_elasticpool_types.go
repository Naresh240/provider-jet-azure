/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ElasticpoolObservation struct {
	CreationDate *string `json:"creationDate,omitempty" tf:"creation_date,omitempty"`
}

type ElasticpoolParameters struct {

	// +kubebuilder:validation:Optional
	DBDtuMax *int64 `json:"dbDtuMax,omitempty" tf:"db_dtu_max,omitempty"`

	// +kubebuilder:validation:Optional
	DBDtuMin *int64 `json:"dbDtuMin,omitempty" tf:"db_dtu_min,omitempty"`

	// +kubebuilder:validation:Required
	Dtu *int64 `json:"dtu" tf:"dtu,omitempty"`

	// +kubebuilder:validation:Required
	Edition *string `json:"edition" tf:"edition,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PoolSize *int64 `json:"poolSize,omitempty" tf:"pool_size,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ServerName *string `json:"serverName" tf:"server_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ElasticpoolSpec defines the desired state of Elasticpool
type ElasticpoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ElasticpoolParameters `json:"forProvider"`
}

// ElasticpoolStatus defines the observed state of Elasticpool.
type ElasticpoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ElasticpoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Elasticpool is the Schema for the Elasticpools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Elasticpool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ElasticpoolSpec   `json:"spec"`
	Status            ElasticpoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ElasticpoolList contains a list of Elasticpools
type ElasticpoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Elasticpool `json:"items"`
}

// Repository type metadata.
var (
	Elasticpool_Kind             = "Elasticpool"
	Elasticpool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Elasticpool_Kind}.String()
	Elasticpool_KindAPIVersion   = Elasticpool_Kind + "." + CRDGroupVersion.String()
	Elasticpool_GroupVersionKind = CRDGroupVersion.WithKind(Elasticpool_Kind)
)

func init() {
	SchemeBuilder.Register(&Elasticpool{}, &ElasticpoolList{})
}
