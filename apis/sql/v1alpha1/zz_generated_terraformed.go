/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this MSSQLDatabase
func (mg *MSSQLDatabase) GetTerraformResourceType() string {
	return "azurerm_mssql_database"
}

// GetConnectionDetailsMapping for this MSSQLDatabase
func (tr *MSSQLDatabase) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"threat_detection_policy[*].storage_account_access_key": "spec.forProvider.threatDetectionPolicy[*].storageAccountAccessKeySecretRef"}
}

// GetObservation of this MSSQLDatabase
func (tr *MSSQLDatabase) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLDatabase
func (tr *MSSQLDatabase) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLDatabase
func (tr *MSSQLDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLDatabase
func (tr *MSSQLDatabase) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLDatabase
func (tr *MSSQLDatabase) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLDatabase) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLDatabaseExtendedAuditingPolicy
func (mg *MSSQLDatabaseExtendedAuditingPolicy) GetTerraformResourceType() string {
	return "azurerm_mssql_database_extended_auditing_policy"
}

// GetConnectionDetailsMapping for this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef"}
}

// GetObservation of this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLDatabaseExtendedAuditingPolicy
func (tr *MSSQLDatabaseExtendedAuditingPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLDatabaseExtendedAuditingPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLDatabaseExtendedAuditingPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLDatabaseExtendedAuditingPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLDatabaseExtendedAuditingPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (mg *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetTerraformResourceType() string {
	return "azurerm_mssql_database_vulnerability_assessment_rule_baseline"
}

// GetConnectionDetailsMapping for this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLDatabaseVulnerabilityAssessmentRuleBaseline using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLDatabaseVulnerabilityAssessmentRuleBaselineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLDatabaseVulnerabilityAssessmentRuleBaseline) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLElasticPool
func (mg *MSSQLElasticPool) GetTerraformResourceType() string {
	return "azurerm_mssql_elasticpool"
}

// GetConnectionDetailsMapping for this MSSQLElasticPool
func (tr *MSSQLElasticPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLElasticPool
func (tr *MSSQLElasticPool) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLElasticPool
func (tr *MSSQLElasticPool) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLElasticPool
func (tr *MSSQLElasticPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLElasticPool
func (tr *MSSQLElasticPool) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLElasticPool
func (tr *MSSQLElasticPool) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLElasticPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLElasticPool) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLElasticPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLElasticPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLFailoverGroup
func (mg *MSSQLFailoverGroup) GetTerraformResourceType() string {
	return "azurerm_mssql_failover_group"
}

// GetConnectionDetailsMapping for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLFailoverGroup
func (tr *MSSQLFailoverGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLFailoverGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLFailoverGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLFailoverGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLFailoverGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLFirewallRule
func (mg *MSSQLFirewallRule) GetTerraformResourceType() string {
	return "azurerm_mssql_firewall_rule"
}

// GetConnectionDetailsMapping for this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLFirewallRule
func (tr *MSSQLFirewallRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLFirewallRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLFirewallRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLFirewallRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLFirewallRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLJobAgent
func (mg *MSSQLJobAgent) GetTerraformResourceType() string {
	return "azurerm_mssql_job_agent"
}

// GetConnectionDetailsMapping for this MSSQLJobAgent
func (tr *MSSQLJobAgent) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLJobAgent
func (tr *MSSQLJobAgent) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLJobAgent
func (tr *MSSQLJobAgent) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLJobAgent
func (tr *MSSQLJobAgent) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLJobAgent
func (tr *MSSQLJobAgent) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLJobAgent
func (tr *MSSQLJobAgent) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLJobAgent using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLJobAgent) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLJobAgentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLJobAgent) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLJobCredential
func (mg *MSSQLJobCredential) GetTerraformResourceType() string {
	return "azurerm_mssql_job_credential"
}

// GetConnectionDetailsMapping for this MSSQLJobCredential
func (tr *MSSQLJobCredential) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef"}
}

// GetObservation of this MSSQLJobCredential
func (tr *MSSQLJobCredential) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLJobCredential
func (tr *MSSQLJobCredential) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLJobCredential
func (tr *MSSQLJobCredential) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLJobCredential
func (tr *MSSQLJobCredential) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLJobCredential
func (tr *MSSQLJobCredential) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLJobCredential using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLJobCredential) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLJobCredentialParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLJobCredential) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerSecurityAlertPolicy
func (mg *MSSQLServerSecurityAlertPolicy) GetTerraformResourceType() string {
	return "azurerm_mssql_server_security_alert_policy"
}

// GetConnectionDetailsMapping for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef"}
}

// GetObservation of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerSecurityAlertPolicy
func (tr *MSSQLServerSecurityAlertPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerSecurityAlertPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerSecurityAlertPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerSecurityAlertPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerSecurityAlertPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLServerVulnerabilityAssessment
func (mg *MSSQLServerVulnerabilityAssessment) GetTerraformResourceType() string {
	return "azurerm_mssql_server_vulnerability_assessment"
}

// GetConnectionDetailsMapping for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef", "storage_container_sas_key": "spec.forProvider.storageContainerSasKeySecretRef"}
}

// GetObservation of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLServerVulnerabilityAssessment
func (tr *MSSQLServerVulnerabilityAssessment) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLServerVulnerabilityAssessment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLServerVulnerabilityAssessment) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLServerVulnerabilityAssessmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLServerVulnerabilityAssessment) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MSSQLVirtualNetworkRule
func (mg *MSSQLVirtualNetworkRule) GetTerraformResourceType() string {
	return "azurerm_mssql_virtual_network_rule"
}

// GetConnectionDetailsMapping for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MSSQLVirtualNetworkRule
func (tr *MSSQLVirtualNetworkRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MSSQLVirtualNetworkRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MSSQLVirtualNetworkRule) LateInitialize(attrs []byte) (bool, error) {
	params := &MSSQLVirtualNetworkRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MSSQLVirtualNetworkRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ActiveDirectoryAdministrator
func (mg *ActiveDirectoryAdministrator) GetTerraformResourceType() string {
	return "azurerm_sql_active_directory_administrator"
}

// GetConnectionDetailsMapping for this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ActiveDirectoryAdministrator
func (tr *ActiveDirectoryAdministrator) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ActiveDirectoryAdministrator using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ActiveDirectoryAdministrator) LateInitialize(attrs []byte) (bool, error) {
	params := &ActiveDirectoryAdministratorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ActiveDirectoryAdministrator) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Database
func (mg *Database) GetTerraformResourceType() string {
	return "azurerm_sql_database"
}

// GetConnectionDetailsMapping for this Database
func (tr *Database) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"import[*].administrator_login_password": "spec.forProvider.import[*].administratorLoginPasswordSecretRef", "import[*].storage_key": "spec.forProvider.import[*].storageKeySecretRef", "threat_detection_policy[*].storage_account_access_key": "spec.forProvider.threatDetectionPolicy[*].storageAccountAccessKeySecretRef"}
}

// GetObservation of this Database
func (tr *Database) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Database
func (tr *Database) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Database
func (tr *Database) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Database
func (tr *Database) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Database
func (tr *Database) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Database using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Database) LateInitialize(attrs []byte) (bool, error) {
	params := &DatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Database) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ElasticPool
func (mg *ElasticPool) GetTerraformResourceType() string {
	return "azurerm_sql_elasticpool"
}

// GetConnectionDetailsMapping for this ElasticPool
func (tr *ElasticPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ElasticPool
func (tr *ElasticPool) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ElasticPool
func (tr *ElasticPool) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ElasticPool
func (tr *ElasticPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ElasticPool
func (tr *ElasticPool) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ElasticPool
func (tr *ElasticPool) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ElasticPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ElasticPool) LateInitialize(attrs []byte) (bool, error) {
	params := &ElasticPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ElasticPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallRule
func (mg *FirewallRule) GetTerraformResourceType() string {
	return "azurerm_sql_firewall_rule"
}

// GetConnectionDetailsMapping for this FirewallRule
func (tr *FirewallRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallRule
func (tr *FirewallRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallRule
func (tr *FirewallRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallRule
func (tr *FirewallRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallRule
func (tr *FirewallRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallRule
func (tr *FirewallRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallRule) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ManagedDatabase
func (mg *ManagedDatabase) GetTerraformResourceType() string {
	return "azurerm_sql_managed_database"
}

// GetConnectionDetailsMapping for this ManagedDatabase
func (tr *ManagedDatabase) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ManagedDatabase
func (tr *ManagedDatabase) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ManagedDatabase
func (tr *ManagedDatabase) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ManagedDatabase
func (tr *ManagedDatabase) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ManagedDatabase
func (tr *ManagedDatabase) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ManagedDatabase
func (tr *ManagedDatabase) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ManagedDatabase using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ManagedDatabase) LateInitialize(attrs []byte) (bool, error) {
	params := &ManagedDatabaseParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ManagedDatabase) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ManagedInstance
func (mg *ManagedInstance) GetTerraformResourceType() string {
	return "azurerm_sql_managed_instance"
}

// GetConnectionDetailsMapping for this ManagedInstance
func (tr *ManagedInstance) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"administrator_login_password": "spec.forProvider.administratorLoginPasswordSecretRef"}
}

// GetObservation of this ManagedInstance
func (tr *ManagedInstance) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ManagedInstance
func (tr *ManagedInstance) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ManagedInstance
func (tr *ManagedInstance) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ManagedInstance
func (tr *ManagedInstance) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ManagedInstance
func (tr *ManagedInstance) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ManagedInstance using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ManagedInstance) LateInitialize(attrs []byte) (bool, error) {
	params := &ManagedInstanceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ManagedInstance) GetTerraformSchemaVersion() int {
	return 0
}
