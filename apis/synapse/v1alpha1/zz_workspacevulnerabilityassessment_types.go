/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type WorkspaceVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type WorkspaceVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	RecurringScans []WorkspaceVulnerabilityAssessmentRecurringScansParameters `json:"recurringScans,omitempty" tf:"recurring_scans,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountAccessKeySecretRef *v1.SecretKeySelector `json:"storageAccountAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	StorageContainerPath *string `json:"storageContainerPath" tf:"storage_container_path,omitempty"`

	// +kubebuilder:validation:Optional
	StorageContainerSASKeySecretRef *v1.SecretKeySelector `json:"storageContainerSasKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	WorkspaceSecurityAlertPolicyID *string `json:"workspaceSecurityAlertPolicyId" tf:"workspace_security_alert_policy_id,omitempty"`
}

type WorkspaceVulnerabilityAssessmentRecurringScansObservation struct {
}

type WorkspaceVulnerabilityAssessmentRecurringScansParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubscriptionAdminsEnabled *bool `json:"emailSubscriptionAdminsEnabled,omitempty" tf:"email_subscription_admins_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Emails []*string `json:"emails,omitempty" tf:"emails,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// WorkspaceVulnerabilityAssessmentSpec defines the desired state of WorkspaceVulnerabilityAssessment
type WorkspaceVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     WorkspaceVulnerabilityAssessmentParameters `json:"forProvider"`
}

// WorkspaceVulnerabilityAssessmentStatus defines the observed state of WorkspaceVulnerabilityAssessment.
type WorkspaceVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        WorkspaceVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceVulnerabilityAssessment is the Schema for the WorkspaceVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type WorkspaceVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              WorkspaceVulnerabilityAssessmentSpec   `json:"spec"`
	Status            WorkspaceVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// WorkspaceVulnerabilityAssessmentList contains a list of WorkspaceVulnerabilityAssessments
type WorkspaceVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []WorkspaceVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	WorkspaceVulnerabilityAssessment_Kind             = "WorkspaceVulnerabilityAssessment"
	WorkspaceVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: WorkspaceVulnerabilityAssessment_Kind}.String()
	WorkspaceVulnerabilityAssessment_KindAPIVersion   = WorkspaceVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	WorkspaceVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(WorkspaceVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&WorkspaceVulnerabilityAssessment{}, &WorkspaceVulnerabilityAssessmentList{})
}
