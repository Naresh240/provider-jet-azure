/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagedPrivateEndpointObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagedPrivateEndpointParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	SubresourceName *string `json:"subresourceName" tf:"subresource_name,omitempty"`

	// +kubebuilder:validation:Required
	SynapseWorkspaceID *string `json:"synapseWorkspaceId" tf:"synapse_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetResourceID *string `json:"targetResourceId" tf:"target_resource_id,omitempty"`
}

// ManagedPrivateEndpointSpec defines the desired state of ManagedPrivateEndpoint
type ManagedPrivateEndpointSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagedPrivateEndpointParameters `json:"forProvider"`
}

// ManagedPrivateEndpointStatus defines the observed state of ManagedPrivateEndpoint.
type ManagedPrivateEndpointStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagedPrivateEndpointObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedPrivateEndpoint is the Schema for the ManagedPrivateEndpoints API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagedPrivateEndpoint struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagedPrivateEndpointSpec   `json:"spec"`
	Status            ManagedPrivateEndpointStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagedPrivateEndpointList contains a list of ManagedPrivateEndpoints
type ManagedPrivateEndpointList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagedPrivateEndpoint `json:"items"`
}

// Repository type metadata.
var (
	ManagedPrivateEndpoint_Kind             = "ManagedPrivateEndpoint"
	ManagedPrivateEndpoint_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagedPrivateEndpoint_Kind}.String()
	ManagedPrivateEndpoint_KindAPIVersion   = ManagedPrivateEndpoint_Kind + "." + CRDGroupVersion.String()
	ManagedPrivateEndpoint_GroupVersionKind = CRDGroupVersion.WithKind(ManagedPrivateEndpoint_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagedPrivateEndpoint{}, &ManagedPrivateEndpointList{})
}
