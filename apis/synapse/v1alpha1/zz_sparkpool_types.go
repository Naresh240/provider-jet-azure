/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AutoPauseObservation struct {
}

type AutoPauseParameters struct {

	// +kubebuilder:validation:Required
	DelayInMinutes *float64 `json:"delayInMinutes" tf:"delay_in_minutes,omitempty"`
}

type AutoScaleObservation struct {
}

type AutoScaleParameters struct {

	// +kubebuilder:validation:Required
	MaxNodeCount *float64 `json:"maxNodeCount" tf:"max_node_count,omitempty"`

	// +kubebuilder:validation:Required
	MinNodeCount *float64 `json:"minNodeCount" tf:"min_node_count,omitempty"`
}

type LibraryRequirementObservation struct {
}

type LibraryRequirementParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	Filename *string `json:"filename" tf:"filename,omitempty"`
}

type SparkConfigObservation struct {
}

type SparkConfigParameters struct {

	// +kubebuilder:validation:Required
	Content *string `json:"content" tf:"content,omitempty"`

	// +kubebuilder:validation:Required
	Filename *string `json:"filename" tf:"filename,omitempty"`
}

type SparkPoolObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SparkPoolParameters struct {

	// +kubebuilder:validation:Optional
	AutoPause []AutoPauseParameters `json:"autoPause,omitempty" tf:"auto_pause,omitempty"`

	// +kubebuilder:validation:Optional
	AutoScale []AutoScaleParameters `json:"autoScale,omitempty" tf:"auto_scale,omitempty"`

	// +kubebuilder:validation:Optional
	CacheSize *float64 `json:"cacheSize,omitempty" tf:"cache_size,omitempty"`

	// +kubebuilder:validation:Optional
	ComputeIsolationEnabled *bool `json:"computeIsolationEnabled,omitempty" tf:"compute_isolation_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicExecutorAllocationEnabled *bool `json:"dynamicExecutorAllocationEnabled,omitempty" tf:"dynamic_executor_allocation_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	LibraryRequirement []LibraryRequirementParameters `json:"libraryRequirement,omitempty" tf:"library_requirement,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NodeCount *float64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	// +kubebuilder:validation:Required
	NodeSize *string `json:"nodeSize" tf:"node_size,omitempty"`

	// +kubebuilder:validation:Required
	NodeSizeFamily *string `json:"nodeSizeFamily" tf:"node_size_family,omitempty"`

	// +kubebuilder:validation:Optional
	SessionLevelPackagesEnabled *bool `json:"sessionLevelPackagesEnabled,omitempty" tf:"session_level_packages_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	SparkConfig []SparkConfigParameters `json:"sparkConfig,omitempty" tf:"spark_config,omitempty"`

	// +kubebuilder:validation:Optional
	SparkEventsFolder *string `json:"sparkEventsFolder,omitempty" tf:"spark_events_folder,omitempty"`

	// +kubebuilder:validation:Optional
	SparkLogFolder *string `json:"sparkLogFolder,omitempty" tf:"spark_log_folder,omitempty"`

	// +kubebuilder:validation:Optional
	SparkVersion *string `json:"sparkVersion,omitempty" tf:"spark_version,omitempty"`

	// +kubebuilder:validation:Required
	SynapseWorkspaceID *string `json:"synapseWorkspaceId" tf:"synapse_workspace_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// SparkPoolSpec defines the desired state of SparkPool
type SparkPoolSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SparkPoolParameters `json:"forProvider"`
}

// SparkPoolStatus defines the observed state of SparkPool.
type SparkPoolStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SparkPoolObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SparkPool is the Schema for the SparkPools API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SparkPool struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SparkPoolSpec   `json:"spec"`
	Status            SparkPoolStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SparkPoolList contains a list of SparkPools
type SparkPoolList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SparkPool `json:"items"`
}

// Repository type metadata.
var (
	SparkPool_Kind             = "SparkPool"
	SparkPool_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SparkPool_Kind}.String()
	SparkPool_KindAPIVersion   = SparkPool_Kind + "." + CRDGroupVersion.String()
	SparkPool_GroupVersionKind = CRDGroupVersion.WithKind(SparkPool_Kind)
)

func init() {
	SchemeBuilder.Register(&SparkPool{}, &SparkPoolList{})
}
