/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsARecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type DnsARecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Records []*string `json:"records" tf:"records,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

// DnsARecordSpec defines the desired state of DnsARecord
type DnsARecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsARecordParameters `json:"forProvider"`
}

// DnsARecordStatus defines the observed state of DnsARecord.
type DnsARecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsARecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsARecord is the Schema for the DnsARecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DnsARecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsARecordSpec   `json:"spec"`
	Status            DnsARecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsARecordList contains a list of DnsARecords
type DnsARecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsARecord `json:"items"`
}

// Repository type metadata.
var (
	DnsARecord_Kind             = "DnsARecord"
	DnsARecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsARecord_Kind}.String()
	DnsARecord_KindAPIVersion   = DnsARecord_Kind + "." + CRDGroupVersion.String()
	DnsARecord_GroupVersionKind = CRDGroupVersion.WithKind(DnsARecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsARecord{}, &DnsARecordList{})
}
