/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsMxRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DnsMxRecordParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Record []RecordParameters `json:"record" tf:"record,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

type RecordObservation struct {
}

type RecordParameters struct {

	// +kubebuilder:validation:Required
	Exchange *string `json:"exchange" tf:"exchange,omitempty"`

	// +kubebuilder:validation:Required
	Preference *int64 `json:"preference" tf:"preference,omitempty"`
}

// DnsMxRecordSpec defines the desired state of DnsMxRecord
type DnsMxRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsMxRecordParameters `json:"forProvider"`
}

// DnsMxRecordStatus defines the observed state of DnsMxRecord.
type DnsMxRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsMxRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsMxRecord is the Schema for the DnsMxRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DnsMxRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsMxRecordSpec   `json:"spec"`
	Status            DnsMxRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsMxRecordList contains a list of DnsMxRecords
type DnsMxRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsMxRecord `json:"items"`
}

// Repository type metadata.
var (
	DnsMxRecord_Kind             = "DnsMxRecord"
	DnsMxRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsMxRecord_Kind}.String()
	DnsMxRecord_KindAPIVersion   = DnsMxRecord_Kind + "." + CRDGroupVersion.String()
	DnsMxRecord_GroupVersionKind = CRDGroupVersion.WithKind(DnsMxRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsMxRecord{}, &DnsMxRecordList{})
}
