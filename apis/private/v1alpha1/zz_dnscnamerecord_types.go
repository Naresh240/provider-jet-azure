/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsCnameRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`
}

type DnsCnameRecordParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Record *string `json:"record" tf:"record,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	TTL *int64 `json:"ttl" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	ZoneName *string `json:"zoneName" tf:"zone_name,omitempty"`
}

// DnsCnameRecordSpec defines the desired state of DnsCnameRecord
type DnsCnameRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsCnameRecordParameters `json:"forProvider"`
}

// DnsCnameRecordStatus defines the observed state of DnsCnameRecord.
type DnsCnameRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsCnameRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsCnameRecord is the Schema for the DnsCnameRecords API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DnsCnameRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsCnameRecordSpec   `json:"spec"`
	Status            DnsCnameRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsCnameRecordList contains a list of DnsCnameRecords
type DnsCnameRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsCnameRecord `json:"items"`
}

// Repository type metadata.
var (
	DnsCnameRecord_Kind             = "DnsCnameRecord"
	DnsCnameRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsCnameRecord_Kind}.String()
	DnsCnameRecord_KindAPIVersion   = DnsCnameRecord_Kind + "." + CRDGroupVersion.String()
	DnsCnameRecord_GroupVersionKind = CRDGroupVersion.WithKind(DnsCnameRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsCnameRecord{}, &DnsCnameRecordList{})
}
