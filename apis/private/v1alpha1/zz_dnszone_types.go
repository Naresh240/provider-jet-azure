/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsZoneObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MaxNumberOfRecordSets *int64 `json:"maxNumberOfRecordSets,omitempty" tf:"max_number_of_record_sets,omitempty"`

	MaxNumberOfVirtualNetworkLinks *int64 `json:"maxNumberOfVirtualNetworkLinks,omitempty" tf:"max_number_of_virtual_network_links,omitempty"`

	MaxNumberOfVirtualNetworkLinksWithRegistration *int64 `json:"maxNumberOfVirtualNetworkLinksWithRegistration,omitempty" tf:"max_number_of_virtual_network_links_with_registration,omitempty"`

	NumberOfRecordSets *int64 `json:"numberOfRecordSets,omitempty" tf:"number_of_record_sets,omitempty"`
}

type DnsZoneParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SoaRecord []SoaRecordParameters `json:"soaRecord,omitempty" tf:"soa_record,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type SoaRecordObservation struct {
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	HostName *string `json:"hostName,omitempty" tf:"host_name,omitempty"`

	SerialNumber *int64 `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`
}

type SoaRecordParameters struct {

	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	ExpireTime *int64 `json:"expireTime,omitempty" tf:"expire_time,omitempty"`

	// +kubebuilder:validation:Optional
	MinimumTTL *int64 `json:"minimumTtl,omitempty" tf:"minimum_ttl,omitempty"`

	// +kubebuilder:validation:Optional
	RefreshTime *int64 `json:"refreshTime,omitempty" tf:"refresh_time,omitempty"`

	// +kubebuilder:validation:Optional
	RetryTime *int64 `json:"retryTime,omitempty" tf:"retry_time,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *int64 `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// DnsZoneSpec defines the desired state of DnsZone
type DnsZoneSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsZoneParameters `json:"forProvider"`
}

// DnsZoneStatus defines the observed state of DnsZone.
type DnsZoneStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsZoneObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsZone is the Schema for the DnsZones API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DnsZone struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsZoneSpec   `json:"spec"`
	Status            DnsZoneStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsZoneList contains a list of DnsZones
type DnsZoneList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsZone `json:"items"`
}

// Repository type metadata.
var (
	DnsZone_Kind             = "DnsZone"
	DnsZone_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsZone_Kind}.String()
	DnsZone_KindAPIVersion   = DnsZone_Kind + "." + CRDGroupVersion.String()
	DnsZone_GroupVersionKind = CRDGroupVersion.WithKind(DnsZone_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsZone{}, &DnsZoneList{})
}
