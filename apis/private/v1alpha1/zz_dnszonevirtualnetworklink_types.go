/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DnsZoneVirtualNetworkLinkObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DnsZoneVirtualNetworkLinkParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PrivateDNSZoneName *string `json:"privateDnsZoneName" tf:"private_dns_zone_name,omitempty"`

	// +kubebuilder:validation:Optional
	RegistrationEnabled *bool `json:"registrationEnabled,omitempty" tf:"registration_enabled,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	VirtualNetworkID *string `json:"virtualNetworkId" tf:"virtual_network_id,omitempty"`
}

// DnsZoneVirtualNetworkLinkSpec defines the desired state of DnsZoneVirtualNetworkLink
type DnsZoneVirtualNetworkLinkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DnsZoneVirtualNetworkLinkParameters `json:"forProvider"`
}

// DnsZoneVirtualNetworkLinkStatus defines the observed state of DnsZoneVirtualNetworkLink.
type DnsZoneVirtualNetworkLinkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DnsZoneVirtualNetworkLinkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DnsZoneVirtualNetworkLink is the Schema for the DnsZoneVirtualNetworkLinks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DnsZoneVirtualNetworkLink struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DnsZoneVirtualNetworkLinkSpec   `json:"spec"`
	Status            DnsZoneVirtualNetworkLinkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DnsZoneVirtualNetworkLinkList contains a list of DnsZoneVirtualNetworkLinks
type DnsZoneVirtualNetworkLinkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DnsZoneVirtualNetworkLink `json:"items"`
}

// Repository type metadata.
var (
	DnsZoneVirtualNetworkLink_Kind             = "DnsZoneVirtualNetworkLink"
	DnsZoneVirtualNetworkLink_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DnsZoneVirtualNetworkLink_Kind}.String()
	DnsZoneVirtualNetworkLink_KindAPIVersion   = DnsZoneVirtualNetworkLink_Kind + "." + CRDGroupVersion.String()
	DnsZoneVirtualNetworkLink_GroupVersionKind = CRDGroupVersion.WithKind(DnsZoneVirtualNetworkLink_Kind)
)

func init() {
	SchemeBuilder.Register(&DnsZoneVirtualNetworkLink{}, &DnsZoneVirtualNetworkLinkList{})
}
