/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpPrefixObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPPrefix *string `json:"ipPrefix,omitempty" tf:"ip_prefix,omitempty"`
}

type IpPrefixParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixLength *int64 `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Sku *string `json:"sku,omitempty" tf:"sku,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Zones []*string `json:"zones,omitempty" tf:"zones,omitempty"`
}

// IpPrefixSpec defines the desired state of IpPrefix
type IpPrefixSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpPrefixParameters `json:"forProvider"`
}

// IpPrefixStatus defines the observed state of IpPrefix.
type IpPrefixStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpPrefixObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpPrefix is the Schema for the IpPrefixs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type IpPrefix struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              IpPrefixSpec   `json:"spec"`
	Status            IpPrefixStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpPrefixList contains a list of IpPrefixs
type IpPrefixList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpPrefix `json:"items"`
}

// Repository type metadata.
var (
	IpPrefix_Kind             = "IpPrefix"
	IpPrefix_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpPrefix_Kind}.String()
	IpPrefix_KindAPIVersion   = IpPrefix_Kind + "." + CRDGroupVersion.String()
	IpPrefix_GroupVersionKind = CRDGroupVersion.WithKind(IpPrefix_Kind)
)

func init() {
	SchemeBuilder.Register(&IpPrefix{}, &IpPrefixList{})
}
