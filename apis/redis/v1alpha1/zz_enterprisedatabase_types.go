/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EnterpriseDatabaseObservation struct {
}

type EnterpriseDatabaseParameters struct {

	// +kubebuilder:validation:Optional
	ClientProtocol *string `json:"clientProtocol,omitempty" tf:"client_protocol,omitempty"`

	// +kubebuilder:validation:Required
	ClusterID *string `json:"clusterId" tf:"cluster_id,omitempty"`

	// +kubebuilder:validation:Optional
	ClusteringPolicy *string `json:"clusteringPolicy,omitempty" tf:"clustering_policy,omitempty"`

	// +kubebuilder:validation:Optional
	EvictionPolicy *string `json:"evictionPolicy,omitempty" tf:"eviction_policy,omitempty"`

	// +kubebuilder:validation:Optional
	Module []ModuleParameters `json:"module,omitempty" tf:"module,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Port *int64 `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

type ModuleObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ModuleParameters struct {

	// +kubebuilder:validation:Optional
	Args *string `json:"args,omitempty" tf:"args,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// EnterpriseDatabaseSpec defines the desired state of EnterpriseDatabase
type EnterpriseDatabaseSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EnterpriseDatabaseParameters `json:"forProvider"`
}

// EnterpriseDatabaseStatus defines the observed state of EnterpriseDatabase.
type EnterpriseDatabaseStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EnterpriseDatabaseObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseDatabase is the Schema for the EnterpriseDatabases API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EnterpriseDatabase struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EnterpriseDatabaseSpec   `json:"spec"`
	Status            EnterpriseDatabaseStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EnterpriseDatabaseList contains a list of EnterpriseDatabases
type EnterpriseDatabaseList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EnterpriseDatabase `json:"items"`
}

// Repository type metadata.
var (
	EnterpriseDatabase_Kind             = "EnterpriseDatabase"
	EnterpriseDatabase_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EnterpriseDatabase_Kind}.String()
	EnterpriseDatabase_KindAPIVersion   = EnterpriseDatabase_Kind + "." + CRDGroupVersion.String()
	EnterpriseDatabase_GroupVersionKind = CRDGroupVersion.WithKind(EnterpriseDatabase_Kind)
)

func init() {
	SchemeBuilder.Register(&EnterpriseDatabase{}, &EnterpriseDatabaseList{})
}
