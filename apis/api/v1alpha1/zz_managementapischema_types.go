/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementApiSchemaObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementApiSchemaParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	APIName *string `json:"apiName" tf:"api_name,omitempty"`

	// +kubebuilder:validation:Required
	ContentType *string `json:"contentType" tf:"content_type,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SchemaID *string `json:"schemaId" tf:"schema_id,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// ManagementApiSchemaSpec defines the desired state of ManagementApiSchema
type ManagementApiSchemaSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementApiSchemaParameters `json:"forProvider"`
}

// ManagementApiSchemaStatus defines the observed state of ManagementApiSchema.
type ManagementApiSchemaStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementApiSchemaObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementApiSchema is the Schema for the ManagementApiSchemas API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementApiSchema struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementApiSchemaSpec   `json:"spec"`
	Status            ManagementApiSchemaStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementApiSchemaList contains a list of ManagementApiSchemas
type ManagementApiSchemaList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementApiSchema `json:"items"`
}

// Repository type metadata.
var (
	ManagementApiSchema_Kind             = "ManagementApiSchema"
	ManagementApiSchema_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementApiSchema_Kind}.String()
	ManagementApiSchema_KindAPIVersion   = ManagementApiSchema_Kind + "." + CRDGroupVersion.String()
	ManagementApiSchema_GroupVersionKind = CRDGroupVersion.WithKind(ManagementApiSchema_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementApiSchema{}, &ManagementApiSchemaList{})
}
