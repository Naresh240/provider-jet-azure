/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementTagObservation struct {
}

type ManagementTagParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID *string `json:"apiManagementId" tf:"api_management_id,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// ManagementTagSpec defines the desired state of ManagementTag
type ManagementTagSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementTagParameters `json:"forProvider"`
}

// ManagementTagStatus defines the observed state of ManagementTag.
type ManagementTagStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementTagObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementTag is the Schema for the ManagementTags API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementTag struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementTagSpec   `json:"spec"`
	Status            ManagementTagStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementTagList contains a list of ManagementTags
type ManagementTagList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementTag `json:"items"`
}

// Repository type metadata.
var (
	ManagementTag_Kind             = "ManagementTag"
	ManagementTag_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementTag_Kind}.String()
	ManagementTag_KindAPIVersion   = ManagementTag_Kind + "." + CRDGroupVersion.String()
	ManagementTag_GroupVersionKind = CRDGroupVersion.WithKind(ManagementTag_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementTag{}, &ManagementTagList{})
}
