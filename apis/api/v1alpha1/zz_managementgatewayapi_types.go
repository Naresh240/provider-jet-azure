/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementGatewayApiObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementGatewayApiParameters struct {

	// +kubebuilder:validation:Required
	APIID *string `json:"apiId" tf:"api_id,omitempty"`

	// +kubebuilder:validation:Required
	GatewayID *string `json:"gatewayId" tf:"gateway_id,omitempty"`
}

// ManagementGatewayApiSpec defines the desired state of ManagementGatewayApi
type ManagementGatewayApiSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementGatewayApiParameters `json:"forProvider"`
}

// ManagementGatewayApiStatus defines the observed state of ManagementGatewayApi.
type ManagementGatewayApiStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementGatewayApiObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGatewayApi is the Schema for the ManagementGatewayApis API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementGatewayApi struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGatewayApiSpec   `json:"spec"`
	Status            ManagementGatewayApiStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGatewayApiList contains a list of ManagementGatewayApis
type ManagementGatewayApiList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGatewayApi `json:"items"`
}

// Repository type metadata.
var (
	ManagementGatewayApi_Kind             = "ManagementGatewayApi"
	ManagementGatewayApi_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementGatewayApi_Kind}.String()
	ManagementGatewayApi_KindAPIVersion   = ManagementGatewayApi_Kind + "." + CRDGroupVersion.String()
	ManagementGatewayApi_GroupVersionKind = CRDGroupVersion.WithKind(ManagementGatewayApi_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementGatewayApi{}, &ManagementGatewayApiList{})
}
