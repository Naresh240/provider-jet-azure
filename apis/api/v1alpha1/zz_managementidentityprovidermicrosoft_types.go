/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementIdentityProviderMicrosoftObservation struct {
}

type ManagementIdentityProviderMicrosoftParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// ManagementIdentityProviderMicrosoftSpec defines the desired state of ManagementIdentityProviderMicrosoft
type ManagementIdentityProviderMicrosoftSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementIdentityProviderMicrosoftParameters `json:"forProvider"`
}

// ManagementIdentityProviderMicrosoftStatus defines the observed state of ManagementIdentityProviderMicrosoft.
type ManagementIdentityProviderMicrosoftStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementIdentityProviderMicrosoftObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderMicrosoft is the Schema for the ManagementIdentityProviderMicrosofts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementIdentityProviderMicrosoft struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementIdentityProviderMicrosoftSpec   `json:"spec"`
	Status            ManagementIdentityProviderMicrosoftStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderMicrosoftList contains a list of ManagementIdentityProviderMicrosofts
type ManagementIdentityProviderMicrosoftList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementIdentityProviderMicrosoft `json:"items"`
}

// Repository type metadata.
var (
	ManagementIdentityProviderMicrosoft_Kind             = "ManagementIdentityProviderMicrosoft"
	ManagementIdentityProviderMicrosoft_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementIdentityProviderMicrosoft_Kind}.String()
	ManagementIdentityProviderMicrosoft_KindAPIVersion   = ManagementIdentityProviderMicrosoft_Kind + "." + CRDGroupVersion.String()
	ManagementIdentityProviderMicrosoft_GroupVersionKind = CRDGroupVersion.WithKind(ManagementIdentityProviderMicrosoft_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementIdentityProviderMicrosoft{}, &ManagementIdentityProviderMicrosoftList{})
}
