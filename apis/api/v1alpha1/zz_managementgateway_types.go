/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LocationDataObservation struct {
}

type LocationDataParameters struct {

	// +kubebuilder:validation:Optional
	City *string `json:"city,omitempty" tf:"city,omitempty"`

	// +kubebuilder:validation:Optional
	District *string `json:"district,omitempty" tf:"district,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`
}

type ManagementGatewayObservation struct {
}

type ManagementGatewayParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID *string `json:"apiManagementId" tf:"api_management_id,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	LocationData []LocationDataParameters `json:"locationData" tf:"location_data,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// ManagementGatewaySpec defines the desired state of ManagementGateway
type ManagementGatewaySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementGatewayParameters `json:"forProvider"`
}

// ManagementGatewayStatus defines the observed state of ManagementGateway.
type ManagementGatewayStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementGatewayObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGateway is the Schema for the ManagementGateways API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementGateway struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGatewaySpec   `json:"spec"`
	Status            ManagementGatewayStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGatewayList contains a list of ManagementGateways
type ManagementGatewayList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGateway `json:"items"`
}

// Repository type metadata.
var (
	ManagementGateway_Kind             = "ManagementGateway"
	ManagementGateway_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementGateway_Kind}.String()
	ManagementGateway_KindAPIVersion   = ManagementGateway_Kind + "." + CRDGroupVersion.String()
	ManagementGateway_GroupVersionKind = CRDGroupVersion.WithKind(ManagementGateway_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementGateway{}, &ManagementGatewayList{})
}
