/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementProductPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementProductPolicyParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	ProductID *string `json:"productId" tf:"product_id,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	XMLContent *string `json:"xmlContent,omitempty" tf:"xml_content,omitempty"`

	// +kubebuilder:validation:Optional
	XMLLink *string `json:"xmlLink,omitempty" tf:"xml_link,omitempty"`
}

// ManagementProductPolicySpec defines the desired state of ManagementProductPolicy
type ManagementProductPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementProductPolicyParameters `json:"forProvider"`
}

// ManagementProductPolicyStatus defines the observed state of ManagementProductPolicy.
type ManagementProductPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementProductPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementProductPolicy is the Schema for the ManagementProductPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementProductPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementProductPolicySpec   `json:"spec"`
	Status            ManagementProductPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementProductPolicyList contains a list of ManagementProductPolicys
type ManagementProductPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementProductPolicy `json:"items"`
}

// Repository type metadata.
var (
	ManagementProductPolicy_Kind             = "ManagementProductPolicy"
	ManagementProductPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementProductPolicy_Kind}.String()
	ManagementProductPolicy_KindAPIVersion   = ManagementProductPolicy_Kind + "." + CRDGroupVersion.String()
	ManagementProductPolicy_GroupVersionKind = CRDGroupVersion.WithKind(ManagementProductPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementProductPolicy{}, &ManagementProductPolicyList{})
}
