/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementIdentityProviderGoogleObservation struct {
}

type ManagementIdentityProviderGoogleParameters struct {

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// ManagementIdentityProviderGoogleSpec defines the desired state of ManagementIdentityProviderGoogle
type ManagementIdentityProviderGoogleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementIdentityProviderGoogleParameters `json:"forProvider"`
}

// ManagementIdentityProviderGoogleStatus defines the observed state of ManagementIdentityProviderGoogle.
type ManagementIdentityProviderGoogleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementIdentityProviderGoogleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderGoogle is the Schema for the ManagementIdentityProviderGoogles API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementIdentityProviderGoogle struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementIdentityProviderGoogleSpec   `json:"spec"`
	Status            ManagementIdentityProviderGoogleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderGoogleList contains a list of ManagementIdentityProviderGoogles
type ManagementIdentityProviderGoogleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementIdentityProviderGoogle `json:"items"`
}

// Repository type metadata.
var (
	ManagementIdentityProviderGoogle_Kind             = "ManagementIdentityProviderGoogle"
	ManagementIdentityProviderGoogle_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementIdentityProviderGoogle_Kind}.String()
	ManagementIdentityProviderGoogle_KindAPIVersion   = ManagementIdentityProviderGoogle_Kind + "." + CRDGroupVersion.String()
	ManagementIdentityProviderGoogle_GroupVersionKind = CRDGroupVersion.WithKind(ManagementIdentityProviderGoogle_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementIdentityProviderGoogle{}, &ManagementIdentityProviderGoogleList{})
}
