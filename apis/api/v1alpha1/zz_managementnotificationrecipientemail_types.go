/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementNotificationRecipientEmailObservation struct {
}

type ManagementNotificationRecipientEmailParameters struct {

	// +kubebuilder:validation:Required
	APIManagementID *string `json:"apiManagementId" tf:"api_management_id,omitempty"`

	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Required
	NotificationType *string `json:"notificationType" tf:"notification_type,omitempty"`
}

// ManagementNotificationRecipientEmailSpec defines the desired state of ManagementNotificationRecipientEmail
type ManagementNotificationRecipientEmailSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementNotificationRecipientEmailParameters `json:"forProvider"`
}

// ManagementNotificationRecipientEmailStatus defines the observed state of ManagementNotificationRecipientEmail.
type ManagementNotificationRecipientEmailStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementNotificationRecipientEmailObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementNotificationRecipientEmail is the Schema for the ManagementNotificationRecipientEmails API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementNotificationRecipientEmail struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementNotificationRecipientEmailSpec   `json:"spec"`
	Status            ManagementNotificationRecipientEmailStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementNotificationRecipientEmailList contains a list of ManagementNotificationRecipientEmails
type ManagementNotificationRecipientEmailList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementNotificationRecipientEmail `json:"items"`
}

// Repository type metadata.
var (
	ManagementNotificationRecipientEmail_Kind             = "ManagementNotificationRecipientEmail"
	ManagementNotificationRecipientEmail_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementNotificationRecipientEmail_Kind}.String()
	ManagementNotificationRecipientEmail_KindAPIVersion   = ManagementNotificationRecipientEmail_Kind + "." + CRDGroupVersion.String()
	ManagementNotificationRecipientEmail_GroupVersionKind = CRDGroupVersion.WithKind(ManagementNotificationRecipientEmail_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementNotificationRecipientEmail{}, &ManagementNotificationRecipientEmailList{})
}
