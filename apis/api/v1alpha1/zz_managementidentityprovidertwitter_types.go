/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementIdentityProviderTwitterObservation struct {
}

type ManagementIdentityProviderTwitterParameters struct {

	// +kubebuilder:validation:Required
	APIKey *string `json:"apiKey" tf:"api_key,omitempty"`

	// +kubebuilder:validation:Required
	APIManagementName *string `json:"apiManagementName" tf:"api_management_name,omitempty"`

	// +kubebuilder:validation:Required
	APISecretKeySecretRef v1.SecretKeySelector `json:"apiSecretKeySecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// ManagementIdentityProviderTwitterSpec defines the desired state of ManagementIdentityProviderTwitter
type ManagementIdentityProviderTwitterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementIdentityProviderTwitterParameters `json:"forProvider"`
}

// ManagementIdentityProviderTwitterStatus defines the observed state of ManagementIdentityProviderTwitter.
type ManagementIdentityProviderTwitterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementIdentityProviderTwitterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderTwitter is the Schema for the ManagementIdentityProviderTwitters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementIdentityProviderTwitter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementIdentityProviderTwitterSpec   `json:"spec"`
	Status            ManagementIdentityProviderTwitterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementIdentityProviderTwitterList contains a list of ManagementIdentityProviderTwitters
type ManagementIdentityProviderTwitterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementIdentityProviderTwitter `json:"items"`
}

// Repository type metadata.
var (
	ManagementIdentityProviderTwitter_Kind             = "ManagementIdentityProviderTwitter"
	ManagementIdentityProviderTwitter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementIdentityProviderTwitter_Kind}.String()
	ManagementIdentityProviderTwitter_KindAPIVersion   = ManagementIdentityProviderTwitter_Kind + "." + CRDGroupVersion.String()
	ManagementIdentityProviderTwitter_GroupVersionKind = CRDGroupVersion.WithKind(ManagementIdentityProviderTwitter_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementIdentityProviderTwitter{}, &ManagementIdentityProviderTwitterList{})
}
