/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type HubAuthorizationRuleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	PrimaryAccessKey *string `json:"primaryAccessKey,omitempty" tf:"primary_access_key,omitempty"`

	SecondaryAccessKey *string `json:"secondaryAccessKey,omitempty" tf:"secondary_access_key,omitempty"`
}

type HubAuthorizationRuleParameters struct {

	// +kubebuilder:validation:Optional
	Listen *bool `json:"listen,omitempty" tf:"listen,omitempty"`

	// +kubebuilder:validation:Optional
	Manage *bool `json:"manage,omitempty" tf:"manage,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	NamespaceName *string `json:"namespaceName" tf:"namespace_name,omitempty"`

	// +kubebuilder:validation:Required
	NotificationHubName *string `json:"notificationHubName" tf:"notification_hub_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Send *bool `json:"send,omitempty" tf:"send,omitempty"`
}

// HubAuthorizationRuleSpec defines the desired state of HubAuthorizationRule
type HubAuthorizationRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HubAuthorizationRuleParameters `json:"forProvider"`
}

// HubAuthorizationRuleStatus defines the observed state of HubAuthorizationRule.
type HubAuthorizationRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HubAuthorizationRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HubAuthorizationRule is the Schema for the HubAuthorizationRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type HubAuthorizationRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              HubAuthorizationRuleSpec   `json:"spec"`
	Status            HubAuthorizationRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HubAuthorizationRuleList contains a list of HubAuthorizationRules
type HubAuthorizationRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HubAuthorizationRule `json:"items"`
}

// Repository type metadata.
var (
	HubAuthorizationRule_Kind             = "HubAuthorizationRule"
	HubAuthorizationRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HubAuthorizationRule_Kind}.String()
	HubAuthorizationRule_KindAPIVersion   = HubAuthorizationRule_Kind + "." + CRDGroupVersion.String()
	HubAuthorizationRule_GroupVersionKind = CRDGroupVersion.WithKind(HubAuthorizationRule_Kind)
)

func init() {
	SchemeBuilder.Register(&HubAuthorizationRule{}, &HubAuthorizationRuleList{})
}
