/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignmentVirtualMachineScaleSetObservation struct {
}

type AssignmentVirtualMachineScaleSetParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	MaintenanceConfigurationID *string `json:"maintenanceConfigurationId" tf:"maintenance_configuration_id,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineScaleSetID *string `json:"virtualMachineScaleSetId" tf:"virtual_machine_scale_set_id,omitempty"`
}

// AssignmentVirtualMachineScaleSetSpec defines the desired state of AssignmentVirtualMachineScaleSet
type AssignmentVirtualMachineScaleSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssignmentVirtualMachineScaleSetParameters `json:"forProvider"`
}

// AssignmentVirtualMachineScaleSetStatus defines the observed state of AssignmentVirtualMachineScaleSet.
type AssignmentVirtualMachineScaleSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssignmentVirtualMachineScaleSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssignmentVirtualMachineScaleSet is the Schema for the AssignmentVirtualMachineScaleSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AssignmentVirtualMachineScaleSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssignmentVirtualMachineScaleSetSpec   `json:"spec"`
	Status            AssignmentVirtualMachineScaleSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssignmentVirtualMachineScaleSetList contains a list of AssignmentVirtualMachineScaleSets
type AssignmentVirtualMachineScaleSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssignmentVirtualMachineScaleSet `json:"items"`
}

// Repository type metadata.
var (
	AssignmentVirtualMachineScaleSet_Kind             = "AssignmentVirtualMachineScaleSet"
	AssignmentVirtualMachineScaleSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AssignmentVirtualMachineScaleSet_Kind}.String()
	AssignmentVirtualMachineScaleSet_KindAPIVersion   = AssignmentVirtualMachineScaleSet_Kind + "." + CRDGroupVersion.String()
	AssignmentVirtualMachineScaleSet_GroupVersionKind = CRDGroupVersion.WithKind(AssignmentVirtualMachineScaleSet_Kind)
)

func init() {
	SchemeBuilder.Register(&AssignmentVirtualMachineScaleSet{}, &AssignmentVirtualMachineScaleSetList{})
}
