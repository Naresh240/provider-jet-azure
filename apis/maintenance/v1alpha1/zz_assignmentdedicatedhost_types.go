/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssignmentDedicatedHostObservation struct {
}

type AssignmentDedicatedHostParameters struct {

	// +kubebuilder:validation:Required
	DedicatedHostID *string `json:"dedicatedHostId" tf:"dedicated_host_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	MaintenanceConfigurationID *string `json:"maintenanceConfigurationId" tf:"maintenance_configuration_id,omitempty"`
}

// AssignmentDedicatedHostSpec defines the desired state of AssignmentDedicatedHost
type AssignmentDedicatedHostSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssignmentDedicatedHostParameters `json:"forProvider"`
}

// AssignmentDedicatedHostStatus defines the observed state of AssignmentDedicatedHost.
type AssignmentDedicatedHostStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssignmentDedicatedHostObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssignmentDedicatedHost is the Schema for the AssignmentDedicatedHosts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AssignmentDedicatedHost struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssignmentDedicatedHostSpec   `json:"spec"`
	Status            AssignmentDedicatedHostStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssignmentDedicatedHostList contains a list of AssignmentDedicatedHosts
type AssignmentDedicatedHostList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssignmentDedicatedHost `json:"items"`
}

// Repository type metadata.
var (
	AssignmentDedicatedHost_Kind             = "AssignmentDedicatedHost"
	AssignmentDedicatedHost_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AssignmentDedicatedHost_Kind}.String()
	AssignmentDedicatedHost_KindAPIVersion   = AssignmentDedicatedHost_Kind + "." + CRDGroupVersion.String()
	AssignmentDedicatedHost_GroupVersionKind = CRDGroupVersion.WithKind(AssignmentDedicatedHost_Kind)
)

func init() {
	SchemeBuilder.Register(&AssignmentDedicatedHost{}, &AssignmentDedicatedHostList{})
}
