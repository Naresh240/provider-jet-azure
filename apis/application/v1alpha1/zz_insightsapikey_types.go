/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InsightsApiKeyObservation struct {
}

type InsightsApiKeyParameters struct {

	// +kubebuilder:validation:Required
	ApplicationInsightsID *string `json:"applicationInsightsId" tf:"application_insights_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ReadPermissions []*string `json:"readPermissions,omitempty" tf:"read_permissions,omitempty"`

	// +kubebuilder:validation:Optional
	WritePermissions []*string `json:"writePermissions,omitempty" tf:"write_permissions,omitempty"`
}

// InsightsApiKeySpec defines the desired state of InsightsApiKey
type InsightsApiKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InsightsApiKeyParameters `json:"forProvider"`
}

// InsightsApiKeyStatus defines the observed state of InsightsApiKey.
type InsightsApiKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InsightsApiKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InsightsApiKey is the Schema for the InsightsApiKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type InsightsApiKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InsightsApiKeySpec   `json:"spec"`
	Status            InsightsApiKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InsightsApiKeyList contains a list of InsightsApiKeys
type InsightsApiKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InsightsApiKey `json:"items"`
}

// Repository type metadata.
var (
	InsightsApiKey_Kind             = "InsightsApiKey"
	InsightsApiKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InsightsApiKey_Kind}.String()
	InsightsApiKey_KindAPIVersion   = InsightsApiKey_Kind + "." + CRDGroupVersion.String()
	InsightsApiKey_GroupVersionKind = CRDGroupVersion.WithKind(InsightsApiKey_Kind)
)

func init() {
	SchemeBuilder.Register(&InsightsApiKey{}, &InsightsApiKeyList{})
}
