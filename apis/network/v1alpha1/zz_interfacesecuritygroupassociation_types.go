/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceSecurityGroupAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type InterfaceSecurityGroupAssociationParameters struct {

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkSecurityGroupID *string `json:"networkSecurityGroupId" tf:"network_security_group_id,omitempty"`
}

// InterfaceSecurityGroupAssociationSpec defines the desired state of InterfaceSecurityGroupAssociation
type InterfaceSecurityGroupAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceSecurityGroupAssociationParameters `json:"forProvider"`
}

// InterfaceSecurityGroupAssociationStatus defines the observed state of InterfaceSecurityGroupAssociation.
type InterfaceSecurityGroupAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceSecurityGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceSecurityGroupAssociation is the Schema for the InterfaceSecurityGroupAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type InterfaceSecurityGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceSecurityGroupAssociationSpec   `json:"spec"`
	Status            InterfaceSecurityGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceSecurityGroupAssociationList contains a list of InterfaceSecurityGroupAssociations
type InterfaceSecurityGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceSecurityGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	InterfaceSecurityGroupAssociation_Kind             = "InterfaceSecurityGroupAssociation"
	InterfaceSecurityGroupAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceSecurityGroupAssociation_Kind}.String()
	InterfaceSecurityGroupAssociation_KindAPIVersion   = InterfaceSecurityGroupAssociation_Kind + "." + CRDGroupVersion.String()
	InterfaceSecurityGroupAssociation_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceSecurityGroupAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceSecurityGroupAssociation{}, &InterfaceSecurityGroupAssociationList{})
}
