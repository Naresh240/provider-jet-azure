/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ApplicationGateway
func (mg *ApplicationGateway) GetTerraformResourceType() string {
	return "azurerm_application_gateway"
}

// GetConnectionDetailsMapping for this ApplicationGateway
func (tr *ApplicationGateway) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"authentication_certificate[*].data": "spec.forProvider.authenticationCertificate[*].dataSecretRef", "ssl_certificate[*].data": "spec.forProvider.sslCertificate[*].dataSecretRef", "ssl_certificate[*].password": "spec.forProvider.sslCertificate[*].passwordSecretRef", "trusted_client_certificate[*].data": "spec.forProvider.trustedClientCertificate[*].dataSecretRef", "trusted_root_certificate[*].data": "spec.forProvider.trustedRootCertificate[*].dataSecretRef"}
}

// GetObservation of this ApplicationGateway
func (tr *ApplicationGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationGateway
func (tr *ApplicationGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationGateway
func (tr *ApplicationGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationGateway
func (tr *ApplicationGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationGateway
func (tr *ApplicationGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationSecurityGroup
func (mg *ApplicationSecurityGroup) GetTerraformResourceType() string {
	return "azurerm_application_security_group"
}

// GetConnectionDetailsMapping for this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationSecurityGroup
func (tr *ApplicationSecurityGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationSecurityGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationSecurityGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationSecurityGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationSecurityGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this BastionHost
func (mg *BastionHost) GetTerraformResourceType() string {
	return "azurerm_bastion_host"
}

// GetConnectionDetailsMapping for this BastionHost
func (tr *BastionHost) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this BastionHost
func (tr *BastionHost) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this BastionHost
func (tr *BastionHost) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this BastionHost
func (tr *BastionHost) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this BastionHost
func (tr *BastionHost) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this BastionHost
func (tr *BastionHost) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this BastionHost using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *BastionHost) LateInitialize(attrs []byte) (bool, error) {
	params := &BastionHostParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *BastionHost) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSARecord
func (mg *DNSARecord) GetTerraformResourceType() string {
	return "azurerm_dns_a_record"
}

// GetConnectionDetailsMapping for this DNSARecord
func (tr *DNSARecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSARecord
func (tr *DNSARecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSARecord
func (tr *DNSARecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSARecord
func (tr *DNSARecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSARecord
func (tr *DNSARecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSARecord
func (tr *DNSARecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSARecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSARecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSARecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSARecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSAAAARecord
func (mg *DNSAAAARecord) GetTerraformResourceType() string {
	return "azurerm_dns_aaaa_record"
}

// GetConnectionDetailsMapping for this DNSAAAARecord
func (tr *DNSAAAARecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSAAAARecord
func (tr *DNSAAAARecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSAAAARecord
func (tr *DNSAAAARecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSAAAARecord
func (tr *DNSAAAARecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSAAAARecord
func (tr *DNSAAAARecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSAAAARecord
func (tr *DNSAAAARecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSAAAARecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSAAAARecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSAAAARecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSAAAARecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSCAARecord
func (mg *DNSCAARecord) GetTerraformResourceType() string {
	return "azurerm_dns_caa_record"
}

// GetConnectionDetailsMapping for this DNSCAARecord
func (tr *DNSCAARecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSCAARecord
func (tr *DNSCAARecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSCAARecord
func (tr *DNSCAARecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSCAARecord
func (tr *DNSCAARecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSCAARecord
func (tr *DNSCAARecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSCAARecord
func (tr *DNSCAARecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSCAARecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSCAARecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSCAARecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSCAARecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSCNAMERecord
func (mg *DNSCNAMERecord) GetTerraformResourceType() string {
	return "azurerm_dns_cname_record"
}

// GetConnectionDetailsMapping for this DNSCNAMERecord
func (tr *DNSCNAMERecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSCNAMERecord
func (tr *DNSCNAMERecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSCNAMERecord
func (tr *DNSCNAMERecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSCNAMERecord
func (tr *DNSCNAMERecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSCNAMERecord
func (tr *DNSCNAMERecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSCNAMERecord
func (tr *DNSCNAMERecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSCNAMERecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSCNAMERecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSCNAMERecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSCNAMERecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSMXRecord
func (mg *DNSMXRecord) GetTerraformResourceType() string {
	return "azurerm_dns_mx_record"
}

// GetConnectionDetailsMapping for this DNSMXRecord
func (tr *DNSMXRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSMXRecord
func (tr *DNSMXRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSMXRecord
func (tr *DNSMXRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSMXRecord
func (tr *DNSMXRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSMXRecord
func (tr *DNSMXRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSMXRecord
func (tr *DNSMXRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSMXRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSMXRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSMXRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSMXRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSNSRecord
func (mg *DNSNSRecord) GetTerraformResourceType() string {
	return "azurerm_dns_ns_record"
}

// GetConnectionDetailsMapping for this DNSNSRecord
func (tr *DNSNSRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSNSRecord
func (tr *DNSNSRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSNSRecord
func (tr *DNSNSRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSNSRecord
func (tr *DNSNSRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSNSRecord
func (tr *DNSNSRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSNSRecord
func (tr *DNSNSRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSNSRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSNSRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSNSRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSNSRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSPTRRecord
func (mg *DNSPTRRecord) GetTerraformResourceType() string {
	return "azurerm_dns_ptr_record"
}

// GetConnectionDetailsMapping for this DNSPTRRecord
func (tr *DNSPTRRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSPTRRecord
func (tr *DNSPTRRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSPTRRecord
func (tr *DNSPTRRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSPTRRecord
func (tr *DNSPTRRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSPTRRecord
func (tr *DNSPTRRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSPTRRecord
func (tr *DNSPTRRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSPTRRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSPTRRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSPTRRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSPTRRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSSRVRecord
func (mg *DNSSRVRecord) GetTerraformResourceType() string {
	return "azurerm_dns_srv_record"
}

// GetConnectionDetailsMapping for this DNSSRVRecord
func (tr *DNSSRVRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSSRVRecord
func (tr *DNSSRVRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSSRVRecord
func (tr *DNSSRVRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSSRVRecord
func (tr *DNSSRVRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSSRVRecord
func (tr *DNSSRVRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSSRVRecord
func (tr *DNSSRVRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSSRVRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSSRVRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSSRVRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSSRVRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSTXTRecord
func (mg *DNSTXTRecord) GetTerraformResourceType() string {
	return "azurerm_dns_txt_record"
}

// GetConnectionDetailsMapping for this DNSTXTRecord
func (tr *DNSTXTRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSTXTRecord
func (tr *DNSTXTRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSTXTRecord
func (tr *DNSTXTRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSTXTRecord
func (tr *DNSTXTRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSTXTRecord
func (tr *DNSTXTRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSTXTRecord
func (tr *DNSTXTRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSTXTRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSTXTRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSTXTRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSTXTRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DNSZone
func (mg *DNSZone) GetTerraformResourceType() string {
	return "azurerm_dns_zone"
}

// GetConnectionDetailsMapping for this DNSZone
func (tr *DNSZone) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DNSZone
func (tr *DNSZone) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DNSZone
func (tr *DNSZone) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DNSZone
func (tr *DNSZone) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DNSZone
func (tr *DNSZone) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DNSZone
func (tr *DNSZone) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DNSZone using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DNSZone) LateInitialize(attrs []byte) (bool, error) {
	params := &DNSZoneParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DNSZone) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteCircuit
func (mg *ExpressRouteCircuit) GetTerraformResourceType() string {
	return "azurerm_express_route_circuit"
}

// GetConnectionDetailsMapping for this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"service_key": "status.atProvider.serviceKey"}
}

// GetObservation of this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteCircuit
func (tr *ExpressRouteCircuit) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteCircuit using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteCircuit) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteCircuitParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteCircuit) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteCircuitAuthorization
func (mg *ExpressRouteCircuitAuthorization) GetTerraformResourceType() string {
	return "azurerm_express_route_circuit_authorization"
}

// GetConnectionDetailsMapping for this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"authorization_key": "status.atProvider.authorizationKey"}
}

// GetObservation of this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteCircuitAuthorization
func (tr *ExpressRouteCircuitAuthorization) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteCircuitAuthorization using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteCircuitAuthorization) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteCircuitAuthorizationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteCircuitAuthorization) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteCircuitConnection
func (mg *ExpressRouteCircuitConnection) GetTerraformResourceType() string {
	return "azurerm_express_route_circuit_connection"
}

// GetConnectionDetailsMapping for this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"authorization_key": "spec.forProvider.authorizationKeySecretRef"}
}

// GetObservation of this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteCircuitConnection
func (tr *ExpressRouteCircuitConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteCircuitConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteCircuitConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteCircuitConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteCircuitConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteCircuitPeering
func (mg *ExpressRouteCircuitPeering) GetTerraformResourceType() string {
	return "azurerm_express_route_circuit_peering"
}

// GetConnectionDetailsMapping for this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"shared_key": "spec.forProvider.sharedKeySecretRef"}
}

// GetObservation of this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteCircuitPeering
func (tr *ExpressRouteCircuitPeering) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteCircuitPeering using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteCircuitPeering) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteCircuitPeeringParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteCircuitPeering) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteConnection
func (mg *ExpressRouteConnection) GetTerraformResourceType() string {
	return "azurerm_express_route_connection"
}

// GetConnectionDetailsMapping for this ExpressRouteConnection
func (tr *ExpressRouteConnection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ExpressRouteConnection
func (tr *ExpressRouteConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteConnection
func (tr *ExpressRouteConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteConnection
func (tr *ExpressRouteConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteConnection
func (tr *ExpressRouteConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteConnection
func (tr *ExpressRouteConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRouteGateway
func (mg *ExpressRouteGateway) GetTerraformResourceType() string {
	return "azurerm_express_route_gateway"
}

// GetConnectionDetailsMapping for this ExpressRouteGateway
func (tr *ExpressRouteGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ExpressRouteGateway
func (tr *ExpressRouteGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRouteGateway
func (tr *ExpressRouteGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRouteGateway
func (tr *ExpressRouteGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRouteGateway
func (tr *ExpressRouteGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRouteGateway
func (tr *ExpressRouteGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRouteGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRouteGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRouteGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRouteGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ExpressRoutePort
func (mg *ExpressRoutePort) GetTerraformResourceType() string {
	return "azurerm_express_route_port"
}

// GetConnectionDetailsMapping for this ExpressRoutePort
func (tr *ExpressRoutePort) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ExpressRoutePort
func (tr *ExpressRoutePort) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ExpressRoutePort
func (tr *ExpressRoutePort) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ExpressRoutePort
func (tr *ExpressRoutePort) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ExpressRoutePort
func (tr *ExpressRoutePort) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ExpressRoutePort
func (tr *ExpressRoutePort) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ExpressRoutePort using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ExpressRoutePort) LateInitialize(attrs []byte) (bool, error) {
	params := &ExpressRoutePortParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ExpressRoutePort) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Firewall
func (mg *Firewall) GetTerraformResourceType() string {
	return "azurerm_firewall"
}

// GetConnectionDetailsMapping for this Firewall
func (tr *Firewall) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Firewall
func (tr *Firewall) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Firewall
func (tr *Firewall) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Firewall
func (tr *Firewall) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Firewall
func (tr *Firewall) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Firewall
func (tr *Firewall) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Firewall using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Firewall) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Firewall) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallApplicationRuleCollection
func (mg *FirewallApplicationRuleCollection) GetTerraformResourceType() string {
	return "azurerm_firewall_application_rule_collection"
}

// GetConnectionDetailsMapping for this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallApplicationRuleCollection
func (tr *FirewallApplicationRuleCollection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallApplicationRuleCollection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallApplicationRuleCollection) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallApplicationRuleCollectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallApplicationRuleCollection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallNATRuleCollection
func (mg *FirewallNATRuleCollection) GetTerraformResourceType() string {
	return "azurerm_firewall_nat_rule_collection"
}

// GetConnectionDetailsMapping for this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallNATRuleCollection
func (tr *FirewallNATRuleCollection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallNATRuleCollection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallNATRuleCollection) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallNATRuleCollectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallNATRuleCollection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallNetworkRuleCollection
func (mg *FirewallNetworkRuleCollection) GetTerraformResourceType() string {
	return "azurerm_firewall_network_rule_collection"
}

// GetConnectionDetailsMapping for this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallNetworkRuleCollection
func (tr *FirewallNetworkRuleCollection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallNetworkRuleCollection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallNetworkRuleCollection) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallNetworkRuleCollectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallNetworkRuleCollection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallPolicy
func (mg *FirewallPolicy) GetTerraformResourceType() string {
	return "azurerm_firewall_policy"
}

// GetConnectionDetailsMapping for this FirewallPolicy
func (tr *FirewallPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallPolicy
func (tr *FirewallPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallPolicy
func (tr *FirewallPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallPolicy
func (tr *FirewallPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallPolicy
func (tr *FirewallPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallPolicy
func (tr *FirewallPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallPolicy) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FirewallPolicyRuleCollectionGroup
func (mg *FirewallPolicyRuleCollectionGroup) GetTerraformResourceType() string {
	return "azurerm_firewall_policy_rule_collection_group"
}

// GetConnectionDetailsMapping for this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FirewallPolicyRuleCollectionGroup
func (tr *FirewallPolicyRuleCollectionGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FirewallPolicyRuleCollectionGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FirewallPolicyRuleCollectionGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &FirewallPolicyRuleCollectionGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FirewallPolicyRuleCollectionGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FrontDoor
func (mg *FrontDoor) GetTerraformResourceType() string {
	return "azurerm_frontdoor"
}

// GetConnectionDetailsMapping for this FrontDoor
func (tr *FrontDoor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FrontDoor
func (tr *FrontDoor) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FrontDoor
func (tr *FrontDoor) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FrontDoor
func (tr *FrontDoor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FrontDoor
func (tr *FrontDoor) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FrontDoor
func (tr *FrontDoor) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FrontDoor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FrontDoor) LateInitialize(attrs []byte) (bool, error) {
	params := &FrontDoorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FrontDoor) GetTerraformSchemaVersion() int {
	return 2
}

// GetTerraformResourceType returns Terraform resource type for this FrontdoorCustomHTTPSConfiguration
func (mg *FrontdoorCustomHTTPSConfiguration) GetTerraformResourceType() string {
	return "azurerm_frontdoor_custom_https_configuration"
}

// GetConnectionDetailsMapping for this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FrontdoorCustomHTTPSConfiguration
func (tr *FrontdoorCustomHTTPSConfiguration) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FrontdoorCustomHTTPSConfiguration using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FrontdoorCustomHTTPSConfiguration) LateInitialize(attrs []byte) (bool, error) {
	params := &FrontdoorCustomHTTPSConfigurationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FrontdoorCustomHTTPSConfiguration) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this FrontdoorFirewallPolicy
func (mg *FrontdoorFirewallPolicy) GetTerraformResourceType() string {
	return "azurerm_frontdoor_firewall_policy"
}

// GetConnectionDetailsMapping for this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FrontdoorFirewallPolicy
func (tr *FrontdoorFirewallPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FrontdoorFirewallPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FrontdoorFirewallPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &FrontdoorFirewallPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FrontdoorFirewallPolicy) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this FrontdoorRulesEngine
func (mg *FrontdoorRulesEngine) GetTerraformResourceType() string {
	return "azurerm_frontdoor_rules_engine"
}

// GetConnectionDetailsMapping for this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FrontdoorRulesEngine
func (tr *FrontdoorRulesEngine) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FrontdoorRulesEngine using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FrontdoorRulesEngine) LateInitialize(attrs []byte) (bool, error) {
	params := &FrontdoorRulesEngineParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FrontdoorRulesEngine) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this LBBackendAddressPool
func (mg *LBBackendAddressPool) GetTerraformResourceType() string {
	return "azurerm_lb_backend_address_pool"
}

// GetConnectionDetailsMapping for this LBBackendAddressPool
func (tr *LBBackendAddressPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBBackendAddressPool
func (tr *LBBackendAddressPool) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBBackendAddressPool
func (tr *LBBackendAddressPool) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBBackendAddressPool
func (tr *LBBackendAddressPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBBackendAddressPool
func (tr *LBBackendAddressPool) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBBackendAddressPool
func (tr *LBBackendAddressPool) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBBackendAddressPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBBackendAddressPool) LateInitialize(attrs []byte) (bool, error) {
	params := &LBBackendAddressPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBBackendAddressPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBBackendAddressPoolAddress
func (mg *LBBackendAddressPoolAddress) GetTerraformResourceType() string {
	return "azurerm_lb_backend_address_pool_address"
}

// GetConnectionDetailsMapping for this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBBackendAddressPoolAddress
func (tr *LBBackendAddressPoolAddress) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBBackendAddressPoolAddress using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBBackendAddressPoolAddress) LateInitialize(attrs []byte) (bool, error) {
	params := &LBBackendAddressPoolAddressParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBBackendAddressPoolAddress) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBNATPool
func (mg *LBNATPool) GetTerraformResourceType() string {
	return "azurerm_lb_nat_pool"
}

// GetConnectionDetailsMapping for this LBNATPool
func (tr *LBNATPool) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBNATPool
func (tr *LBNATPool) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBNATPool
func (tr *LBNATPool) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBNATPool
func (tr *LBNATPool) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBNATPool
func (tr *LBNATPool) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBNATPool
func (tr *LBNATPool) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBNATPool using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBNATPool) LateInitialize(attrs []byte) (bool, error) {
	params := &LBNATPoolParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBNATPool) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBNATRule
func (mg *LBNATRule) GetTerraformResourceType() string {
	return "azurerm_lb_nat_rule"
}

// GetConnectionDetailsMapping for this LBNATRule
func (tr *LBNATRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBNATRule
func (tr *LBNATRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBNATRule
func (tr *LBNATRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBNATRule
func (tr *LBNATRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBNATRule
func (tr *LBNATRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBNATRule
func (tr *LBNATRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBNATRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBNATRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LBNATRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBNATRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBOutboundRule
func (mg *LBOutboundRule) GetTerraformResourceType() string {
	return "azurerm_lb_outbound_rule"
}

// GetConnectionDetailsMapping for this LBOutboundRule
func (tr *LBOutboundRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBOutboundRule
func (tr *LBOutboundRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBOutboundRule
func (tr *LBOutboundRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBOutboundRule
func (tr *LBOutboundRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBOutboundRule
func (tr *LBOutboundRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBOutboundRule
func (tr *LBOutboundRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBOutboundRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBOutboundRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LBOutboundRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBOutboundRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBProbe
func (mg *LBProbe) GetTerraformResourceType() string {
	return "azurerm_lb_probe"
}

// GetConnectionDetailsMapping for this LBProbe
func (tr *LBProbe) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBProbe
func (tr *LBProbe) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBProbe
func (tr *LBProbe) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBProbe
func (tr *LBProbe) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBProbe
func (tr *LBProbe) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBProbe
func (tr *LBProbe) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBProbe using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBProbe) LateInitialize(attrs []byte) (bool, error) {
	params := &LBProbeParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBProbe) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LBRule
func (mg *LBRule) GetTerraformResourceType() string {
	return "azurerm_lb_rule"
}

// GetConnectionDetailsMapping for this LBRule
func (tr *LBRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LBRule
func (tr *LBRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LBRule
func (tr *LBRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LBRule
func (tr *LBRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LBRule
func (tr *LBRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LBRule
func (tr *LBRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LBRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LBRule) LateInitialize(attrs []byte) (bool, error) {
	params := &LBRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LBRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this LocalNetworkGateway
func (mg *LocalNetworkGateway) GetTerraformResourceType() string {
	return "azurerm_local_network_gateway"
}

// GetConnectionDetailsMapping for this LocalNetworkGateway
func (tr *LocalNetworkGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this LocalNetworkGateway
func (tr *LocalNetworkGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this LocalNetworkGateway
func (tr *LocalNetworkGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this LocalNetworkGateway
func (tr *LocalNetworkGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this LocalNetworkGateway
func (tr *LocalNetworkGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this LocalNetworkGateway
func (tr *LocalNetworkGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this LocalNetworkGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *LocalNetworkGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &LocalNetworkGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *LocalNetworkGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NATGateway
func (mg *NATGateway) GetTerraformResourceType() string {
	return "azurerm_nat_gateway"
}

// GetConnectionDetailsMapping for this NATGateway
func (tr *NATGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NATGateway
func (tr *NATGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NATGateway
func (tr *NATGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NATGateway
func (tr *NATGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NATGateway
func (tr *NATGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NATGateway
func (tr *NATGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NATGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NATGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &NATGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NATGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NATGatewayPublicIPAssociation
func (mg *NATGatewayPublicIPAssociation) GetTerraformResourceType() string {
	return "azurerm_nat_gateway_public_ip_association"
}

// GetConnectionDetailsMapping for this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NATGatewayPublicIPAssociation
func (tr *NATGatewayPublicIPAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NATGatewayPublicIPAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NATGatewayPublicIPAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &NATGatewayPublicIPAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NATGatewayPublicIPAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NATGatewayPublicIPPrefixAssociation
func (mg *NATGatewayPublicIPPrefixAssociation) GetTerraformResourceType() string {
	return "azurerm_nat_gateway_public_ip_prefix_association"
}

// GetConnectionDetailsMapping for this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NATGatewayPublicIPPrefixAssociation
func (tr *NATGatewayPublicIPPrefixAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NATGatewayPublicIPPrefixAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NATGatewayPublicIPPrefixAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &NATGatewayPublicIPPrefixAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NATGatewayPublicIPPrefixAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ConnectionMonitor
func (mg *ConnectionMonitor) GetTerraformResourceType() string {
	return "azurerm_network_connection_monitor"
}

// GetConnectionDetailsMapping for this ConnectionMonitor
func (tr *ConnectionMonitor) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ConnectionMonitor
func (tr *ConnectionMonitor) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ConnectionMonitor
func (tr *ConnectionMonitor) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ConnectionMonitor
func (tr *ConnectionMonitor) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ConnectionMonitor
func (tr *ConnectionMonitor) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ConnectionMonitor
func (tr *ConnectionMonitor) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ConnectionMonitor using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ConnectionMonitor) LateInitialize(attrs []byte) (bool, error) {
	params := &ConnectionMonitorParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ConnectionMonitor) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this DDOSProtectionPlan
func (mg *DDOSProtectionPlan) GetTerraformResourceType() string {
	return "azurerm_network_ddos_protection_plan"
}

// GetConnectionDetailsMapping for this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this DDOSProtectionPlan
func (tr *DDOSProtectionPlan) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this DDOSProtectionPlan using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *DDOSProtectionPlan) LateInitialize(attrs []byte) (bool, error) {
	params := &DDOSProtectionPlanParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *DDOSProtectionPlan) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InterfaceApplicationSecurityGroupAssociation
func (mg *InterfaceApplicationSecurityGroupAssociation) GetTerraformResourceType() string {
	return "azurerm_network_interface_application_security_group_association"
}

// GetConnectionDetailsMapping for this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InterfaceApplicationSecurityGroupAssociation
func (tr *InterfaceApplicationSecurityGroupAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InterfaceApplicationSecurityGroupAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InterfaceApplicationSecurityGroupAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &InterfaceApplicationSecurityGroupAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InterfaceApplicationSecurityGroupAssociation) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this InterfaceBackendAddressPoolAssociation
func (mg *InterfaceBackendAddressPoolAssociation) GetTerraformResourceType() string {
	return "azurerm_network_interface_backend_address_pool_association"
}

// GetConnectionDetailsMapping for this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InterfaceBackendAddressPoolAssociation
func (tr *InterfaceBackendAddressPoolAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InterfaceBackendAddressPoolAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InterfaceBackendAddressPoolAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &InterfaceBackendAddressPoolAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InterfaceBackendAddressPoolAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InterfaceNATRuleAssociation
func (mg *InterfaceNATRuleAssociation) GetTerraformResourceType() string {
	return "azurerm_network_interface_nat_rule_association"
}

// GetConnectionDetailsMapping for this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InterfaceNATRuleAssociation
func (tr *InterfaceNATRuleAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InterfaceNATRuleAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InterfaceNATRuleAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &InterfaceNATRuleAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InterfaceNATRuleAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InterfaceSecurityGroupAssociation
func (mg *InterfaceSecurityGroupAssociation) GetTerraformResourceType() string {
	return "azurerm_network_interface_security_group_association"
}

// GetConnectionDetailsMapping for this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InterfaceSecurityGroupAssociation
func (tr *InterfaceSecurityGroupAssociation) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InterfaceSecurityGroupAssociation using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InterfaceSecurityGroupAssociation) LateInitialize(attrs []byte) (bool, error) {
	params := &InterfaceSecurityGroupAssociationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InterfaceSecurityGroupAssociation) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this NetworkPacketCapture
func (mg *NetworkPacketCapture) GetTerraformResourceType() string {
	return "azurerm_network_packet_capture"
}

// GetConnectionDetailsMapping for this NetworkPacketCapture
func (tr *NetworkPacketCapture) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this NetworkPacketCapture
func (tr *NetworkPacketCapture) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this NetworkPacketCapture
func (tr *NetworkPacketCapture) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this NetworkPacketCapture
func (tr *NetworkPacketCapture) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this NetworkPacketCapture
func (tr *NetworkPacketCapture) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this NetworkPacketCapture
func (tr *NetworkPacketCapture) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this NetworkPacketCapture using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *NetworkPacketCapture) LateInitialize(attrs []byte) (bool, error) {
	params := &NetworkPacketCaptureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *NetworkPacketCapture) GetTerraformSchemaVersion() int {
	return 1
}

// GetTerraformResourceType returns Terraform resource type for this Profile
func (mg *Profile) GetTerraformResourceType() string {
	return "azurerm_network_profile"
}

// GetConnectionDetailsMapping for this Profile
func (tr *Profile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Profile
func (tr *Profile) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Profile
func (tr *Profile) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Profile
func (tr *Profile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Profile
func (tr *Profile) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Profile
func (tr *Profile) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Profile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Profile) LateInitialize(attrs []byte) (bool, error) {
	params := &ProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Profile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SecurityGroup
func (mg *SecurityGroup) GetTerraformResourceType() string {
	return "azurerm_network_security_group"
}

// GetConnectionDetailsMapping for this SecurityGroup
func (tr *SecurityGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this SecurityGroup
func (tr *SecurityGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SecurityGroup
func (tr *SecurityGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SecurityGroup
func (tr *SecurityGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SecurityGroup
func (tr *SecurityGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SecurityGroup
func (tr *SecurityGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SecurityGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SecurityGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &SecurityGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SecurityGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this Watcher
func (mg *Watcher) GetTerraformResourceType() string {
	return "azurerm_network_watcher"
}

// GetConnectionDetailsMapping for this Watcher
func (tr *Watcher) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this Watcher
func (tr *Watcher) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this Watcher
func (tr *Watcher) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this Watcher
func (tr *Watcher) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this Watcher
func (tr *Watcher) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this Watcher
func (tr *Watcher) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this Watcher using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *Watcher) LateInitialize(attrs []byte) (bool, error) {
	params := &WatcherParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *Watcher) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WatcherFlowLog
func (mg *WatcherFlowLog) GetTerraformResourceType() string {
	return "azurerm_network_watcher_flow_log"
}

// GetConnectionDetailsMapping for this WatcherFlowLog
func (tr *WatcherFlowLog) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WatcherFlowLog
func (tr *WatcherFlowLog) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WatcherFlowLog
func (tr *WatcherFlowLog) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WatcherFlowLog
func (tr *WatcherFlowLog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WatcherFlowLog
func (tr *WatcherFlowLog) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WatcherFlowLog
func (tr *WatcherFlowLog) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WatcherFlowLog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WatcherFlowLog) LateInitialize(attrs []byte) (bool, error) {
	params := &WatcherFlowLogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WatcherFlowLog) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PacketCapture
func (mg *PacketCapture) GetTerraformResourceType() string {
	return "azurerm_packet_capture"
}

// GetConnectionDetailsMapping for this PacketCapture
func (tr *PacketCapture) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PacketCapture
func (tr *PacketCapture) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PacketCapture
func (tr *PacketCapture) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PacketCapture
func (tr *PacketCapture) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PacketCapture
func (tr *PacketCapture) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PacketCapture
func (tr *PacketCapture) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PacketCapture using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PacketCapture) LateInitialize(attrs []byte) (bool, error) {
	params := &PacketCaptureParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PacketCapture) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PointToSiteVPNGateway
func (mg *PointToSiteVPNGateway) GetTerraformResourceType() string {
	return "azurerm_point_to_site_vpn_gateway"
}

// GetConnectionDetailsMapping for this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PointToSiteVPNGateway
func (tr *PointToSiteVPNGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PointToSiteVPNGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PointToSiteVPNGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &PointToSiteVPNGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PointToSiteVPNGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSARecord
func (mg *PrivateDNSARecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_a_record"
}

// GetConnectionDetailsMapping for this PrivateDNSARecord
func (tr *PrivateDNSARecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSARecord
func (tr *PrivateDNSARecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSARecord
func (tr *PrivateDNSARecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSARecord
func (tr *PrivateDNSARecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSARecord
func (tr *PrivateDNSARecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSARecord
func (tr *PrivateDNSARecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSARecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSARecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSARecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSARecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSAAAARecord
func (mg *PrivateDNSAAAARecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_aaaa_record"
}

// GetConnectionDetailsMapping for this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSAAAARecord
func (tr *PrivateDNSAAAARecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSAAAARecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSAAAARecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSAAAARecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSAAAARecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSCNAMERecord
func (mg *PrivateDNSCNAMERecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_cname_record"
}

// GetConnectionDetailsMapping for this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSCNAMERecord
func (tr *PrivateDNSCNAMERecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSCNAMERecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSCNAMERecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSCNAMERecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSCNAMERecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSMXRecord
func (mg *PrivateDNSMXRecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_mx_record"
}

// GetConnectionDetailsMapping for this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSMXRecord
func (tr *PrivateDNSMXRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSMXRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSMXRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSMXRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSMXRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSPTRRecord
func (mg *PrivateDNSPTRRecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_ptr_record"
}

// GetConnectionDetailsMapping for this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSPTRRecord
func (tr *PrivateDNSPTRRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSPTRRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSPTRRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSPTRRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSPTRRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSSRVRecord
func (mg *PrivateDNSSRVRecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_srv_record"
}

// GetConnectionDetailsMapping for this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSSRVRecord
func (tr *PrivateDNSSRVRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSSRVRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSSRVRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSSRVRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSSRVRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSTXTRecord
func (mg *PrivateDNSTXTRecord) GetTerraformResourceType() string {
	return "azurerm_private_dns_txt_record"
}

// GetConnectionDetailsMapping for this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSTXTRecord
func (tr *PrivateDNSTXTRecord) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSTXTRecord using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSTXTRecord) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSTXTRecordParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSTXTRecord) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSZone
func (mg *PrivateDNSZone) GetTerraformResourceType() string {
	return "azurerm_private_dns_zone"
}

// GetConnectionDetailsMapping for this PrivateDNSZone
func (tr *PrivateDNSZone) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSZone
func (tr *PrivateDNSZone) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSZone
func (tr *PrivateDNSZone) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSZone
func (tr *PrivateDNSZone) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSZone
func (tr *PrivateDNSZone) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSZone
func (tr *PrivateDNSZone) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSZone using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSZone) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSZoneParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSZone) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateDNSZoneVirtualNetworkLink
func (mg *PrivateDNSZoneVirtualNetworkLink) GetTerraformResourceType() string {
	return "azurerm_private_dns_zone_virtual_network_link"
}

// GetConnectionDetailsMapping for this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateDNSZoneVirtualNetworkLink
func (tr *PrivateDNSZoneVirtualNetworkLink) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateDNSZoneVirtualNetworkLink using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateDNSZoneVirtualNetworkLink) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateDNSZoneVirtualNetworkLinkParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateDNSZoneVirtualNetworkLink) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateEndpoint
func (mg *PrivateEndpoint) GetTerraformResourceType() string {
	return "azurerm_private_endpoint"
}

// GetConnectionDetailsMapping for this PrivateEndpoint
func (tr *PrivateEndpoint) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateEndpoint
func (tr *PrivateEndpoint) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateEndpoint
func (tr *PrivateEndpoint) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateEndpoint
func (tr *PrivateEndpoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateEndpoint
func (tr *PrivateEndpoint) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateEndpoint
func (tr *PrivateEndpoint) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateEndpoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateEndpoint) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateEndpointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateEndpoint) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PrivateLinkService
func (mg *PrivateLinkService) GetTerraformResourceType() string {
	return "azurerm_private_link_service"
}

// GetConnectionDetailsMapping for this PrivateLinkService
func (tr *PrivateLinkService) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PrivateLinkService
func (tr *PrivateLinkService) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PrivateLinkService
func (tr *PrivateLinkService) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PrivateLinkService
func (tr *PrivateLinkService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PrivateLinkService
func (tr *PrivateLinkService) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PrivateLinkService
func (tr *PrivateLinkService) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PrivateLinkService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PrivateLinkService) LateInitialize(attrs []byte) (bool, error) {
	params := &PrivateLinkServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PrivateLinkService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this PublicIPPrefix
func (mg *PublicIPPrefix) GetTerraformResourceType() string {
	return "azurerm_public_ip_prefix"
}

// GetConnectionDetailsMapping for this PublicIPPrefix
func (tr *PublicIPPrefix) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this PublicIPPrefix
func (tr *PublicIPPrefix) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this PublicIPPrefix
func (tr *PublicIPPrefix) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this PublicIPPrefix
func (tr *PublicIPPrefix) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this PublicIPPrefix
func (tr *PublicIPPrefix) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this PublicIPPrefix
func (tr *PublicIPPrefix) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this PublicIPPrefix using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *PublicIPPrefix) LateInitialize(attrs []byte) (bool, error) {
	params := &PublicIPPrefixParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *PublicIPPrefix) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TrafficManagerEndpoint
func (mg *TrafficManagerEndpoint) GetTerraformResourceType() string {
	return "azurerm_traffic_manager_endpoint"
}

// GetConnectionDetailsMapping for this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TrafficManagerEndpoint
func (tr *TrafficManagerEndpoint) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TrafficManagerEndpoint using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TrafficManagerEndpoint) LateInitialize(attrs []byte) (bool, error) {
	params := &TrafficManagerEndpointParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TrafficManagerEndpoint) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this TrafficManagerProfile
func (mg *TrafficManagerProfile) GetTerraformResourceType() string {
	return "azurerm_traffic_manager_profile"
}

// GetConnectionDetailsMapping for this TrafficManagerProfile
func (tr *TrafficManagerProfile) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this TrafficManagerProfile
func (tr *TrafficManagerProfile) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this TrafficManagerProfile
func (tr *TrafficManagerProfile) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this TrafficManagerProfile
func (tr *TrafficManagerProfile) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this TrafficManagerProfile
func (tr *TrafficManagerProfile) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this TrafficManagerProfile
func (tr *TrafficManagerProfile) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this TrafficManagerProfile using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *TrafficManagerProfile) LateInitialize(attrs []byte) (bool, error) {
	params := &TrafficManagerProfileParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *TrafficManagerProfile) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VPNGateway
func (mg *VPNGateway) GetTerraformResourceType() string {
	return "azurerm_vpn_gateway"
}

// GetConnectionDetailsMapping for this VPNGateway
func (tr *VPNGateway) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VPNGateway
func (tr *VPNGateway) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VPNGateway
func (tr *VPNGateway) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VPNGateway
func (tr *VPNGateway) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VPNGateway
func (tr *VPNGateway) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VPNGateway
func (tr *VPNGateway) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VPNGateway using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VPNGateway) LateInitialize(attrs []byte) (bool, error) {
	params := &VPNGatewayParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VPNGateway) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VPNGatewayConnection
func (mg *VPNGatewayConnection) GetTerraformResourceType() string {
	return "azurerm_vpn_gateway_connection"
}

// GetConnectionDetailsMapping for this VPNGatewayConnection
func (tr *VPNGatewayConnection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VPNGatewayConnection
func (tr *VPNGatewayConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VPNGatewayConnection
func (tr *VPNGatewayConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VPNGatewayConnection
func (tr *VPNGatewayConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VPNGatewayConnection
func (tr *VPNGatewayConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VPNGatewayConnection
func (tr *VPNGatewayConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VPNGatewayConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VPNGatewayConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &VPNGatewayConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VPNGatewayConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VPNServerConfiguration
func (mg *VPNServerConfiguration) GetTerraformResourceType() string {
	return "azurerm_vpn_server_configuration"
}

// GetConnectionDetailsMapping for this VPNServerConfiguration
func (tr *VPNServerConfiguration) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"radius[*].server[*].secret": "spec.forProvider.radius[*].server[*].secretSecretRef", "radius_server[*].secret": "spec.forProvider.radiusServer[*].secretSecretRef"}
}

// GetObservation of this VPNServerConfiguration
func (tr *VPNServerConfiguration) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VPNServerConfiguration
func (tr *VPNServerConfiguration) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VPNServerConfiguration
func (tr *VPNServerConfiguration) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VPNServerConfiguration
func (tr *VPNServerConfiguration) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VPNServerConfiguration
func (tr *VPNServerConfiguration) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VPNServerConfiguration using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VPNServerConfiguration) LateInitialize(attrs []byte) (bool, error) {
	params := &VPNServerConfigurationParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VPNServerConfiguration) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this VPNSite
func (mg *VPNSite) GetTerraformResourceType() string {
	return "azurerm_vpn_site"
}

// GetConnectionDetailsMapping for this VPNSite
func (tr *VPNSite) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this VPNSite
func (tr *VPNSite) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this VPNSite
func (tr *VPNSite) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this VPNSite
func (tr *VPNSite) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this VPNSite
func (tr *VPNSite) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this VPNSite
func (tr *VPNSite) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this VPNSite using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *VPNSite) LateInitialize(attrs []byte) (bool, error) {
	params := &VPNSiteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *VPNSite) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this WebApplicationFirewallPolicy
func (mg *WebApplicationFirewallPolicy) GetTerraformResourceType() string {
	return "azurerm_web_application_firewall_policy"
}

// GetConnectionDetailsMapping for this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this WebApplicationFirewallPolicy
func (tr *WebApplicationFirewallPolicy) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this WebApplicationFirewallPolicy using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *WebApplicationFirewallPolicy) LateInitialize(attrs []byte) (bool, error) {
	params := &WebApplicationFirewallPolicyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *WebApplicationFirewallPolicy) GetTerraformSchemaVersion() int {
	return 0
}
