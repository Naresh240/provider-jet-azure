/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpsecPolicyObservation struct {
}

type IpsecPolicyParameters struct {

	// +kubebuilder:validation:Required
	DhGroup *string `json:"dhGroup" tf:"dh_group,omitempty"`

	// +kubebuilder:validation:Required
	EncryptionAlgorithm *string `json:"encryptionAlgorithm" tf:"encryption_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	IkeEncryptionAlgorithm *string `json:"ikeEncryptionAlgorithm" tf:"ike_encryption_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	IkeIntegrityAlgorithm *string `json:"ikeIntegrityAlgorithm" tf:"ike_integrity_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	IntegrityAlgorithm *string `json:"integrityAlgorithm" tf:"integrity_algorithm,omitempty"`

	// +kubebuilder:validation:Required
	PfsGroup *string `json:"pfsGroup" tf:"pfs_group,omitempty"`

	// +kubebuilder:validation:Required
	SaDataSizeKb *float64 `json:"saDataSizeKb" tf:"sa_data_size_kb,omitempty"`

	// +kubebuilder:validation:Required
	SaLifetimeSec *float64 `json:"saLifetimeSec" tf:"sa_lifetime_sec,omitempty"`
}

type VPNGatewayConnectionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VPNGatewayConnectionParameters struct {

	// +kubebuilder:validation:Optional
	InternetSecurityEnabled *bool `json:"internetSecurityEnabled,omitempty" tf:"internet_security_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RemoteVPNSiteID *string `json:"remoteVpnSiteId" tf:"remote_vpn_site_id,omitempty"`

	// +kubebuilder:validation:Optional
	Routing []VPNGatewayConnectionRoutingParameters `json:"routing,omitempty" tf:"routing,omitempty"`

	// +kubebuilder:validation:Required
	VPNGatewayID *string `json:"vpnGatewayId" tf:"vpn_gateway_id,omitempty"`

	// +kubebuilder:validation:Required
	VPNLink []VPNLinkParameters `json:"vpnLink" tf:"vpn_link,omitempty"`
}

type VPNGatewayConnectionRoutingObservation struct {
}

type VPNGatewayConnectionRoutingParameters struct {

	// +kubebuilder:validation:Required
	AssociatedRouteTable *string `json:"associatedRouteTable" tf:"associated_route_table,omitempty"`

	// +kubebuilder:validation:Required
	PropagatedRouteTables []*string `json:"propagatedRouteTables" tf:"propagated_route_tables,omitempty"`
}

type VPNLinkObservation struct {
}

type VPNLinkParameters struct {

	// +kubebuilder:validation:Optional
	BGPEnabled *bool `json:"bgpEnabled,omitempty" tf:"bgp_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	BandwidthMbps *float64 `json:"bandwidthMbps,omitempty" tf:"bandwidth_mbps,omitempty"`

	// +kubebuilder:validation:Optional
	IpsecPolicy []IpsecPolicyParameters `json:"ipsecPolicy,omitempty" tf:"ipsec_policy,omitempty"`

	// +kubebuilder:validation:Optional
	LocalAzureIPAddressEnabled *bool `json:"localAzureIpAddressEnabled,omitempty" tf:"local_azure_ip_address_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyBasedTrafficSelectorEnabled *bool `json:"policyBasedTrafficSelectorEnabled,omitempty" tf:"policy_based_traffic_selector_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	RatelimitEnabled *bool `json:"ratelimitEnabled,omitempty" tf:"ratelimit_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	RouteWeight *float64 `json:"routeWeight,omitempty" tf:"route_weight,omitempty"`

	// +kubebuilder:validation:Optional
	SharedKey *string `json:"sharedKey,omitempty" tf:"shared_key,omitempty"`

	// +kubebuilder:validation:Required
	VPNSiteLinkID *string `json:"vpnSiteLinkId" tf:"vpn_site_link_id,omitempty"`
}

// VPNGatewayConnectionSpec defines the desired state of VPNGatewayConnection
type VPNGatewayConnectionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VPNGatewayConnectionParameters `json:"forProvider"`
}

// VPNGatewayConnectionStatus defines the observed state of VPNGatewayConnection.
type VPNGatewayConnectionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VPNGatewayConnectionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayConnection is the Schema for the VPNGatewayConnections API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VPNGatewayConnection struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VPNGatewayConnectionSpec   `json:"spec"`
	Status            VPNGatewayConnectionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VPNGatewayConnectionList contains a list of VPNGatewayConnections
type VPNGatewayConnectionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VPNGatewayConnection `json:"items"`
}

// Repository type metadata.
var (
	VPNGatewayConnection_Kind             = "VPNGatewayConnection"
	VPNGatewayConnection_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VPNGatewayConnection_Kind}.String()
	VPNGatewayConnection_KindAPIVersion   = VPNGatewayConnection_Kind + "." + CRDGroupVersion.String()
	VPNGatewayConnection_GroupVersionKind = CRDGroupVersion.WithKind(VPNGatewayConnection_Kind)
)

func init() {
	SchemeBuilder.Register(&VPNGatewayConnection{}, &VPNGatewayConnectionList{})
}
