/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LBBackendAddressPoolAddressObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type LBBackendAddressPoolAddressParameters struct {

	// +kubebuilder:validation:Required
	BackendAddressPoolID *string `json:"backendAddressPoolId" tf:"backend_address_pool_id,omitempty"`

	// +kubebuilder:validation:Required
	IPAddress *string `json:"ipAddress" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	VirtualNetworkID *string `json:"virtualNetworkId" tf:"virtual_network_id,omitempty"`
}

// LBBackendAddressPoolAddressSpec defines the desired state of LBBackendAddressPoolAddress
type LBBackendAddressPoolAddressSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LBBackendAddressPoolAddressParameters `json:"forProvider"`
}

// LBBackendAddressPoolAddressStatus defines the observed state of LBBackendAddressPoolAddress.
type LBBackendAddressPoolAddressStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LBBackendAddressPoolAddressObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LBBackendAddressPoolAddress is the Schema for the LBBackendAddressPoolAddresss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type LBBackendAddressPoolAddress struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LBBackendAddressPoolAddressSpec   `json:"spec"`
	Status            LBBackendAddressPoolAddressStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LBBackendAddressPoolAddressList contains a list of LBBackendAddressPoolAddresss
type LBBackendAddressPoolAddressList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LBBackendAddressPoolAddress `json:"items"`
}

// Repository type metadata.
var (
	LBBackendAddressPoolAddress_Kind             = "LBBackendAddressPoolAddress"
	LBBackendAddressPoolAddress_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LBBackendAddressPoolAddress_Kind}.String()
	LBBackendAddressPoolAddress_KindAPIVersion   = LBBackendAddressPoolAddress_Kind + "." + CRDGroupVersion.String()
	LBBackendAddressPoolAddress_GroupVersionKind = CRDGroupVersion.WithKind(LBBackendAddressPoolAddress_Kind)
)

func init() {
	SchemeBuilder.Register(&LBBackendAddressPoolAddress{}, &LBBackendAddressPoolAddressList{})
}
