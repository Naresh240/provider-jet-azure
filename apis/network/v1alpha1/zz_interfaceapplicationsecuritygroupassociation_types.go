/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceApplicationSecurityGroupAssociationObservation struct {
}

type InterfaceApplicationSecurityGroupAssociationParameters struct {

	// +kubebuilder:validation:Required
	ApplicationSecurityGroupID *string `json:"applicationSecurityGroupId" tf:"application_security_group_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`
}

// InterfaceApplicationSecurityGroupAssociationSpec defines the desired state of InterfaceApplicationSecurityGroupAssociation
type InterfaceApplicationSecurityGroupAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceApplicationSecurityGroupAssociationParameters `json:"forProvider"`
}

// InterfaceApplicationSecurityGroupAssociationStatus defines the observed state of InterfaceApplicationSecurityGroupAssociation.
type InterfaceApplicationSecurityGroupAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceApplicationSecurityGroupAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceApplicationSecurityGroupAssociation is the Schema for the InterfaceApplicationSecurityGroupAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type InterfaceApplicationSecurityGroupAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceApplicationSecurityGroupAssociationSpec   `json:"spec"`
	Status            InterfaceApplicationSecurityGroupAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceApplicationSecurityGroupAssociationList contains a list of InterfaceApplicationSecurityGroupAssociations
type InterfaceApplicationSecurityGroupAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceApplicationSecurityGroupAssociation `json:"items"`
}

// Repository type metadata.
var (
	InterfaceApplicationSecurityGroupAssociation_Kind             = "InterfaceApplicationSecurityGroupAssociation"
	InterfaceApplicationSecurityGroupAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceApplicationSecurityGroupAssociation_Kind}.String()
	InterfaceApplicationSecurityGroupAssociation_KindAPIVersion   = InterfaceApplicationSecurityGroupAssociation_Kind + "." + CRDGroupVersion.String()
	InterfaceApplicationSecurityGroupAssociation_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceApplicationSecurityGroupAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceApplicationSecurityGroupAssociation{}, &InterfaceApplicationSecurityGroupAssociationList{})
}
