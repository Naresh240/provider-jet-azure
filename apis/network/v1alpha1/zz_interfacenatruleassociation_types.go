/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type InterfaceNatRuleAssociationObservation struct {
}

type InterfaceNatRuleAssociationParameters struct {

	// +kubebuilder:validation:Required
	IPConfigurationName *string `json:"ipConfigurationName" tf:"ip_configuration_name,omitempty"`

	// +kubebuilder:validation:Required
	NatRuleID *string `json:"natRuleId" tf:"nat_rule_id,omitempty"`

	// +kubebuilder:validation:Required
	NetworkInterfaceID *string `json:"networkInterfaceId" tf:"network_interface_id,omitempty"`
}

// InterfaceNatRuleAssociationSpec defines the desired state of InterfaceNatRuleAssociation
type InterfaceNatRuleAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     InterfaceNatRuleAssociationParameters `json:"forProvider"`
}

// InterfaceNatRuleAssociationStatus defines the observed state of InterfaceNatRuleAssociation.
type InterfaceNatRuleAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        InterfaceNatRuleAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceNatRuleAssociation is the Schema for the InterfaceNatRuleAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type InterfaceNatRuleAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              InterfaceNatRuleAssociationSpec   `json:"spec"`
	Status            InterfaceNatRuleAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// InterfaceNatRuleAssociationList contains a list of InterfaceNatRuleAssociations
type InterfaceNatRuleAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []InterfaceNatRuleAssociation `json:"items"`
}

// Repository type metadata.
var (
	InterfaceNatRuleAssociation_Kind             = "InterfaceNatRuleAssociation"
	InterfaceNatRuleAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: InterfaceNatRuleAssociation_Kind}.String()
	InterfaceNatRuleAssociation_KindAPIVersion   = InterfaceNatRuleAssociation_Kind + "." + CRDGroupVersion.String()
	InterfaceNatRuleAssociation_GroupVersionKind = CRDGroupVersion.WithKind(InterfaceNatRuleAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&InterfaceNatRuleAssociation{}, &InterfaceNatRuleAssociationList{})
}
