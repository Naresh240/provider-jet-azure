/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CenterAutoProvisioningObservation struct {
}

type CenterAutoProvisioningParameters struct {

	// +kubebuilder:validation:Required
	AutoProvision *string `json:"autoProvision" tf:"auto_provision,omitempty"`
}

// CenterAutoProvisioningSpec defines the desired state of CenterAutoProvisioning
type CenterAutoProvisioningSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CenterAutoProvisioningParameters `json:"forProvider"`
}

// CenterAutoProvisioningStatus defines the observed state of CenterAutoProvisioning.
type CenterAutoProvisioningStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CenterAutoProvisioningObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CenterAutoProvisioning is the Schema for the CenterAutoProvisionings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CenterAutoProvisioning struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CenterAutoProvisioningSpec   `json:"spec"`
	Status            CenterAutoProvisioningStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CenterAutoProvisioningList contains a list of CenterAutoProvisionings
type CenterAutoProvisioningList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CenterAutoProvisioning `json:"items"`
}

// Repository type metadata.
var (
	CenterAutoProvisioning_Kind             = "CenterAutoProvisioning"
	CenterAutoProvisioning_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CenterAutoProvisioning_Kind}.String()
	CenterAutoProvisioning_KindAPIVersion   = CenterAutoProvisioning_Kind + "." + CRDGroupVersion.String()
	CenterAutoProvisioning_GroupVersionKind = CRDGroupVersion.WithKind(CenterAutoProvisioning_Kind)
)

func init() {
	SchemeBuilder.Register(&CenterAutoProvisioning{}, &CenterAutoProvisioningList{})
}
