/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CenterAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CenterAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalData map[string]*string `json:"additionalData,omitempty" tf:"additional_data,omitempty"`

	// +kubebuilder:validation:Required
	AssessmentPolicyID *string `json:"assessmentPolicyId" tf:"assessment_policy_id,omitempty"`

	// +kubebuilder:validation:Required
	Status []StatusParameters `json:"status" tf:"status,omitempty"`

	// +kubebuilder:validation:Required
	TargetResourceID *string `json:"targetResourceId" tf:"target_resource_id,omitempty"`
}

type StatusObservation struct {
}

type StatusParameters struct {

	// +kubebuilder:validation:Optional
	Cause *string `json:"cause,omitempty" tf:"cause,omitempty"`

	// +kubebuilder:validation:Required
	Code *string `json:"code" tf:"code,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`
}

// CenterAssessmentSpec defines the desired state of CenterAssessment
type CenterAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CenterAssessmentParameters `json:"forProvider"`
}

// CenterAssessmentStatus defines the observed state of CenterAssessment.
type CenterAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CenterAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CenterAssessment is the Schema for the CenterAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CenterAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CenterAssessmentSpec   `json:"spec"`
	Status            CenterAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CenterAssessmentList contains a list of CenterAssessments
type CenterAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CenterAssessment `json:"items"`
}

// Repository type metadata.
var (
	CenterAssessment_Kind             = "CenterAssessment"
	CenterAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CenterAssessment_Kind}.String()
	CenterAssessment_KindAPIVersion   = CenterAssessment_Kind + "." + CRDGroupVersion.String()
	CenterAssessment_GroupVersionKind = CRDGroupVersion.WithKind(CenterAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&CenterAssessment{}, &CenterAssessmentList{})
}
