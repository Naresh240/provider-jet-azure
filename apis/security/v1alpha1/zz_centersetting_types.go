/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CenterSettingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CenterSettingParameters struct {

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	SettingName *string `json:"settingName" tf:"setting_name,omitempty"`
}

// CenterSettingSpec defines the desired state of CenterSetting
type CenterSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CenterSettingParameters `json:"forProvider"`
}

// CenterSettingStatus defines the observed state of CenterSetting.
type CenterSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CenterSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CenterSetting is the Schema for the CenterSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CenterSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CenterSettingSpec   `json:"spec"`
	Status            CenterSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CenterSettingList contains a list of CenterSettings
type CenterSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CenterSetting `json:"items"`
}

// Repository type metadata.
var (
	CenterSetting_Kind             = "CenterSetting"
	CenterSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CenterSetting_Kind}.String()
	CenterSetting_KindAPIVersion   = CenterSetting_Kind + "." + CRDGroupVersion.String()
	CenterSetting_GroupVersionKind = CRDGroupVersion.WithKind(CenterSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&CenterSetting{}, &CenterSettingList{})
}
