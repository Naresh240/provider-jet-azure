/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecurityCenterServerVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecurityCenterServerVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	HybridMachineID *string `json:"hybridMachineId,omitempty" tf:"hybrid_machine_id,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// SecurityCenterServerVulnerabilityAssessmentSpec defines the desired state of SecurityCenterServerVulnerabilityAssessment
type SecurityCenterServerVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityCenterServerVulnerabilityAssessmentParameters `json:"forProvider"`
}

// SecurityCenterServerVulnerabilityAssessmentStatus defines the observed state of SecurityCenterServerVulnerabilityAssessment.
type SecurityCenterServerVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityCenterServerVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterServerVulnerabilityAssessment is the Schema for the SecurityCenterServerVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SecurityCenterServerVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecurityCenterServerVulnerabilityAssessmentSpec   `json:"spec"`
	Status            SecurityCenterServerVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityCenterServerVulnerabilityAssessmentList contains a list of SecurityCenterServerVulnerabilityAssessments
type SecurityCenterServerVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityCenterServerVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	SecurityCenterServerVulnerabilityAssessment_Kind             = "SecurityCenterServerVulnerabilityAssessment"
	SecurityCenterServerVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityCenterServerVulnerabilityAssessment_Kind}.String()
	SecurityCenterServerVulnerabilityAssessment_KindAPIVersion   = SecurityCenterServerVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	SecurityCenterServerVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(SecurityCenterServerVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityCenterServerVulnerabilityAssessment{}, &SecurityCenterServerVulnerabilityAssessmentList{})
}
