/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CenterServerVulnerabilityAssessmentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type CenterServerVulnerabilityAssessmentParameters struct {

	// +kubebuilder:validation:Optional
	HybridMachineID *string `json:"hybridMachineId,omitempty" tf:"hybrid_machine_id,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualMachineID *string `json:"virtualMachineId,omitempty" tf:"virtual_machine_id,omitempty"`
}

// CenterServerVulnerabilityAssessmentSpec defines the desired state of CenterServerVulnerabilityAssessment
type CenterServerVulnerabilityAssessmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CenterServerVulnerabilityAssessmentParameters `json:"forProvider"`
}

// CenterServerVulnerabilityAssessmentStatus defines the observed state of CenterServerVulnerabilityAssessment.
type CenterServerVulnerabilityAssessmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CenterServerVulnerabilityAssessmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CenterServerVulnerabilityAssessment is the Schema for the CenterServerVulnerabilityAssessments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CenterServerVulnerabilityAssessment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CenterServerVulnerabilityAssessmentSpec   `json:"spec"`
	Status            CenterServerVulnerabilityAssessmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CenterServerVulnerabilityAssessmentList contains a list of CenterServerVulnerabilityAssessments
type CenterServerVulnerabilityAssessmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CenterServerVulnerabilityAssessment `json:"items"`
}

// Repository type metadata.
var (
	CenterServerVulnerabilityAssessment_Kind             = "CenterServerVulnerabilityAssessment"
	CenterServerVulnerabilityAssessment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CenterServerVulnerabilityAssessment_Kind}.String()
	CenterServerVulnerabilityAssessment_KindAPIVersion   = CenterServerVulnerabilityAssessment_Kind + "." + CRDGroupVersion.String()
	CenterServerVulnerabilityAssessment_GroupVersionKind = CRDGroupVersion.WithKind(CenterServerVulnerabilityAssessment_Kind)
)

func init() {
	SchemeBuilder.Register(&CenterServerVulnerabilityAssessment{}, &CenterServerVulnerabilityAssessmentList{})
}
