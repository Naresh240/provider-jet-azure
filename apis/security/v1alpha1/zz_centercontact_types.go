/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CenterContactObservation struct {
}

type CenterContactParameters struct {

	// +kubebuilder:validation:Required
	AlertNotifications *bool `json:"alertNotifications" tf:"alert_notifications,omitempty"`

	// +kubebuilder:validation:Required
	AlertsToAdmins *bool `json:"alertsToAdmins" tf:"alerts_to_admins,omitempty"`

	// +kubebuilder:validation:Required
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

// CenterContactSpec defines the desired state of CenterContact
type CenterContactSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CenterContactParameters `json:"forProvider"`
}

// CenterContactStatus defines the observed state of CenterContact.
type CenterContactStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CenterContactObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CenterContact is the Schema for the CenterContacts API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type CenterContact struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              CenterContactSpec   `json:"spec"`
	Status            CenterContactStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CenterContactList contains a list of CenterContacts
type CenterContactList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CenterContact `json:"items"`
}

// Repository type metadata.
var (
	CenterContact_Kind             = "CenterContact"
	CenterContact_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CenterContact_Kind}.String()
	CenterContact_KindAPIVersion   = CenterContact_Kind + "." + CRDGroupVersion.String()
	CenterContact_GroupVersionKind = CRDGroupVersion.WithKind(CenterContact_Kind)
)

func init() {
	SchemeBuilder.Register(&CenterContact{}, &CenterContactList{})
}
