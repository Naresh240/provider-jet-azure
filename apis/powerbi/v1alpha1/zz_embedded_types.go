/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EmbeddedObservation struct {
}

type EmbeddedParameters struct {

	// +kubebuilder:validation:Required
	Administrators []*string `json:"administrators" tf:"administrators,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// EmbeddedSpec defines the desired state of Embedded
type EmbeddedSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EmbeddedParameters `json:"forProvider"`
}

// EmbeddedStatus defines the observed state of Embedded.
type EmbeddedStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EmbeddedObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Embedded is the Schema for the Embeddeds API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Embedded struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EmbeddedSpec   `json:"spec"`
	Status            EmbeddedStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EmbeddedList contains a list of Embeddeds
type EmbeddedList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Embedded `json:"items"`
}

// Repository type metadata.
var (
	Embedded_Kind             = "Embedded"
	Embedded_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Embedded_Kind}.String()
	Embedded_KindAPIVersion   = Embedded_Kind + "." + CRDGroupVersion.String()
	Embedded_GroupVersionKind = CRDGroupVersion.WithKind(Embedded_Kind)
)

func init() {
	SchemeBuilder.Register(&Embedded{}, &EmbeddedList{})
}
