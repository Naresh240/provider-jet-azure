/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CodePackageObservation struct {
}

type CodePackageParameters struct {

	// +kubebuilder:validation:Required
	ImageName *string `json:"imageName" tf:"image_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Resources []ResourcesParameters `json:"resources" tf:"resources,omitempty"`
}

type FabricMeshApplicationObservation struct {
}

type FabricMeshApplicationParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	Service []ServiceParameters `json:"service" tf:"service,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

type LimitsObservation struct {
}

type LimitsParameters struct {

	// +kubebuilder:validation:Required
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Required
	Memory *float64 `json:"memory" tf:"memory,omitempty"`
}

type RequestsObservation struct {
}

type RequestsParameters struct {

	// +kubebuilder:validation:Required
	CPU *float64 `json:"cpu" tf:"cpu,omitempty"`

	// +kubebuilder:validation:Required
	Memory *float64 `json:"memory" tf:"memory,omitempty"`
}

type ResourcesObservation struct {
}

type ResourcesParameters struct {

	// +kubebuilder:validation:Optional
	Limits []LimitsParameters `json:"limits,omitempty" tf:"limits,omitempty"`

	// +kubebuilder:validation:Required
	Requests []RequestsParameters `json:"requests" tf:"requests,omitempty"`
}

type ServiceObservation struct {
}

type ServiceParameters struct {

	// +kubebuilder:validation:Required
	CodePackage []CodePackageParameters `json:"codePackage" tf:"code_package,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	OsType *string `json:"osType" tf:"os_type,omitempty"`
}

// FabricMeshApplicationSpec defines the desired state of FabricMeshApplication
type FabricMeshApplicationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     FabricMeshApplicationParameters `json:"forProvider"`
}

// FabricMeshApplicationStatus defines the observed state of FabricMeshApplication.
type FabricMeshApplicationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        FabricMeshApplicationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// FabricMeshApplication is the Schema for the FabricMeshApplications API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type FabricMeshApplication struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              FabricMeshApplicationSpec   `json:"spec"`
	Status            FabricMeshApplicationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// FabricMeshApplicationList contains a list of FabricMeshApplications
type FabricMeshApplicationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []FabricMeshApplication `json:"items"`
}

// Repository type metadata.
var (
	FabricMeshApplication_Kind             = "FabricMeshApplication"
	FabricMeshApplication_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: FabricMeshApplication_Kind}.String()
	FabricMeshApplication_KindAPIVersion   = FabricMeshApplication_Kind + "." + CRDGroupVersion.String()
	FabricMeshApplication_GroupVersionKind = CRDGroupVersion.WithKind(FabricMeshApplication_Kind)
)

func init() {
	SchemeBuilder.Register(&FabricMeshApplication{}, &FabricMeshApplicationList{})
}
