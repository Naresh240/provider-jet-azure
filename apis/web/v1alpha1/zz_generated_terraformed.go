/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this AppService
func (mg *AppService) GetTerraformResourceType() string {
	return "azurerm_app_service"
}

// GetConnectionDetailsMapping for this AppService
func (tr *AppService) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"auth_settings[*].active_directory[*].client_secret": "spec.forProvider.authSettings[*].activeDirectory[*].clientSecretSecretRef", "auth_settings[*].facebook[*].app_secret": "spec.forProvider.authSettings[*].facebook[*].appSecretSecretRef", "auth_settings[*].google[*].client_secret": "spec.forProvider.authSettings[*].google[*].clientSecretSecretRef", "auth_settings[*].microsoft[*].client_secret": "spec.forProvider.authSettings[*].microsoft[*].clientSecretSecretRef", "auth_settings[*].twitter[*].consumer_secret": "spec.forProvider.authSettings[*].twitter[*].consumerSecretSecretRef", "backup[*].storage_account_url": "spec.forProvider.backup[*].storageAccountUrlSecretRef", "connection_string[*].value": "spec.forProvider.connectionString[*].valueSecretRef", "logs[*].application_logs[*].azure_blob_storage[*].sas_url": "spec.forProvider.logs[*].applicationLogs[*].azureBlobStorage[*].sasUrlSecretRef", "logs[*].http_logs[*].azure_blob_storage[*].sas_url": "spec.forProvider.logs[*].httpLogs[*].azureBlobStorage[*].sasUrlSecretRef", "storage_account[*].access_key": "spec.forProvider.storageAccount[*].accessKeySecretRef"}
}

// GetObservation of this AppService
func (tr *AppService) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppService
func (tr *AppService) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppService
func (tr *AppService) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppService
func (tr *AppService) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppService
func (tr *AppService) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppService using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppService) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppService) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceActiveSlot
func (mg *AppServiceActiveSlot) GetTerraformResourceType() string {
	return "azurerm_app_service_active_slot"
}

// GetConnectionDetailsMapping for this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceActiveSlot
func (tr *AppServiceActiveSlot) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceActiveSlot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceActiveSlot) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceActiveSlotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceActiveSlot) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceCertificate
func (mg *AppServiceCertificate) GetTerraformResourceType() string {
	return "azurerm_app_service_certificate"
}

// GetConnectionDetailsMapping for this AppServiceCertificate
func (tr *AppServiceCertificate) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"password": "spec.forProvider.passwordSecretRef", "pfx_blob": "spec.forProvider.pfxBlobSecretRef"}
}

// GetObservation of this AppServiceCertificate
func (tr *AppServiceCertificate) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceCertificate
func (tr *AppServiceCertificate) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceCertificate
func (tr *AppServiceCertificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceCertificate
func (tr *AppServiceCertificate) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceCertificate
func (tr *AppServiceCertificate) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceCertificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceCertificate) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceCertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceCertificate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceCertificateBinding
func (mg *AppServiceCertificateBinding) GetTerraformResourceType() string {
	return "azurerm_app_service_certificate_binding"
}

// GetConnectionDetailsMapping for this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceCertificateBinding
func (tr *AppServiceCertificateBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceCertificateBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceCertificateBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceCertificateBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceCertificateBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceCustomHostNameBinding
func (mg *AppServiceCustomHostNameBinding) GetTerraformResourceType() string {
	return "azurerm_app_service_custom_hostname_binding"
}

// GetConnectionDetailsMapping for this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceCustomHostNameBinding
func (tr *AppServiceCustomHostNameBinding) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceCustomHostNameBinding using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceCustomHostNameBinding) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceCustomHostNameBindingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceCustomHostNameBinding) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceEnvironment
func (mg *AppServiceEnvironment) GetTerraformResourceType() string {
	return "azurerm_app_service_environment"
}

// GetConnectionDetailsMapping for this AppServiceEnvironment
func (tr *AppServiceEnvironment) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceEnvironment
func (tr *AppServiceEnvironment) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceEnvironment
func (tr *AppServiceEnvironment) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceEnvironment
func (tr *AppServiceEnvironment) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceEnvironment
func (tr *AppServiceEnvironment) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceEnvironment
func (tr *AppServiceEnvironment) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceEnvironment using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceEnvironment) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceEnvironmentParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceEnvironment) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceEnvironmentV3
func (mg *AppServiceEnvironmentV3) GetTerraformResourceType() string {
	return "azurerm_app_service_environment_v3"
}

// GetConnectionDetailsMapping for this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceEnvironmentV3
func (tr *AppServiceEnvironmentV3) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceEnvironmentV3 using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceEnvironmentV3) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceEnvironmentV3Parameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceEnvironmentV3) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceHybridConnection
func (mg *AppServiceHybridConnection) GetTerraformResourceType() string {
	return "azurerm_app_service_hybrid_connection"
}

// GetConnectionDetailsMapping for this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"send_key_value": "status.atProvider.sendKeyValue"}
}

// GetObservation of this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceHybridConnection
func (tr *AppServiceHybridConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceHybridConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceHybridConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceHybridConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceHybridConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceManagedCertificate
func (mg *AppServiceManagedCertificate) GetTerraformResourceType() string {
	return "azurerm_app_service_managed_certificate"
}

// GetConnectionDetailsMapping for this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceManagedCertificate
func (tr *AppServiceManagedCertificate) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceManagedCertificate using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceManagedCertificate) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceManagedCertificateParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceManagedCertificate) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServicePlan
func (mg *AppServicePlan) GetTerraformResourceType() string {
	return "azurerm_app_service_plan"
}

// GetConnectionDetailsMapping for this AppServicePlan
func (tr *AppServicePlan) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServicePlan
func (tr *AppServicePlan) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServicePlan
func (tr *AppServicePlan) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServicePlan
func (tr *AppServicePlan) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServicePlan
func (tr *AppServicePlan) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServicePlan
func (tr *AppServicePlan) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServicePlan using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServicePlan) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServicePlanParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServicePlan) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceSlot
func (mg *AppServiceSlot) GetTerraformResourceType() string {
	return "azurerm_app_service_slot"
}

// GetConnectionDetailsMapping for this AppServiceSlot
func (tr *AppServiceSlot) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"auth_settings[*].active_directory[*].client_secret": "spec.forProvider.authSettings[*].activeDirectory[*].clientSecretSecretRef", "auth_settings[*].facebook[*].app_secret": "spec.forProvider.authSettings[*].facebook[*].appSecretSecretRef", "auth_settings[*].google[*].client_secret": "spec.forProvider.authSettings[*].google[*].clientSecretSecretRef", "auth_settings[*].microsoft[*].client_secret": "spec.forProvider.authSettings[*].microsoft[*].clientSecretSecretRef", "auth_settings[*].twitter[*].consumer_secret": "spec.forProvider.authSettings[*].twitter[*].consumerSecretSecretRef", "connection_string[*].value": "spec.forProvider.connectionString[*].valueSecretRef", "logs[*].application_logs[*].azure_blob_storage[*].sas_url": "spec.forProvider.logs[*].applicationLogs[*].azureBlobStorage[*].sasUrlSecretRef", "logs[*].http_logs[*].azure_blob_storage[*].sas_url": "spec.forProvider.logs[*].httpLogs[*].azureBlobStorage[*].sasUrlSecretRef"}
}

// GetObservation of this AppServiceSlot
func (tr *AppServiceSlot) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceSlot
func (tr *AppServiceSlot) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceSlot
func (tr *AppServiceSlot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceSlot
func (tr *AppServiceSlot) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceSlot
func (tr *AppServiceSlot) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceSlot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceSlot) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceSlotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceSlot) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceSlotVirtualNetworkSwiftConnection
func (mg *AppServiceSlotVirtualNetworkSwiftConnection) GetTerraformResourceType() string {
	return "azurerm_app_service_slot_virtual_network_swift_connection"
}

// GetConnectionDetailsMapping for this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceSlotVirtualNetworkSwiftConnection
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceSlotVirtualNetworkSwiftConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceSlotVirtualNetworkSwiftConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceSlotVirtualNetworkSwiftConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceSourceControlToken
func (mg *AppServiceSourceControlToken) GetTerraformResourceType() string {
	return "azurerm_app_service_source_control_token"
}

// GetConnectionDetailsMapping for this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"token": "spec.forProvider.tokenSecretRef", "token_secret": "spec.forProvider.tokenSecretSecretRef"}
}

// GetObservation of this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceSourceControlToken
func (tr *AppServiceSourceControlToken) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceSourceControlToken using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceSourceControlToken) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceSourceControlTokenParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceSourceControlToken) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this AppServiceVirtualNetworkSwiftConnection
func (mg *AppServiceVirtualNetworkSwiftConnection) GetTerraformResourceType() string {
	return "azurerm_app_service_virtual_network_swift_connection"
}

// GetConnectionDetailsMapping for this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this AppServiceVirtualNetworkSwiftConnection
func (tr *AppServiceVirtualNetworkSwiftConnection) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this AppServiceVirtualNetworkSwiftConnection using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *AppServiceVirtualNetworkSwiftConnection) LateInitialize(attrs []byte) (bool, error) {
	params := &AppServiceVirtualNetworkSwiftConnectionParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *AppServiceVirtualNetworkSwiftConnection) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FunctionApp
func (mg *FunctionApp) GetTerraformResourceType() string {
	return "azurerm_function_app"
}

// GetConnectionDetailsMapping for this FunctionApp
func (tr *FunctionApp) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"auth_settings[*].active_directory[*].client_secret": "spec.forProvider.authSettings[*].activeDirectory[*].clientSecretSecretRef", "auth_settings[*].facebook[*].app_secret": "spec.forProvider.authSettings[*].facebook[*].appSecretSecretRef", "auth_settings[*].google[*].client_secret": "spec.forProvider.authSettings[*].google[*].clientSecretSecretRef", "auth_settings[*].microsoft[*].client_secret": "spec.forProvider.authSettings[*].microsoft[*].clientSecretSecretRef", "auth_settings[*].twitter[*].consumer_secret": "spec.forProvider.authSettings[*].twitter[*].consumerSecretSecretRef", "connection_string[*].value": "spec.forProvider.connectionString[*].valueSecretRef", "storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef", "storage_connection_string": "spec.forProvider.storageConnectionStringSecretRef"}
}

// GetObservation of this FunctionApp
func (tr *FunctionApp) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FunctionApp
func (tr *FunctionApp) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FunctionApp
func (tr *FunctionApp) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FunctionApp
func (tr *FunctionApp) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FunctionApp
func (tr *FunctionApp) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FunctionApp using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FunctionApp) LateInitialize(attrs []byte) (bool, error) {
	params := &FunctionAppParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FunctionApp) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this FunctionAppSlot
func (mg *FunctionAppSlot) GetTerraformResourceType() string {
	return "azurerm_function_app_slot"
}

// GetConnectionDetailsMapping for this FunctionAppSlot
func (tr *FunctionAppSlot) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"auth_settings[*].active_directory[*].client_secret": "spec.forProvider.authSettings[*].activeDirectory[*].clientSecretSecretRef", "auth_settings[*].facebook[*].app_secret": "spec.forProvider.authSettings[*].facebook[*].appSecretSecretRef", "auth_settings[*].google[*].client_secret": "spec.forProvider.authSettings[*].google[*].clientSecretSecretRef", "auth_settings[*].microsoft[*].client_secret": "spec.forProvider.authSettings[*].microsoft[*].clientSecretSecretRef", "auth_settings[*].twitter[*].consumer_secret": "spec.forProvider.authSettings[*].twitter[*].consumerSecretSecretRef", "connection_string[*].value": "spec.forProvider.connectionString[*].valueSecretRef", "storage_account_access_key": "spec.forProvider.storageAccountAccessKeySecretRef"}
}

// GetObservation of this FunctionAppSlot
func (tr *FunctionAppSlot) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this FunctionAppSlot
func (tr *FunctionAppSlot) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this FunctionAppSlot
func (tr *FunctionAppSlot) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this FunctionAppSlot
func (tr *FunctionAppSlot) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this FunctionAppSlot
func (tr *FunctionAppSlot) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this FunctionAppSlot using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *FunctionAppSlot) LateInitialize(attrs []byte) (bool, error) {
	params := &FunctionAppSlotParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *FunctionAppSlot) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this StaticSite
func (mg *StaticSite) GetTerraformResourceType() string {
	return "azurerm_static_site"
}

// GetConnectionDetailsMapping for this StaticSite
func (tr *StaticSite) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this StaticSite
func (tr *StaticSite) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this StaticSite
func (tr *StaticSite) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this StaticSite
func (tr *StaticSite) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this StaticSite
func (tr *StaticSite) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this StaticSite
func (tr *StaticSite) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this StaticSite using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *StaticSite) LateInitialize(attrs []byte) (bool, error) {
	params := &StaticSiteParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *StaticSite) GetTerraformSchemaVersion() int {
	return 0
}
