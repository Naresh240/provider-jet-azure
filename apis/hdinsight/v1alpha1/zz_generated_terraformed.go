/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this HadoopCluster
func (mg *HadoopCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_hadoop_cluster"
}

// GetConnectionDetailsMapping for this HadoopCluster
func (tr *HadoopCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this HadoopCluster
func (tr *HadoopCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HadoopCluster
func (tr *HadoopCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HadoopCluster
func (tr *HadoopCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HadoopCluster
func (tr *HadoopCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HadoopCluster
func (tr *HadoopCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HadoopCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HadoopCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &HadoopClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HadoopCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this HBaseCluster
func (mg *HBaseCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_hbase_cluster"
}

// GetConnectionDetailsMapping for this HBaseCluster
func (tr *HBaseCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this HBaseCluster
func (tr *HBaseCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this HBaseCluster
func (tr *HBaseCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this HBaseCluster
func (tr *HBaseCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this HBaseCluster
func (tr *HBaseCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this HBaseCluster
func (tr *HBaseCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this HBaseCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *HBaseCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &HBaseClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *HBaseCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this InteractiveQueryCluster
func (mg *InteractiveQueryCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_interactive_query_cluster"
}

// GetConnectionDetailsMapping for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this InteractiveQueryCluster
func (tr *InteractiveQueryCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this InteractiveQueryCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *InteractiveQueryCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &InteractiveQueryClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *InteractiveQueryCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this KafkaCluster
func (mg *KafkaCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_kafka_cluster"
}

// GetConnectionDetailsMapping for this KafkaCluster
func (tr *KafkaCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].kafka_management_node[*].password": "spec.forProvider.roles[*].kafkaManagementNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this KafkaCluster
func (tr *KafkaCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this KafkaCluster
func (tr *KafkaCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this KafkaCluster
func (tr *KafkaCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this KafkaCluster
func (tr *KafkaCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this KafkaCluster
func (tr *KafkaCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this KafkaCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *KafkaCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &KafkaClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *KafkaCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MLServicesCluster
func (mg *MLServicesCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_ml_services_cluster"
}

// GetConnectionDetailsMapping for this MLServicesCluster
func (tr *MLServicesCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "roles[*].edge_node[*].password": "spec.forProvider.roles[*].edgeNode[*].passwordSecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this MLServicesCluster
func (tr *MLServicesCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MLServicesCluster
func (tr *MLServicesCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MLServicesCluster
func (tr *MLServicesCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MLServicesCluster
func (tr *MLServicesCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MLServicesCluster
func (tr *MLServicesCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MLServicesCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MLServicesCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &MLServicesClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MLServicesCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this RServerCluster
func (mg *RServerCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_rserver_cluster"
}

// GetConnectionDetailsMapping for this RServerCluster
func (tr *RServerCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "roles[*].edge_node[*].password": "spec.forProvider.roles[*].edgeNode[*].passwordSecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this RServerCluster
func (tr *RServerCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this RServerCluster
func (tr *RServerCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this RServerCluster
func (tr *RServerCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this RServerCluster
func (tr *RServerCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this RServerCluster
func (tr *RServerCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this RServerCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *RServerCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &RServerClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *RServerCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this SparkCluster
func (mg *SparkCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_spark_cluster"
}

// GetConnectionDetailsMapping for this SparkCluster
func (tr *SparkCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "security_profile[*].domain_user_password": "spec.forProvider.securityProfile[*].domainUserPasswordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this SparkCluster
func (tr *SparkCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this SparkCluster
func (tr *SparkCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this SparkCluster
func (tr *SparkCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this SparkCluster
func (tr *SparkCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this SparkCluster
func (tr *SparkCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this SparkCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *SparkCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &SparkClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *SparkCluster) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this StormCluster
func (mg *StormCluster) GetTerraformResourceType() string {
	return "azurerm_hdinsight_storm_cluster"
}

// GetConnectionDetailsMapping for this StormCluster
func (tr *StormCluster) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"gateway[*].password": "spec.forProvider.gateway[*].passwordSecretRef", "metastores[*].ambari[*].password": "spec.forProvider.metastores[*].ambari[*].passwordSecretRef", "metastores[*].hive[*].password": "spec.forProvider.metastores[*].hive[*].passwordSecretRef", "metastores[*].oozie[*].password": "spec.forProvider.metastores[*].oozie[*].passwordSecretRef", "monitor[*].primary_key": "spec.forProvider.monitor[*].primaryKeySecretRef", "roles[*].head_node[*].password": "spec.forProvider.roles[*].headNode[*].passwordSecretRef", "roles[*].worker_node[*].password": "spec.forProvider.roles[*].workerNode[*].passwordSecretRef", "roles[*].zookeeper_node[*].password": "spec.forProvider.roles[*].zookeeperNode[*].passwordSecretRef", "storage_account[*].storage_account_key": "spec.forProvider.storageAccount[*].storageAccountKeySecretRef"}
}

// GetObservation of this StormCluster
func (tr *StormCluster) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this StormCluster
func (tr *StormCluster) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this StormCluster
func (tr *StormCluster) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this StormCluster
func (tr *StormCluster) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this StormCluster
func (tr *StormCluster) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this StormCluster using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *StormCluster) LateInitialize(attrs []byte) (bool, error) {
	params := &StormClusterParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *StormCluster) GetTerraformSchemaVersion() int {
	return 0
}
