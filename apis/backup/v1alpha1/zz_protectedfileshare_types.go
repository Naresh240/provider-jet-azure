/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ProtectedFileShareObservation struct {
}

type ProtectedFileShareParameters struct {

	// +kubebuilder:validation:Required
	BackupPolicyID *string `json:"backupPolicyId" tf:"backup_policy_id,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SourceFileShareName *string `json:"sourceFileShareName" tf:"source_file_share_name,omitempty"`

	// +kubebuilder:validation:Required
	SourceStorageAccountID *string `json:"sourceStorageAccountId" tf:"source_storage_account_id,omitempty"`
}

// ProtectedFileShareSpec defines the desired state of ProtectedFileShare
type ProtectedFileShareSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ProtectedFileShareParameters `json:"forProvider"`
}

// ProtectedFileShareStatus defines the observed state of ProtectedFileShare.
type ProtectedFileShareStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ProtectedFileShareObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectedFileShare is the Schema for the ProtectedFileShares API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ProtectedFileShare struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ProtectedFileShareSpec   `json:"spec"`
	Status            ProtectedFileShareStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ProtectedFileShareList contains a list of ProtectedFileShares
type ProtectedFileShareList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ProtectedFileShare `json:"items"`
}

// Repository type metadata.
var (
	ProtectedFileShare_Kind             = "ProtectedFileShare"
	ProtectedFileShare_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ProtectedFileShare_Kind}.String()
	ProtectedFileShare_KindAPIVersion   = ProtectedFileShare_Kind + "." + CRDGroupVersion.String()
	ProtectedFileShare_GroupVersionKind = CRDGroupVersion.WithKind(ProtectedFileShare_Kind)
)

func init() {
	SchemeBuilder.Register(&ProtectedFileShare{}, &ProtectedFileShareList{})
}
