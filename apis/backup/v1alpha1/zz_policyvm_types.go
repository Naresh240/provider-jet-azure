/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyVmBackupObservation struct {
}

type PolicyVmBackupParameters struct {

	// +kubebuilder:validation:Required
	Frequency *string `json:"frequency" tf:"frequency,omitempty"`

	// +kubebuilder:validation:Required
	Time *string `json:"time" tf:"time,omitempty"`

	// +kubebuilder:validation:Optional
	Weekdays []*string `json:"weekdays,omitempty" tf:"weekdays,omitempty"`
}

type PolicyVmObservation struct {
}

type PolicyVmParameters struct {

	// +kubebuilder:validation:Required
	Backup []PolicyVmBackupParameters `json:"backup" tf:"backup,omitempty"`

	// +kubebuilder:validation:Optional
	InstantRestoreRetentionDays *int64 `json:"instantRestoreRetentionDays,omitempty" tf:"instant_restore_retention_days,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionDaily []PolicyVmRetentionDailyParameters `json:"retentionDaily,omitempty" tf:"retention_daily,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionMonthly []PolicyVmRetentionMonthlyParameters `json:"retentionMonthly,omitempty" tf:"retention_monthly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionWeekly []PolicyVmRetentionWeeklyParameters `json:"retentionWeekly,omitempty" tf:"retention_weekly,omitempty"`

	// +kubebuilder:validation:Optional
	RetentionYearly []PolicyVmRetentionYearlyParameters `json:"retentionYearly,omitempty" tf:"retention_yearly,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	Timezone *string `json:"timezone,omitempty" tf:"timezone,omitempty"`
}

type PolicyVmRetentionDailyObservation struct {
}

type PolicyVmRetentionDailyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`
}

type PolicyVmRetentionMonthlyObservation struct {
}

type PolicyVmRetentionMonthlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

type PolicyVmRetentionWeeklyObservation struct {
}

type PolicyVmRetentionWeeklyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`
}

type PolicyVmRetentionYearlyObservation struct {
}

type PolicyVmRetentionYearlyParameters struct {

	// +kubebuilder:validation:Required
	Count *int64 `json:"count" tf:"count,omitempty"`

	// +kubebuilder:validation:Required
	Months []*string `json:"months" tf:"months,omitempty"`

	// +kubebuilder:validation:Required
	Weekdays []*string `json:"weekdays" tf:"weekdays,omitempty"`

	// +kubebuilder:validation:Required
	Weeks []*string `json:"weeks" tf:"weeks,omitempty"`
}

// PolicyVmSpec defines the desired state of PolicyVm
type PolicyVmSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicyVmParameters `json:"forProvider"`
}

// PolicyVmStatus defines the observed state of PolicyVm.
type PolicyVmStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicyVmObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVm is the Schema for the PolicyVms API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type PolicyVm struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicyVmSpec   `json:"spec"`
	Status            PolicyVmStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicyVmList contains a list of PolicyVms
type PolicyVmList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicyVm `json:"items"`
}

// Repository type metadata.
var (
	PolicyVm_Kind             = "PolicyVm"
	PolicyVm_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicyVm_Kind}.String()
	PolicyVm_KindAPIVersion   = PolicyVm_Kind + "." + CRDGroupVersion.String()
	PolicyVm_GroupVersionKind = CRDGroupVersion.WithKind(PolicyVm_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicyVm{}, &PolicyVmList{})
}
