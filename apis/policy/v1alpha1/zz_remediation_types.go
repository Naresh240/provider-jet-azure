/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RemediationObservation struct {
}

type RemediationParameters struct {

	// +kubebuilder:validation:Optional
	LocationFilters []*string `json:"locationFilters,omitempty" tf:"location_filters,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	PolicyAssignmentID *string `json:"policyAssignmentId" tf:"policy_assignment_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionReferenceID *string `json:"policyDefinitionReferenceId,omitempty" tf:"policy_definition_reference_id,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceDiscoveryMode *string `json:"resourceDiscoveryMode,omitempty" tf:"resource_discovery_mode,omitempty"`

	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`
}

// RemediationSpec defines the desired state of Remediation
type RemediationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RemediationParameters `json:"forProvider"`
}

// RemediationStatus defines the observed state of Remediation.
type RemediationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RemediationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Remediation is the Schema for the Remediations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Remediation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RemediationSpec   `json:"spec"`
	Status            RemediationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RemediationList contains a list of Remediations
type RemediationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Remediation `json:"items"`
}

// Repository type metadata.
var (
	Remediation_Kind             = "Remediation"
	Remediation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Remediation_Kind}.String()
	Remediation_KindAPIVersion   = Remediation_Kind + "." + CRDGroupVersion.String()
	Remediation_GroupVersionKind = CRDGroupVersion.WithKind(Remediation_Kind)
)

func init() {
	SchemeBuilder.Register(&Remediation{}, &RemediationList{})
}
