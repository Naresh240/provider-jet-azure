/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LockObservation struct {
}

type LockParameters struct {

	// +kubebuilder:validation:Required
	LockLevel *string `json:"lockLevel" tf:"lock_level,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`
}

// LockSpec defines the desired state of Lock
type LockSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LockParameters `json:"forProvider"`
}

// LockStatus defines the observed state of Lock.
type LockStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LockObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Lock is the Schema for the Locks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Lock struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LockSpec   `json:"spec"`
	Status            LockStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LockList contains a list of Locks
type LockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Lock `json:"items"`
}

// Repository type metadata.
var (
	Lock_Kind             = "Lock"
	Lock_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Lock_Kind}.String()
	Lock_KindAPIVersion   = Lock_Kind + "." + CRDGroupVersion.String()
	Lock_GroupVersionKind = CRDGroupVersion.WithKind(Lock_Kind)
)

func init() {
	SchemeBuilder.Register(&Lock{}, &LockList{})
}
