/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssetFilterObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AssetFilterParameters struct {

	// +kubebuilder:validation:Required
	AssetID *string `json:"assetId" tf:"asset_id,omitempty"`

	// +kubebuilder:validation:Optional
	FirstQualityBitrate *float64 `json:"firstQualityBitrate,omitempty" tf:"first_quality_bitrate,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PresentationTimeRange []PresentationTimeRangeParameters `json:"presentationTimeRange,omitempty" tf:"presentation_time_range,omitempty"`

	// +kubebuilder:validation:Optional
	TrackSelection []TrackSelectionParameters `json:"trackSelection,omitempty" tf:"track_selection,omitempty"`
}

type ConditionObservation struct {
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	Property *string `json:"property,omitempty" tf:"property,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type PresentationTimeRangeObservation struct {
}

type PresentationTimeRangeParameters struct {

	// +kubebuilder:validation:Optional
	EndInUnits *float64 `json:"endInUnits,omitempty" tf:"end_in_units,omitempty"`

	// +kubebuilder:validation:Optional
	ForceEnd *bool `json:"forceEnd,omitempty" tf:"force_end,omitempty"`

	// +kubebuilder:validation:Optional
	LiveBackoffInUnits *float64 `json:"liveBackoffInUnits,omitempty" tf:"live_backoff_in_units,omitempty"`

	// +kubebuilder:validation:Optional
	PresentationWindowInUnits *float64 `json:"presentationWindowInUnits,omitempty" tf:"presentation_window_in_units,omitempty"`

	// +kubebuilder:validation:Optional
	StartInUnits *float64 `json:"startInUnits,omitempty" tf:"start_in_units,omitempty"`

	// +kubebuilder:validation:Optional
	UnitTimescaleInMiliseconds *float64 `json:"unitTimescaleInMiliseconds,omitempty" tf:"unit_timescale_in_miliseconds,omitempty"`
}

type TrackSelectionObservation struct {
}

type TrackSelectionParameters struct {

	// +kubebuilder:validation:Required
	Condition []ConditionParameters `json:"condition" tf:"condition,omitempty"`
}

// AssetFilterSpec defines the desired state of AssetFilter
type AssetFilterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AssetFilterParameters `json:"forProvider"`
}

// AssetFilterStatus defines the observed state of AssetFilter.
type AssetFilterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AssetFilterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AssetFilter is the Schema for the AssetFilters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AssetFilter struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AssetFilterSpec   `json:"spec"`
	Status            AssetFilterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AssetFilterList contains a list of AssetFilters
type AssetFilterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AssetFilter `json:"items"`
}

// Repository type metadata.
var (
	AssetFilter_Kind             = "AssetFilter"
	AssetFilter_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AssetFilter_Kind}.String()
	AssetFilter_KindAPIVersion   = AssetFilter_Kind + "." + CRDGroupVersion.String()
	AssetFilter_GroupVersionKind = CRDGroupVersion.WithKind(AssetFilter_Kind)
)

func init() {
	SchemeBuilder.Register(&AssetFilter{}, &AssetFilterList{})
}
