/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementGroupSubscriptionAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementGroupSubscriptionAssociationParameters struct {

	// +kubebuilder:validation:Required
	ManagementGroupID *string `json:"managementGroupId" tf:"management_group_id,omitempty"`

	// +kubebuilder:validation:Required
	SubscriptionID *string `json:"subscriptionId" tf:"subscription_id,omitempty"`
}

// ManagementGroupSubscriptionAssociationSpec defines the desired state of ManagementGroupSubscriptionAssociation
type ManagementGroupSubscriptionAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementGroupSubscriptionAssociationParameters `json:"forProvider"`
}

// ManagementGroupSubscriptionAssociationStatus defines the observed state of ManagementGroupSubscriptionAssociation.
type ManagementGroupSubscriptionAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementGroupSubscriptionAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupSubscriptionAssociation is the Schema for the ManagementGroupSubscriptionAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementGroupSubscriptionAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementGroupSubscriptionAssociationSpec   `json:"spec"`
	Status            ManagementGroupSubscriptionAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementGroupSubscriptionAssociationList contains a list of ManagementGroupSubscriptionAssociations
type ManagementGroupSubscriptionAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementGroupSubscriptionAssociation `json:"items"`
}

// Repository type metadata.
var (
	ManagementGroupSubscriptionAssociation_Kind             = "ManagementGroupSubscriptionAssociation"
	ManagementGroupSubscriptionAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementGroupSubscriptionAssociation_Kind}.String()
	ManagementGroupSubscriptionAssociation_KindAPIVersion   = ManagementGroupSubscriptionAssociation_Kind + "." + CRDGroupVersion.String()
	ManagementGroupSubscriptionAssociation_GroupVersionKind = CRDGroupVersion.WithKind(ManagementGroupSubscriptionAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementGroupSubscriptionAssociation{}, &ManagementGroupSubscriptionAssociationList{})
}
