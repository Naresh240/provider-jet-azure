/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayPublicIpAssociationObservation struct {
}

type GatewayPublicIpAssociationParameters struct {

	// +kubebuilder:validation:Required
	NatGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Required
	PublicIPAddressID *string `json:"publicIpAddressId" tf:"public_ip_address_id,omitempty"`
}

// GatewayPublicIpAssociationSpec defines the desired state of GatewayPublicIpAssociation
type GatewayPublicIpAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayPublicIpAssociationParameters `json:"forProvider"`
}

// GatewayPublicIpAssociationStatus defines the observed state of GatewayPublicIpAssociation.
type GatewayPublicIpAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayPublicIpAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPublicIpAssociation is the Schema for the GatewayPublicIpAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type GatewayPublicIpAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayPublicIpAssociationSpec   `json:"spec"`
	Status            GatewayPublicIpAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPublicIpAssociationList contains a list of GatewayPublicIpAssociations
type GatewayPublicIpAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayPublicIpAssociation `json:"items"`
}

// Repository type metadata.
var (
	GatewayPublicIpAssociation_Kind             = "GatewayPublicIpAssociation"
	GatewayPublicIpAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayPublicIpAssociation_Kind}.String()
	GatewayPublicIpAssociation_KindAPIVersion   = GatewayPublicIpAssociation_Kind + "." + CRDGroupVersion.String()
	GatewayPublicIpAssociation_GroupVersionKind = CRDGroupVersion.WithKind(GatewayPublicIpAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayPublicIpAssociation{}, &GatewayPublicIpAssociationList{})
}
