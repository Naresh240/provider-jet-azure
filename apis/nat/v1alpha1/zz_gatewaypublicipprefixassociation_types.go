/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GatewayPublicIpPrefixAssociationObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GatewayPublicIpPrefixAssociationParameters struct {

	// +kubebuilder:validation:Required
	NatGatewayID *string `json:"natGatewayId" tf:"nat_gateway_id,omitempty"`

	// +kubebuilder:validation:Required
	PublicIPPrefixID *string `json:"publicIpPrefixId" tf:"public_ip_prefix_id,omitempty"`
}

// GatewayPublicIpPrefixAssociationSpec defines the desired state of GatewayPublicIpPrefixAssociation
type GatewayPublicIpPrefixAssociationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GatewayPublicIpPrefixAssociationParameters `json:"forProvider"`
}

// GatewayPublicIpPrefixAssociationStatus defines the observed state of GatewayPublicIpPrefixAssociation.
type GatewayPublicIpPrefixAssociationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GatewayPublicIpPrefixAssociationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPublicIpPrefixAssociation is the Schema for the GatewayPublicIpPrefixAssociations API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type GatewayPublicIpPrefixAssociation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GatewayPublicIpPrefixAssociationSpec   `json:"spec"`
	Status            GatewayPublicIpPrefixAssociationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GatewayPublicIpPrefixAssociationList contains a list of GatewayPublicIpPrefixAssociations
type GatewayPublicIpPrefixAssociationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GatewayPublicIpPrefixAssociation `json:"items"`
}

// Repository type metadata.
var (
	GatewayPublicIpPrefixAssociation_Kind             = "GatewayPublicIpPrefixAssociation"
	GatewayPublicIpPrefixAssociation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GatewayPublicIpPrefixAssociation_Kind}.String()
	GatewayPublicIpPrefixAssociation_KindAPIVersion   = GatewayPublicIpPrefixAssociation_Kind + "." + CRDGroupVersion.String()
	GatewayPublicIpPrefixAssociation_GroupVersionKind = CRDGroupVersion.WithKind(GatewayPublicIpPrefixAssociation_Kind)
)

func init() {
	SchemeBuilder.Register(&GatewayPublicIpPrefixAssociation{}, &GatewayPublicIpPrefixAssociationList{})
}
