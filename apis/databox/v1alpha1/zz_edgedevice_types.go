/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevicePropertiesObservation struct {
	Capacity *int64 `json:"capacity,omitempty" tf:"capacity,omitempty"`

	ConfiguredRoleTypes []*string `json:"configuredRoleTypes,omitempty" tf:"configured_role_types,omitempty"`

	Culture *string `json:"culture,omitempty" tf:"culture,omitempty"`

	HcsVersion *string `json:"hcsVersion,omitempty" tf:"hcs_version,omitempty"`

	Model *string `json:"model,omitempty" tf:"model,omitempty"`

	NodeCount *int64 `json:"nodeCount,omitempty" tf:"node_count,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	SoftwareVersion *string `json:"softwareVersion,omitempty" tf:"software_version,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TimeZone *string `json:"timeZone,omitempty" tf:"time_zone,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DevicePropertiesParameters struct {
}

type EdgeDeviceObservation struct {
	DeviceProperties []DevicePropertiesObservation `json:"deviceProperties,omitempty" tf:"device_properties,omitempty"`
}

type EdgeDeviceParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// EdgeDeviceSpec defines the desired state of EdgeDevice
type EdgeDeviceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EdgeDeviceParameters `json:"forProvider"`
}

// EdgeDeviceStatus defines the observed state of EdgeDevice.
type EdgeDeviceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EdgeDeviceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeDevice is the Schema for the EdgeDevices API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EdgeDevice struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EdgeDeviceSpec   `json:"spec"`
	Status            EdgeDeviceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EdgeDeviceList contains a list of EdgeDevices
type EdgeDeviceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EdgeDevice `json:"items"`
}

// Repository type metadata.
var (
	EdgeDevice_Kind             = "EdgeDevice"
	EdgeDevice_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EdgeDevice_Kind}.String()
	EdgeDevice_KindAPIVersion   = EdgeDevice_Kind + "." + CRDGroupVersion.String()
	EdgeDevice_GroupVersionKind = CRDGroupVersion.WithKind(EdgeDevice_Kind)
)

func init() {
	SchemeBuilder.Register(&EdgeDevice{}, &EdgeDeviceList{})
}
