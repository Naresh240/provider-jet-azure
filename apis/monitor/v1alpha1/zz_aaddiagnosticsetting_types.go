/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AadDiagnosticSettingObservation struct {
}

type AadDiagnosticSettingParameters struct {

	// +kubebuilder:validation:Optional
	EventhubAuthorizationRuleID *string `json:"eventhubAuthorizationRuleId,omitempty" tf:"eventhub_authorization_rule_id,omitempty"`

	// +kubebuilder:validation:Optional
	EventhubName *string `json:"eventhubName,omitempty" tf:"eventhub_name,omitempty"`

	// +kubebuilder:validation:Required
	Log []LogParameters `json:"log" tf:"log,omitempty"`

	// +kubebuilder:validation:Optional
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId,omitempty" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageAccountID *string `json:"storageAccountId,omitempty" tf:"storage_account_id,omitempty"`
}

type LogObservation struct {
}

type LogParameters struct {

	// +kubebuilder:validation:Required
	Category *string `json:"category" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	RetentionPolicy []RetentionPolicyParameters `json:"retentionPolicy" tf:"retention_policy,omitempty"`
}

type RetentionPolicyObservation struct {
}

type RetentionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	Days *int64 `json:"days,omitempty" tf:"days,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`
}

// AadDiagnosticSettingSpec defines the desired state of AadDiagnosticSetting
type AadDiagnosticSettingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AadDiagnosticSettingParameters `json:"forProvider"`
}

// AadDiagnosticSettingStatus defines the observed state of AadDiagnosticSetting.
type AadDiagnosticSettingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AadDiagnosticSettingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AadDiagnosticSetting is the Schema for the AadDiagnosticSettings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AadDiagnosticSetting struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AadDiagnosticSettingSpec   `json:"spec"`
	Status            AadDiagnosticSettingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AadDiagnosticSettingList contains a list of AadDiagnosticSettings
type AadDiagnosticSettingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AadDiagnosticSetting `json:"items"`
}

// Repository type metadata.
var (
	AadDiagnosticSetting_Kind             = "AadDiagnosticSetting"
	AadDiagnosticSetting_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AadDiagnosticSetting_Kind}.String()
	AadDiagnosticSetting_KindAPIVersion   = AadDiagnosticSetting_Kind + "." + CRDGroupVersion.String()
	AadDiagnosticSetting_GroupVersionKind = CRDGroupVersion.WithKind(AadDiagnosticSetting_Kind)
)

func init() {
	SchemeBuilder.Register(&AadDiagnosticSetting{}, &AadDiagnosticSettingList{})
}
