/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SmartDetectorAlertRuleActionGroupObservation struct {
}

type SmartDetectorAlertRuleActionGroupParameters struct {

	// +kubebuilder:validation:Optional
	EmailSubject *string `json:"emailSubject,omitempty" tf:"email_subject,omitempty"`

	// +kubebuilder:validation:Required
	Ids []*string `json:"ids" tf:"ids,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookPayload *string `json:"webhookPayload,omitempty" tf:"webhook_payload,omitempty"`
}

type SmartDetectorAlertRuleObservation struct {
}

type SmartDetectorAlertRuleParameters struct {

	// +kubebuilder:validation:Required
	ActionGroup []SmartDetectorAlertRuleActionGroupParameters `json:"actionGroup" tf:"action_group,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DetectorType *string `json:"detectorType" tf:"detector_type,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Frequency *string `json:"frequency" tf:"frequency,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ScopeResourceIds []*string `json:"scopeResourceIds" tf:"scope_resource_ids,omitempty"`

	// +kubebuilder:validation:Required
	Severity *string `json:"severity" tf:"severity,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	ThrottlingDuration *string `json:"throttlingDuration,omitempty" tf:"throttling_duration,omitempty"`
}

// SmartDetectorAlertRuleSpec defines the desired state of SmartDetectorAlertRule
type SmartDetectorAlertRuleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SmartDetectorAlertRuleParameters `json:"forProvider"`
}

// SmartDetectorAlertRuleStatus defines the observed state of SmartDetectorAlertRule.
type SmartDetectorAlertRuleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SmartDetectorAlertRuleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SmartDetectorAlertRule is the Schema for the SmartDetectorAlertRules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SmartDetectorAlertRule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SmartDetectorAlertRuleSpec   `json:"spec"`
	Status            SmartDetectorAlertRuleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SmartDetectorAlertRuleList contains a list of SmartDetectorAlertRules
type SmartDetectorAlertRuleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SmartDetectorAlertRule `json:"items"`
}

// Repository type metadata.
var (
	SmartDetectorAlertRule_Kind             = "SmartDetectorAlertRule"
	SmartDetectorAlertRule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SmartDetectorAlertRule_Kind}.String()
	SmartDetectorAlertRule_KindAPIVersion   = SmartDetectorAlertRule_Kind + "." + CRDGroupVersion.String()
	SmartDetectorAlertRule_GroupVersionKind = CRDGroupVersion.WithKind(SmartDetectorAlertRule_Kind)
)

func init() {
	SchemeBuilder.Register(&SmartDetectorAlertRule{}, &SmartDetectorAlertRuleList{})
}
