/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertRuleScheduledObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlertRuleScheduledParameters struct {

	// +kubebuilder:validation:Optional
	AlertRuleTemplateGUID *string `json:"alertRuleTemplateGuid,omitempty" tf:"alert_rule_template_guid,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EventGrouping []EventGroupingParameters `json:"eventGrouping,omitempty" tf:"event_grouping,omitempty"`

	// +kubebuilder:validation:Optional
	IncidentConfiguration []IncidentConfigurationParameters `json:"incidentConfiguration,omitempty" tf:"incident_configuration,omitempty"`

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	Query *string `json:"query" tf:"query,omitempty"`

	// +kubebuilder:validation:Optional
	QueryFrequency *string `json:"queryFrequency,omitempty" tf:"query_frequency,omitempty"`

	// +kubebuilder:validation:Optional
	QueryPeriod *string `json:"queryPeriod,omitempty" tf:"query_period,omitempty"`

	// +kubebuilder:validation:Required
	Severity *string `json:"severity" tf:"severity,omitempty"`

	// +kubebuilder:validation:Optional
	SuppressionDuration *string `json:"suppressionDuration,omitempty" tf:"suppression_duration,omitempty"`

	// +kubebuilder:validation:Optional
	SuppressionEnabled *bool `json:"suppressionEnabled,omitempty" tf:"suppression_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Tactics []*string `json:"tactics,omitempty" tf:"tactics,omitempty"`

	// +kubebuilder:validation:Optional
	TriggerOperator *string `json:"triggerOperator,omitempty" tf:"trigger_operator,omitempty"`

	// +kubebuilder:validation:Optional
	TriggerThreshold *int64 `json:"triggerThreshold,omitempty" tf:"trigger_threshold,omitempty"`
}

type EventGroupingObservation struct {
}

type EventGroupingParameters struct {

	// +kubebuilder:validation:Required
	AggregationMethod *string `json:"aggregationMethod" tf:"aggregation_method,omitempty"`
}

type GroupingObservation struct {
}

type GroupingParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EntityMatchingMethod *string `json:"entityMatchingMethod,omitempty" tf:"entity_matching_method,omitempty"`

	// +kubebuilder:validation:Optional
	GroupBy []*string `json:"groupBy,omitempty" tf:"group_by,omitempty"`

	// +kubebuilder:validation:Optional
	LookbackDuration *string `json:"lookbackDuration,omitempty" tf:"lookback_duration,omitempty"`

	// +kubebuilder:validation:Optional
	ReopenClosedIncidents *bool `json:"reopenClosedIncidents,omitempty" tf:"reopen_closed_incidents,omitempty"`
}

type IncidentConfigurationObservation struct {
}

type IncidentConfigurationParameters struct {

	// +kubebuilder:validation:Required
	CreateIncident *bool `json:"createIncident" tf:"create_incident,omitempty"`

	// +kubebuilder:validation:Required
	Grouping []GroupingParameters `json:"grouping" tf:"grouping,omitempty"`
}

// AlertRuleScheduledSpec defines the desired state of AlertRuleScheduled
type AlertRuleScheduledSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertRuleScheduledParameters `json:"forProvider"`
}

// AlertRuleScheduledStatus defines the observed state of AlertRuleScheduled.
type AlertRuleScheduledStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertRuleScheduledObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlertRuleScheduled is the Schema for the AlertRuleScheduleds API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AlertRuleScheduled struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlertRuleScheduledSpec   `json:"spec"`
	Status            AlertRuleScheduledStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertRuleScheduledList contains a list of AlertRuleScheduleds
type AlertRuleScheduledList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertRuleScheduled `json:"items"`
}

// Repository type metadata.
var (
	AlertRuleScheduled_Kind             = "AlertRuleScheduled"
	AlertRuleScheduled_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertRuleScheduled_Kind}.String()
	AlertRuleScheduled_KindAPIVersion   = AlertRuleScheduled_Kind + "." + CRDGroupVersion.String()
	AlertRuleScheduled_GroupVersionKind = CRDGroupVersion.WithKind(AlertRuleScheduled_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertRuleScheduled{}, &AlertRuleScheduledList{})
}
