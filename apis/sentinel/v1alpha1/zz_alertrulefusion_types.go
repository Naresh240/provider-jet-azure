/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AlertRuleFusionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AlertRuleFusionParameters struct {

	// +kubebuilder:validation:Required
	AlertRuleTemplateGUID *string `json:"alertRuleTemplateGuid" tf:"alert_rule_template_guid,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// AlertRuleFusionSpec defines the desired state of AlertRuleFusion
type AlertRuleFusionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AlertRuleFusionParameters `json:"forProvider"`
}

// AlertRuleFusionStatus defines the observed state of AlertRuleFusion.
type AlertRuleFusionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AlertRuleFusionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AlertRuleFusion is the Schema for the AlertRuleFusions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AlertRuleFusion struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AlertRuleFusionSpec   `json:"spec"`
	Status            AlertRuleFusionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AlertRuleFusionList contains a list of AlertRuleFusions
type AlertRuleFusionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AlertRuleFusion `json:"items"`
}

// Repository type metadata.
var (
	AlertRuleFusion_Kind             = "AlertRuleFusion"
	AlertRuleFusion_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AlertRuleFusion_Kind}.String()
	AlertRuleFusion_KindAPIVersion   = AlertRuleFusion_Kind + "." + CRDGroupVersion.String()
	AlertRuleFusion_GroupVersionKind = CRDGroupVersion.WithKind(AlertRuleFusion_Kind)
)

func init() {
	SchemeBuilder.Register(&AlertRuleFusion{}, &AlertRuleFusionList{})
}
