/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataConnectorOffice365Observation struct {
}

type DataConnectorOffice365Parameters struct {

	// +kubebuilder:validation:Optional
	ExchangeEnabled *bool `json:"exchangeEnabled,omitempty" tf:"exchange_enabled,omitempty"`

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SharepointEnabled *bool `json:"sharepointEnabled,omitempty" tf:"sharepoint_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TeamsEnabled *bool `json:"teamsEnabled,omitempty" tf:"teams_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// DataConnectorOffice365Spec defines the desired state of DataConnectorOffice365
type DataConnectorOffice365Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataConnectorOffice365Parameters `json:"forProvider"`
}

// DataConnectorOffice365Status defines the observed state of DataConnectorOffice365.
type DataConnectorOffice365Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataConnectorOffice365Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataConnectorOffice365 is the Schema for the DataConnectorOffice365s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DataConnectorOffice365 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataConnectorOffice365Spec   `json:"spec"`
	Status            DataConnectorOffice365Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataConnectorOffice365List contains a list of DataConnectorOffice365s
type DataConnectorOffice365List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataConnectorOffice365 `json:"items"`
}

// Repository type metadata.
var (
	DataConnectorOffice365_Kind             = "DataConnectorOffice365"
	DataConnectorOffice365_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataConnectorOffice365_Kind}.String()
	DataConnectorOffice365_KindAPIVersion   = DataConnectorOffice365_Kind + "." + CRDGroupVersion.String()
	DataConnectorOffice365_GroupVersionKind = CRDGroupVersion.WithKind(DataConnectorOffice365_Kind)
)

func init() {
	SchemeBuilder.Register(&DataConnectorOffice365{}, &DataConnectorOffice365List{})
}
