/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataConnectorAzureActiveDirectoryObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataConnectorAzureActiveDirectoryParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// DataConnectorAzureActiveDirectorySpec defines the desired state of DataConnectorAzureActiveDirectory
type DataConnectorAzureActiveDirectorySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataConnectorAzureActiveDirectoryParameters `json:"forProvider"`
}

// DataConnectorAzureActiveDirectoryStatus defines the observed state of DataConnectorAzureActiveDirectory.
type DataConnectorAzureActiveDirectoryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataConnectorAzureActiveDirectoryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataConnectorAzureActiveDirectory is the Schema for the DataConnectorAzureActiveDirectorys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DataConnectorAzureActiveDirectory struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataConnectorAzureActiveDirectorySpec   `json:"spec"`
	Status            DataConnectorAzureActiveDirectoryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataConnectorAzureActiveDirectoryList contains a list of DataConnectorAzureActiveDirectorys
type DataConnectorAzureActiveDirectoryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataConnectorAzureActiveDirectory `json:"items"`
}

// Repository type metadata.
var (
	DataConnectorAzureActiveDirectory_Kind             = "DataConnectorAzureActiveDirectory"
	DataConnectorAzureActiveDirectory_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataConnectorAzureActiveDirectory_Kind}.String()
	DataConnectorAzureActiveDirectory_KindAPIVersion   = DataConnectorAzureActiveDirectory_Kind + "." + CRDGroupVersion.String()
	DataConnectorAzureActiveDirectory_GroupVersionKind = CRDGroupVersion.WithKind(DataConnectorAzureActiveDirectory_Kind)
)

func init() {
	SchemeBuilder.Register(&DataConnectorAzureActiveDirectory{}, &DataConnectorAzureActiveDirectoryList{})
}
