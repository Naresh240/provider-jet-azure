/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SecretValueObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SecretValueParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ServiceFabricMeshSecretID *string `json:"serviceFabricMeshSecretId" tf:"service_fabric_mesh_secret_id,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Value *string `json:"value" tf:"value,omitempty"`
}

// SecretValueSpec defines the desired state of SecretValue
type SecretValueSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecretValueParameters `json:"forProvider"`
}

// SecretValueStatus defines the observed state of SecretValue.
type SecretValueStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecretValueObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecretValue is the Schema for the SecretValues API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SecretValue struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SecretValueSpec   `json:"spec"`
	Status            SecretValueStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecretValueList contains a list of SecretValues
type SecretValueList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecretValue `json:"items"`
}

// Repository type metadata.
var (
	SecretValue_Kind             = "SecretValue"
	SecretValue_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecretValue_Kind}.String()
	SecretValue_KindAPIVersion   = SecretValue_Kind + "." + CRDGroupVersion.String()
	SecretValue_GroupVersionKind = CRDGroupVersion.WithKind(SecretValue_Kind)
)

func init() {
	SchemeBuilder.Register(&SecretValue{}, &SecretValueList{})
}
