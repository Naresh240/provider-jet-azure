/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecoveryFabricObservation struct {
}

type RecoveryFabricParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// RecoveryFabricSpec defines the desired state of RecoveryFabric
type RecoveryFabricSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecoveryFabricParameters `json:"forProvider"`
}

// RecoveryFabricStatus defines the observed state of RecoveryFabric.
type RecoveryFabricStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecoveryFabricObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RecoveryFabric is the Schema for the RecoveryFabrics API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RecoveryFabric struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecoveryFabricSpec   `json:"spec"`
	Status            RecoveryFabricStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecoveryFabricList contains a list of RecoveryFabrics
type RecoveryFabricList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RecoveryFabric `json:"items"`
}

// Repository type metadata.
var (
	RecoveryFabric_Kind             = "RecoveryFabric"
	RecoveryFabric_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RecoveryFabric_Kind}.String()
	RecoveryFabric_KindAPIVersion   = RecoveryFabric_Kind + "." + CRDGroupVersion.String()
	RecoveryFabric_GroupVersionKind = CRDGroupVersion.WithKind(RecoveryFabric_Kind)
)

func init() {
	SchemeBuilder.Register(&RecoveryFabric{}, &RecoveryFabricList{})
}
