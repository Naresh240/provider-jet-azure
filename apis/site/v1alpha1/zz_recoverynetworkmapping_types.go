/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type RecoveryNetworkMappingObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type RecoveryNetworkMappingParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RecoveryVaultName *string `json:"recoveryVaultName" tf:"recovery_vault_name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SourceNetworkID *string `json:"sourceNetworkId" tf:"source_network_id,omitempty"`

	// +kubebuilder:validation:Required
	SourceRecoveryFabricName *string `json:"sourceRecoveryFabricName" tf:"source_recovery_fabric_name,omitempty"`

	// +kubebuilder:validation:Required
	TargetNetworkID *string `json:"targetNetworkId" tf:"target_network_id,omitempty"`

	// +kubebuilder:validation:Required
	TargetRecoveryFabricName *string `json:"targetRecoveryFabricName" tf:"target_recovery_fabric_name,omitempty"`
}

// RecoveryNetworkMappingSpec defines the desired state of RecoveryNetworkMapping
type RecoveryNetworkMappingSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RecoveryNetworkMappingParameters `json:"forProvider"`
}

// RecoveryNetworkMappingStatus defines the observed state of RecoveryNetworkMapping.
type RecoveryNetworkMappingStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RecoveryNetworkMappingObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// RecoveryNetworkMapping is the Schema for the RecoveryNetworkMappings API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type RecoveryNetworkMapping struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              RecoveryNetworkMappingSpec   `json:"spec"`
	Status            RecoveryNetworkMappingStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RecoveryNetworkMappingList contains a list of RecoveryNetworkMappings
type RecoveryNetworkMappingList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []RecoveryNetworkMapping `json:"items"`
}

// Repository type metadata.
var (
	RecoveryNetworkMapping_Kind             = "RecoveryNetworkMapping"
	RecoveryNetworkMapping_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: RecoveryNetworkMapping_Kind}.String()
	RecoveryNetworkMapping_KindAPIVersion   = RecoveryNetworkMapping_Kind + "." + CRDGroupVersion.String()
	RecoveryNetworkMapping_GroupVersionKind = CRDGroupVersion.WithKind(RecoveryNetworkMapping_Kind)
)

func init() {
	SchemeBuilder.Register(&RecoveryNetworkMapping{}, &RecoveryNetworkMappingList{})
}
