/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SecurityDeviceGroup.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SecurityDeviceGroup) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SecurityDeviceGroup.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SecurityDeviceGroup) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SecurityDeviceGroup.
func (mg *SecurityDeviceGroup) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this SecuritySolution.
func (mg *SecuritySolution) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this SecuritySolution.
func (mg *SecuritySolution) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this SecuritySolution.
func (mg *SecuritySolution) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this SecuritySolution.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *SecuritySolution) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this SecuritySolution.
func (mg *SecuritySolution) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this SecuritySolution.
func (mg *SecuritySolution) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this SecuritySolution.
func (mg *SecuritySolution) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this SecuritySolution.
func (mg *SecuritySolution) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this SecuritySolution.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *SecuritySolution) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this SecuritySolution.
func (mg *SecuritySolution) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this TimeSeriesInsightsAccessPolicy.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsAccessPolicy) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this TimeSeriesInsightsAccessPolicy.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsAccessPolicy) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TimeSeriesInsightsAccessPolicy.
func (mg *TimeSeriesInsightsAccessPolicy) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this TimeSeriesInsightsEventSourceIothub.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsEventSourceIothub) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this TimeSeriesInsightsEventSourceIothub.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsEventSourceIothub) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TimeSeriesInsightsEventSourceIothub.
func (mg *TimeSeriesInsightsEventSourceIothub) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this TimeSeriesInsightsGen2Environment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsGen2Environment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this TimeSeriesInsightsGen2Environment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsGen2Environment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TimeSeriesInsightsGen2Environment.
func (mg *TimeSeriesInsightsGen2Environment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this TimeSeriesInsightsReferenceDataSet.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsReferenceDataSet) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this TimeSeriesInsightsReferenceDataSet.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsReferenceDataSet) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TimeSeriesInsightsReferenceDataSet.
func (mg *TimeSeriesInsightsReferenceDataSet) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this TimeSeriesInsightsStandardEnvironment.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsStandardEnvironment) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetWriteConnectionSecretToReference of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this TimeSeriesInsightsStandardEnvironment.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *TimeSeriesInsightsStandardEnvironment) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetWriteConnectionSecretToReference of this TimeSeriesInsightsStandardEnvironment.
func (mg *TimeSeriesInsightsStandardEnvironment) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
