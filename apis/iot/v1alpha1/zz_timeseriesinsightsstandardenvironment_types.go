/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TimeSeriesInsightsStandardEnvironmentObservation struct {
}

type TimeSeriesInsightsStandardEnvironmentParameters struct {

	// +kubebuilder:validation:Required
	DataRetentionTime *string `json:"dataRetentionTime" tf:"data_retention_time,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PartitionKey *string `json:"partitionKey,omitempty" tf:"partition_key,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	StorageLimitExceededBehavior *string `json:"storageLimitExceededBehavior,omitempty" tf:"storage_limit_exceeded_behavior,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// TimeSeriesInsightsStandardEnvironmentSpec defines the desired state of TimeSeriesInsightsStandardEnvironment
type TimeSeriesInsightsStandardEnvironmentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TimeSeriesInsightsStandardEnvironmentParameters `json:"forProvider"`
}

// TimeSeriesInsightsStandardEnvironmentStatus defines the observed state of TimeSeriesInsightsStandardEnvironment.
type TimeSeriesInsightsStandardEnvironmentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TimeSeriesInsightsStandardEnvironmentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TimeSeriesInsightsStandardEnvironment is the Schema for the TimeSeriesInsightsStandardEnvironments API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TimeSeriesInsightsStandardEnvironment struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TimeSeriesInsightsStandardEnvironmentSpec   `json:"spec"`
	Status            TimeSeriesInsightsStandardEnvironmentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TimeSeriesInsightsStandardEnvironmentList contains a list of TimeSeriesInsightsStandardEnvironments
type TimeSeriesInsightsStandardEnvironmentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TimeSeriesInsightsStandardEnvironment `json:"items"`
}

// Repository type metadata.
var (
	TimeSeriesInsightsStandardEnvironment_Kind             = "TimeSeriesInsightsStandardEnvironment"
	TimeSeriesInsightsStandardEnvironment_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TimeSeriesInsightsStandardEnvironment_Kind}.String()
	TimeSeriesInsightsStandardEnvironment_KindAPIVersion   = TimeSeriesInsightsStandardEnvironment_Kind + "." + CRDGroupVersion.String()
	TimeSeriesInsightsStandardEnvironment_GroupVersionKind = CRDGroupVersion.WithKind(TimeSeriesInsightsStandardEnvironment_Kind)
)

func init() {
	SchemeBuilder.Register(&TimeSeriesInsightsStandardEnvironment{}, &TimeSeriesInsightsStandardEnvironmentList{})
}
