/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type GlobalVMShutdownScheduleObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type GlobalVMShutdownScheduleParameters struct {

	// +kubebuilder:validation:Required
	DailyRecurrenceTime *string `json:"dailyRecurrenceTime" tf:"daily_recurrence_time,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	NotificationSettings []NotificationSettingsParameters `json:"notificationSettings" tf:"notification_settings,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	Timezone *string `json:"timezone" tf:"timezone,omitempty"`

	// +kubebuilder:validation:Required
	VirtualMachineID *string `json:"virtualMachineId" tf:"virtual_machine_id,omitempty"`
}

type NotificationSettingsObservation struct {
}

type NotificationSettingsParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Required
	Enabled *bool `json:"enabled" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	TimeInMinutes *float64 `json:"timeInMinutes,omitempty" tf:"time_in_minutes,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookURL *string `json:"webhookUrl,omitempty" tf:"webhook_url,omitempty"`
}

// GlobalVMShutdownScheduleSpec defines the desired state of GlobalVMShutdownSchedule
type GlobalVMShutdownScheduleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GlobalVMShutdownScheduleParameters `json:"forProvider"`
}

// GlobalVMShutdownScheduleStatus defines the observed state of GlobalVMShutdownSchedule.
type GlobalVMShutdownScheduleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GlobalVMShutdownScheduleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVMShutdownSchedule is the Schema for the GlobalVMShutdownSchedules API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type GlobalVMShutdownSchedule struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              GlobalVMShutdownScheduleSpec   `json:"spec"`
	Status            GlobalVMShutdownScheduleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GlobalVMShutdownScheduleList contains a list of GlobalVMShutdownSchedules
type GlobalVMShutdownScheduleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GlobalVMShutdownSchedule `json:"items"`
}

// Repository type metadata.
var (
	GlobalVMShutdownSchedule_Kind             = "GlobalVMShutdownSchedule"
	GlobalVMShutdownSchedule_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GlobalVMShutdownSchedule_Kind}.String()
	GlobalVMShutdownSchedule_KindAPIVersion   = GlobalVMShutdownSchedule_Kind + "." + CRDGroupVersion.String()
	GlobalVMShutdownSchedule_GroupVersionKind = CRDGroupVersion.WithKind(GlobalVMShutdownSchedule_Kind)
)

func init() {
	SchemeBuilder.Register(&GlobalVMShutdownSchedule{}, &GlobalVMShutdownScheduleList{})
}
