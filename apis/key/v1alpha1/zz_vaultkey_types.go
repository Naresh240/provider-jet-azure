/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VaultKeyObservation struct {
	E *string `json:"e,omitempty" tf:"e,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	N *string `json:"n,omitempty" tf:"n,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`

	VersionlessID *string `json:"versionlessId,omitempty" tf:"versionless_id,omitempty"`

	X *string `json:"x,omitempty" tf:"x,omitempty"`

	Y *string `json:"y,omitempty" tf:"y,omitempty"`
}

type VaultKeyParameters struct {

	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`

	// +kubebuilder:validation:Optional
	ExpirationDate *string `json:"expirationDate,omitempty" tf:"expiration_date,omitempty"`

	// +kubebuilder:validation:Required
	KeyOpts []*string `json:"keyOpts" tf:"key_opts,omitempty"`

	// +kubebuilder:validation:Optional
	KeySize *int64 `json:"keySize,omitempty" tf:"key_size,omitempty"`

	// +kubebuilder:validation:Required
	KeyType *string `json:"keyType" tf:"key_type,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultID *string `json:"keyVaultId" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NotBeforeDate *string `json:"notBeforeDate,omitempty" tf:"not_before_date,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// VaultKeySpec defines the desired state of VaultKey
type VaultKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultKeyParameters `json:"forProvider"`
}

// VaultKeyStatus defines the observed state of VaultKey.
type VaultKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VaultKey is the Schema for the VaultKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VaultKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultKeySpec   `json:"spec"`
	Status            VaultKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultKeyList contains a list of VaultKeys
type VaultKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultKey `json:"items"`
}

// Repository type metadata.
var (
	VaultKey_Kind             = "VaultKey"
	VaultKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VaultKey_Kind}.String()
	VaultKey_KindAPIVersion   = VaultKey_Kind + "." + CRDGroupVersion.String()
	VaultKey_GroupVersionKind = CRDGroupVersion.WithKind(VaultKey_Kind)
)

func init() {
	SchemeBuilder.Register(&VaultKey{}, &VaultKeyList{})
}
