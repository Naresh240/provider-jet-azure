/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VaultAccessPolicyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type VaultAccessPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	CertificatePermissions []*string `json:"certificatePermissions,omitempty" tf:"certificate_permissions,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPermissions []*string `json:"keyPermissions,omitempty" tf:"key_permissions,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultID *string `json:"keyVaultId" tf:"key_vault_id,omitempty"`

	// +kubebuilder:validation:Required
	ObjectID *string `json:"objectId" tf:"object_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecretPermissions []*string `json:"secretPermissions,omitempty" tf:"secret_permissions,omitempty"`

	// +kubebuilder:validation:Optional
	StoragePermissions []*string `json:"storagePermissions,omitempty" tf:"storage_permissions,omitempty"`

	// +kubebuilder:validation:Required
	TenantID *string `json:"tenantId" tf:"tenant_id,omitempty"`
}

// VaultAccessPolicySpec defines the desired state of VaultAccessPolicy
type VaultAccessPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VaultAccessPolicyParameters `json:"forProvider"`
}

// VaultAccessPolicyStatus defines the observed state of VaultAccessPolicy.
type VaultAccessPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VaultAccessPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VaultAccessPolicy is the Schema for the VaultAccessPolicys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type VaultAccessPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              VaultAccessPolicySpec   `json:"spec"`
	Status            VaultAccessPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VaultAccessPolicyList contains a list of VaultAccessPolicys
type VaultAccessPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VaultAccessPolicy `json:"items"`
}

// Repository type metadata.
var (
	VaultAccessPolicy_Kind             = "VaultAccessPolicy"
	VaultAccessPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VaultAccessPolicy_Kind}.String()
	VaultAccessPolicy_KindAPIVersion   = VaultAccessPolicy_Kind + "." + CRDGroupVersion.String()
	VaultAccessPolicy_GroupVersionKind = CRDGroupVersion.WithKind(VaultAccessPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&VaultAccessPolicy{}, &VaultAccessPolicyList{})
}
