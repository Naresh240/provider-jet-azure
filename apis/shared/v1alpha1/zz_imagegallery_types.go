/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ImageGalleryObservation struct {
	UniqueName *string `json:"uniqueName,omitempty" tf:"unique_name,omitempty"`
}

type ImageGalleryParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`
}

// ImageGallerySpec defines the desired state of ImageGallery
type ImageGallerySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageGalleryParameters `json:"forProvider"`
}

// ImageGalleryStatus defines the observed state of ImageGallery.
type ImageGalleryStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageGalleryObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ImageGallery is the Schema for the ImageGallerys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ImageGallery struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ImageGallerySpec   `json:"spec"`
	Status            ImageGalleryStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageGalleryList contains a list of ImageGallerys
type ImageGalleryList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ImageGallery `json:"items"`
}

// Repository type metadata.
var (
	ImageGallery_Kind             = "ImageGallery"
	ImageGallery_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ImageGallery_Kind}.String()
	ImageGallery_KindAPIVersion   = ImageGallery_Kind + "." + CRDGroupVersion.String()
	ImageGallery_GroupVersionKind = CRDGroupVersion.WithKind(ImageGallery_Kind)
)

func init() {
	SchemeBuilder.Register(&ImageGallery{}, &ImageGalleryList{})
}
