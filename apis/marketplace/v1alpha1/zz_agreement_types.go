/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AgreementObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LicenseTextLink *string `json:"licenseTextLink,omitempty" tf:"license_text_link,omitempty"`

	PrivacyPolicyLink *string `json:"privacyPolicyLink,omitempty" tf:"privacy_policy_link,omitempty"`
}

type AgreementParameters struct {

	// +kubebuilder:validation:Required
	Offer *string `json:"offer" tf:"offer,omitempty"`

	// +kubebuilder:validation:Required
	Plan *string `json:"plan" tf:"plan,omitempty"`

	// +kubebuilder:validation:Required
	Publisher *string `json:"publisher" tf:"publisher,omitempty"`
}

// AgreementSpec defines the desired state of Agreement
type AgreementSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AgreementParameters `json:"forProvider"`
}

// AgreementStatus defines the observed state of Agreement.
type AgreementStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AgreementObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Agreement is the Schema for the Agreements API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type Agreement struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AgreementSpec   `json:"spec"`
	Status            AgreementStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AgreementList contains a list of Agreements
type AgreementList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Agreement `json:"items"`
}

// Repository type metadata.
var (
	Agreement_Kind             = "Agreement"
	Agreement_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Agreement_Kind}.String()
	Agreement_KindAPIVersion   = Agreement_Kind + "." + CRDGroupVersion.String()
	Agreement_GroupVersionKind = CRDGroupVersion.WithKind(Agreement_Kind)
)

func init() {
	SchemeBuilder.Register(&Agreement{}, &AgreementList{})
}
