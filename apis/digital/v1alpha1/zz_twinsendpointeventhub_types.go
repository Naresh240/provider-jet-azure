/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type TwinsEndpointEventhubObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type TwinsEndpointEventhubParameters struct {

	// +kubebuilder:validation:Optional
	DeadLetterStorageSecretSecretRef *v1.SecretKeySelector `json:"deadLetterStorageSecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	DigitalTwinsID *string `json:"digitalTwinsId" tf:"digital_twins_id,omitempty"`

	// +kubebuilder:validation:Required
	EventhubPrimaryConnectionStringSecretRef v1.SecretKeySelector `json:"eventhubPrimaryConnectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	EventhubSecondaryConnectionStringSecretRef v1.SecretKeySelector `json:"eventhubSecondaryConnectionStringSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

// TwinsEndpointEventhubSpec defines the desired state of TwinsEndpointEventhub
type TwinsEndpointEventhubSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TwinsEndpointEventhubParameters `json:"forProvider"`
}

// TwinsEndpointEventhubStatus defines the observed state of TwinsEndpointEventhub.
type TwinsEndpointEventhubStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TwinsEndpointEventhubObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// TwinsEndpointEventhub is the Schema for the TwinsEndpointEventhubs API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type TwinsEndpointEventhub struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              TwinsEndpointEventhubSpec   `json:"spec"`
	Status            TwinsEndpointEventhubStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TwinsEndpointEventhubList contains a list of TwinsEndpointEventhubs
type TwinsEndpointEventhubList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []TwinsEndpointEventhub `json:"items"`
}

// Repository type metadata.
var (
	TwinsEndpointEventhub_Kind             = "TwinsEndpointEventhub"
	TwinsEndpointEventhub_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: TwinsEndpointEventhub_Kind}.String()
	TwinsEndpointEventhub_KindAPIVersion   = TwinsEndpointEventhub_Kind + "." + CRDGroupVersion.String()
	TwinsEndpointEventhub_GroupVersionKind = CRDGroupVersion.WithKind(TwinsEndpointEventhub_Kind)
)

func init() {
	SchemeBuilder.Register(&TwinsEndpointEventhub{}, &TwinsEndpointEventhubList{})
}
