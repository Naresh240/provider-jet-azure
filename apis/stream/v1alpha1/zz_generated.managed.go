/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by angryjet. DO NOT EDIT.

package v1alpha1

import xpv1 "github.com/crossplane/crossplane-runtime/apis/common/v1"

// GetCondition of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this AnalyticsOutputTable.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *AnalyticsOutputTable) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this AnalyticsOutputTable.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *AnalyticsOutputTable) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this AnalyticsOutputTable.
func (mg *AnalyticsOutputTable) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}

// GetCondition of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) GetCondition(ct xpv1.ConditionType) xpv1.Condition {
	return mg.Status.GetCondition(ct)
}

// GetDeletionPolicy of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) GetDeletionPolicy() xpv1.DeletionPolicy {
	return mg.Spec.DeletionPolicy
}

// GetProviderConfigReference of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) GetProviderConfigReference() *xpv1.Reference {
	return mg.Spec.ProviderConfigReference
}

/*
GetProviderReference of this AnalyticsReferenceInputMSSQL.
Deprecated: Use GetProviderConfigReference.
*/
func (mg *AnalyticsReferenceInputMSSQL) GetProviderReference() *xpv1.Reference {
	return mg.Spec.ProviderReference
}

// GetPublishConnectionDetailsTo of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) GetPublishConnectionDetailsTo() *xpv1.PublishConnectionDetailsTo {
	return mg.Spec.PublishConnectionDetailsTo
}

// GetWriteConnectionSecretToReference of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) GetWriteConnectionSecretToReference() *xpv1.SecretReference {
	return mg.Spec.WriteConnectionSecretToReference
}

// SetConditions of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) SetConditions(c ...xpv1.Condition) {
	mg.Status.SetConditions(c...)
}

// SetDeletionPolicy of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) SetDeletionPolicy(r xpv1.DeletionPolicy) {
	mg.Spec.DeletionPolicy = r
}

// SetProviderConfigReference of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) SetProviderConfigReference(r *xpv1.Reference) {
	mg.Spec.ProviderConfigReference = r
}

/*
SetProviderReference of this AnalyticsReferenceInputMSSQL.
Deprecated: Use SetProviderConfigReference.
*/
func (mg *AnalyticsReferenceInputMSSQL) SetProviderReference(r *xpv1.Reference) {
	mg.Spec.ProviderReference = r
}

// SetPublishConnectionDetailsTo of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) SetPublishConnectionDetailsTo(r *xpv1.PublishConnectionDetailsTo) {
	mg.Spec.PublishConnectionDetailsTo = r
}

// SetWriteConnectionSecretToReference of this AnalyticsReferenceInputMSSQL.
func (mg *AnalyticsReferenceInputMSSQL) SetWriteConnectionSecretToReference(r *xpv1.SecretReference) {
	mg.Spec.WriteConnectionSecretToReference = r
}
