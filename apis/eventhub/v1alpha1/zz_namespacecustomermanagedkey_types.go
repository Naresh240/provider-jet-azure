/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NamespaceCustomerManagedKeyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type NamespaceCustomerManagedKeyParameters struct {

	// +kubebuilder:validation:Required
	EventHubNamespaceID *string `json:"eventhubNamespaceId" tf:"eventhub_namespace_id,omitempty"`

	// +kubebuilder:validation:Required
	KeyVaultKeyIds []*string `json:"keyVaultKeyIds" tf:"key_vault_key_ids,omitempty"`
}

// NamespaceCustomerManagedKeySpec defines the desired state of NamespaceCustomerManagedKey
type NamespaceCustomerManagedKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NamespaceCustomerManagedKeyParameters `json:"forProvider"`
}

// NamespaceCustomerManagedKeyStatus defines the observed state of NamespaceCustomerManagedKey.
type NamespaceCustomerManagedKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NamespaceCustomerManagedKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceCustomerManagedKey is the Schema for the NamespaceCustomerManagedKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type NamespaceCustomerManagedKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NamespaceCustomerManagedKeySpec   `json:"spec"`
	Status            NamespaceCustomerManagedKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NamespaceCustomerManagedKeyList contains a list of NamespaceCustomerManagedKeys
type NamespaceCustomerManagedKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NamespaceCustomerManagedKey `json:"items"`
}

// Repository type metadata.
var (
	NamespaceCustomerManagedKey_Kind             = "NamespaceCustomerManagedKey"
	NamespaceCustomerManagedKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NamespaceCustomerManagedKey_Kind}.String()
	NamespaceCustomerManagedKey_KindAPIVersion   = NamespaceCustomerManagedKey_Kind + "." + CRDGroupVersion.String()
	NamespaceCustomerManagedKey_GroupVersionKind = CRDGroupVersion.WithKind(NamespaceCustomerManagedKey_Kind)
)

func init() {
	SchemeBuilder.Register(&NamespaceCustomerManagedKey{}, &NamespaceCustomerManagedKeyList{})
}
