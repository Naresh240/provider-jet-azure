/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DevSpaceControllerObservation struct {
	DataPlaneFqdn *string `json:"dataPlaneFqdn,omitempty" tf:"data_plane_fqdn,omitempty"`

	HostSuffix *string `json:"hostSuffix,omitempty" tf:"host_suffix,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DevSpaceControllerParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +crossplane:generate:reference:type=github.com/crossplane-contrib/provider-jet-azure/apis/azure/v1alpha2.ResourceGroup
	// +kubebuilder:validation:Optional
	ResourceGroupName *string `json:"resourceGroupName,omitempty" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameRef *v1.Reference `json:"resourceGroupNameRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	ResourceGroupNameSelector *v1.Selector `json:"resourceGroupNameSelector,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	SkuName *string `json:"skuName" tf:"sku_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TargetContainerHostCredentialsBase64SecretRef v1.SecretKeySelector `json:"targetContainerHostCredentialsBase64SecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	TargetContainerHostResourceID *string `json:"targetContainerHostResourceId" tf:"target_container_host_resource_id,omitempty"`
}

// DevSpaceControllerSpec defines the desired state of DevSpaceController
type DevSpaceControllerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DevSpaceControllerParameters `json:"forProvider"`
}

// DevSpaceControllerStatus defines the observed state of DevSpaceController.
type DevSpaceControllerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DevSpaceControllerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DevSpaceController is the Schema for the DevSpaceControllers API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DevSpaceController struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DevSpaceControllerSpec   `json:"spec"`
	Status            DevSpaceControllerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DevSpaceControllerList contains a list of DevSpaceControllers
type DevSpaceControllerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DevSpaceController `json:"items"`
}

// Repository type metadata.
var (
	DevSpaceController_Kind             = "DevSpaceController"
	DevSpaceController_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DevSpaceController_Kind}.String()
	DevSpaceController_KindAPIVersion   = DevSpaceController_Kind + "." + CRDGroupVersion.String()
	DevSpaceController_GroupVersionKind = CRDGroupVersion.WithKind(DevSpaceController_Kind)
)

func init() {
	SchemeBuilder.Register(&DevSpaceController{}, &DevSpaceControllerList{})
}
