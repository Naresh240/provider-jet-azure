/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelMsTeamsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChannelMsTeamsParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Optional
	CallingWebHook *string `json:"callingWebHook,omitempty" tf:"calling_web_hook,omitempty"`

	// +kubebuilder:validation:Optional
	EnableCalling *bool `json:"enableCalling,omitempty" tf:"enable_calling,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

// ChannelMsTeamsSpec defines the desired state of ChannelMsTeams
type ChannelMsTeamsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelMsTeamsParameters `json:"forProvider"`
}

// ChannelMsTeamsStatus defines the observed state of ChannelMsTeams.
type ChannelMsTeamsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelMsTeamsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelMsTeams is the Schema for the ChannelMsTeamss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelMsTeams struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelMsTeamsSpec   `json:"spec"`
	Status            ChannelMsTeamsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelMsTeamsList contains a list of ChannelMsTeamss
type ChannelMsTeamsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelMsTeams `json:"items"`
}

// Repository type metadata.
var (
	ChannelMsTeams_Kind             = "ChannelMsTeams"
	ChannelMsTeams_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelMsTeams_Kind}.String()
	ChannelMsTeams_KindAPIVersion   = ChannelMsTeams_Kind + "." + CRDGroupVersion.String()
	ChannelMsTeams_GroupVersionKind = CRDGroupVersion.WithKind(ChannelMsTeams_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelMsTeams{}, &ChannelMsTeamsList{})
}
