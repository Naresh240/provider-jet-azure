/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelWebChatObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChannelWebChatParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SiteNames []*string `json:"siteNames" tf:"site_names,omitempty"`
}

// ChannelWebChatSpec defines the desired state of ChannelWebChat
type ChannelWebChatSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelWebChatParameters `json:"forProvider"`
}

// ChannelWebChatStatus defines the observed state of ChannelWebChat.
type ChannelWebChatStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelWebChatObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelWebChat is the Schema for the ChannelWebChats API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelWebChat struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelWebChatSpec   `json:"spec"`
	Status            ChannelWebChatStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelWebChatList contains a list of ChannelWebChats
type ChannelWebChatList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelWebChat `json:"items"`
}

// Repository type metadata.
var (
	ChannelWebChat_Kind             = "ChannelWebChat"
	ChannelWebChat_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelWebChat_Kind}.String()
	ChannelWebChat_KindAPIVersion   = ChannelWebChat_Kind + "." + CRDGroupVersion.String()
	ChannelWebChat_GroupVersionKind = CRDGroupVersion.WithKind(ChannelWebChat_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelWebChat{}, &ChannelWebChatList{})
}
