/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelSlackObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChannelSlackParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	ClientID *string `json:"clientId" tf:"client_id,omitempty"`

	// +kubebuilder:validation:Required
	ClientSecretSecretRef v1.SecretKeySelector `json:"clientSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	LandingPageURL *string `json:"landingPageUrl,omitempty" tf:"landing_page_url,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	SigningSecretSecretRef *v1.SecretKeySelector `json:"signingSecretSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Required
	VerificationTokenSecretRef v1.SecretKeySelector `json:"verificationTokenSecretRef" tf:"-"`
}

// ChannelSlackSpec defines the desired state of ChannelSlack
type ChannelSlackSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelSlackParameters `json:"forProvider"`
}

// ChannelSlackStatus defines the observed state of ChannelSlack.
type ChannelSlackStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelSlackObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelSlack is the Schema for the ChannelSlacks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelSlack struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelSlackSpec   `json:"spec"`
	Status            ChannelSlackStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelSlackList contains a list of ChannelSlacks
type ChannelSlackList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelSlack `json:"items"`
}

// Repository type metadata.
var (
	ChannelSlack_Kind             = "ChannelSlack"
	ChannelSlack_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelSlack_Kind}.String()
	ChannelSlack_KindAPIVersion   = ChannelSlack_Kind + "." + CRDGroupVersion.String()
	ChannelSlack_GroupVersionKind = CRDGroupVersion.WithKind(ChannelSlack_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelSlack{}, &ChannelSlackList{})
}
