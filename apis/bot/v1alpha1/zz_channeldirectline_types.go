/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelDirectlineObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChannelDirectlineParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	Site []SiteParameters `json:"site" tf:"site,omitempty"`
}

type SiteObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SiteParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	EnhancedAuthenticationEnabled *bool `json:"enhancedAuthenticationEnabled,omitempty" tf:"enhanced_authentication_enabled,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TrustedOrigins []*string `json:"trustedOrigins,omitempty" tf:"trusted_origins,omitempty"`

	// +kubebuilder:validation:Optional
	V1Allowed *bool `json:"v1Allowed,omitempty" tf:"v1_allowed,omitempty"`

	// +kubebuilder:validation:Optional
	V3Allowed *bool `json:"v3Allowed,omitempty" tf:"v3_allowed,omitempty"`
}

// ChannelDirectlineSpec defines the desired state of ChannelDirectline
type ChannelDirectlineSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelDirectlineParameters `json:"forProvider"`
}

// ChannelDirectlineStatus defines the observed state of ChannelDirectline.
type ChannelDirectlineStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelDirectlineObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelDirectline is the Schema for the ChannelDirectlines API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelDirectline struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelDirectlineSpec   `json:"spec"`
	Status            ChannelDirectlineStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelDirectlineList contains a list of ChannelDirectlines
type ChannelDirectlineList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelDirectline `json:"items"`
}

// Repository type metadata.
var (
	ChannelDirectline_Kind             = "ChannelDirectline"
	ChannelDirectline_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelDirectline_Kind}.String()
	ChannelDirectline_KindAPIVersion   = ChannelDirectline_Kind + "." + CRDGroupVersion.String()
	ChannelDirectline_GroupVersionKind = CRDGroupVersion.WithKind(ChannelDirectline_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelDirectline{}, &ChannelDirectlineList{})
}
