/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelSmsObservation struct {
}

type ChannelSmsParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	PhoneNumber *string `json:"phoneNumber" tf:"phone_number,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SmsChannelAccountSecurityID *string `json:"smsChannelAccountSecurityId" tf:"sms_channel_account_security_id,omitempty"`

	// +kubebuilder:validation:Required
	SmsChannelAuthTokenSecretRef v1.SecretKeySelector `json:"smsChannelAuthTokenSecretRef" tf:"-"`
}

// ChannelSmsSpec defines the desired state of ChannelSms
type ChannelSmsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelSmsParameters `json:"forProvider"`
}

// ChannelSmsStatus defines the observed state of ChannelSms.
type ChannelSmsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelSmsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelSms is the Schema for the ChannelSmss API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelSms struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelSmsSpec   `json:"spec"`
	Status            ChannelSmsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelSmsList contains a list of ChannelSmss
type ChannelSmsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelSms `json:"items"`
}

// Repository type metadata.
var (
	ChannelSms_Kind             = "ChannelSms"
	ChannelSms_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelSms_Kind}.String()
	ChannelSms_KindAPIVersion   = ChannelSms_Kind + "." + CRDGroupVersion.String()
	ChannelSms_GroupVersionKind = CRDGroupVersion.WithKind(ChannelSms_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelSms{}, &ChannelSmsList{})
}
