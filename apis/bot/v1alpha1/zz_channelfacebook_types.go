/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ChannelFacebookObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ChannelFacebookParameters struct {

	// +kubebuilder:validation:Required
	BotName *string `json:"botName" tf:"bot_name,omitempty"`

	// +kubebuilder:validation:Required
	FacebookApplicationID *string `json:"facebookApplicationId" tf:"facebook_application_id,omitempty"`

	// +kubebuilder:validation:Required
	FacebookApplicationSecretSecretRef v1.SecretKeySelector `json:"facebookApplicationSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Page []PageParameters `json:"page" tf:"page,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`
}

type PageObservation struct {
}

type PageParameters struct {

	// +kubebuilder:validation:Required
	AccessTokenSecretRef v1.SecretKeySelector `json:"accessTokenSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	ID *string `json:"id" tf:"id,omitempty"`
}

// ChannelFacebookSpec defines the desired state of ChannelFacebook
type ChannelFacebookSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ChannelFacebookParameters `json:"forProvider"`
}

// ChannelFacebookStatus defines the observed state of ChannelFacebook.
type ChannelFacebookStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ChannelFacebookObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelFacebook is the Schema for the ChannelFacebooks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ChannelFacebook struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ChannelFacebookSpec   `json:"spec"`
	Status            ChannelFacebookStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ChannelFacebookList contains a list of ChannelFacebooks
type ChannelFacebookList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ChannelFacebook `json:"items"`
}

// Repository type metadata.
var (
	ChannelFacebook_Kind             = "ChannelFacebook"
	ChannelFacebook_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ChannelFacebook_Kind}.String()
	ChannelFacebook_KindAPIVersion   = ChannelFacebook_Kind + "." + CRDGroupVersion.String()
	ChannelFacebook_GroupVersionKind = CRDGroupVersion.WithKind(ChannelFacebook_Kind)
)

func init() {
	SchemeBuilder.Register(&ChannelFacebook{}, &ChannelFacebookList{})
}
