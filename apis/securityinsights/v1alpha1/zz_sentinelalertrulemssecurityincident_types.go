/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SentinelAlertRuleMSSecurityIncidentObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SentinelAlertRuleMSSecurityIncidentParameters struct {

	// +kubebuilder:validation:Optional
	AlertRuleTemplateGUID *string `json:"alertRuleTemplateGuid,omitempty" tf:"alert_rule_template_guid,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayNameExcludeFilter []*string `json:"displayNameExcludeFilter,omitempty" tf:"display_name_exclude_filter,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayNameFilter []*string `json:"displayNameFilter,omitempty" tf:"display_name_filter,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *bool `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ProductFilter *string `json:"productFilter" tf:"product_filter,omitempty"`

	// +kubebuilder:validation:Required
	SeverityFilter []*string `json:"severityFilter" tf:"severity_filter,omitempty"`

	// +kubebuilder:validation:Optional
	TextWhitelist []*string `json:"textWhitelist,omitempty" tf:"text_whitelist,omitempty"`
}

// SentinelAlertRuleMSSecurityIncidentSpec defines the desired state of SentinelAlertRuleMSSecurityIncident
type SentinelAlertRuleMSSecurityIncidentSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SentinelAlertRuleMSSecurityIncidentParameters `json:"forProvider"`
}

// SentinelAlertRuleMSSecurityIncidentStatus defines the observed state of SentinelAlertRuleMSSecurityIncident.
type SentinelAlertRuleMSSecurityIncidentStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SentinelAlertRuleMSSecurityIncidentObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SentinelAlertRuleMSSecurityIncident is the Schema for the SentinelAlertRuleMSSecurityIncidents API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SentinelAlertRuleMSSecurityIncident struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SentinelAlertRuleMSSecurityIncidentSpec   `json:"spec"`
	Status            SentinelAlertRuleMSSecurityIncidentStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SentinelAlertRuleMSSecurityIncidentList contains a list of SentinelAlertRuleMSSecurityIncidents
type SentinelAlertRuleMSSecurityIncidentList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SentinelAlertRuleMSSecurityIncident `json:"items"`
}

// Repository type metadata.
var (
	SentinelAlertRuleMSSecurityIncident_Kind             = "SentinelAlertRuleMSSecurityIncident"
	SentinelAlertRuleMSSecurityIncident_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SentinelAlertRuleMSSecurityIncident_Kind}.String()
	SentinelAlertRuleMSSecurityIncident_KindAPIVersion   = SentinelAlertRuleMSSecurityIncident_Kind + "." + CRDGroupVersion.String()
	SentinelAlertRuleMSSecurityIncident_GroupVersionKind = CRDGroupVersion.WithKind(SentinelAlertRuleMSSecurityIncident_Kind)
)

func init() {
	SchemeBuilder.Register(&SentinelAlertRuleMSSecurityIncident{}, &SentinelAlertRuleMSSecurityIncidentList{})
}
