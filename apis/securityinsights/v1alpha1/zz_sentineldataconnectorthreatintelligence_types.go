/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type SentinelDataConnectorThreatIntelligenceObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type SentinelDataConnectorThreatIntelligenceParameters struct {

	// +kubebuilder:validation:Required
	LogAnalyticsWorkspaceID *string `json:"logAnalyticsWorkspaceId" tf:"log_analytics_workspace_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

// SentinelDataConnectorThreatIntelligenceSpec defines the desired state of SentinelDataConnectorThreatIntelligence
type SentinelDataConnectorThreatIntelligenceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SentinelDataConnectorThreatIntelligenceParameters `json:"forProvider"`
}

// SentinelDataConnectorThreatIntelligenceStatus defines the observed state of SentinelDataConnectorThreatIntelligence.
type SentinelDataConnectorThreatIntelligenceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SentinelDataConnectorThreatIntelligenceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SentinelDataConnectorThreatIntelligence is the Schema for the SentinelDataConnectorThreatIntelligences API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type SentinelDataConnectorThreatIntelligence struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              SentinelDataConnectorThreatIntelligenceSpec   `json:"spec"`
	Status            SentinelDataConnectorThreatIntelligenceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SentinelDataConnectorThreatIntelligenceList contains a list of SentinelDataConnectorThreatIntelligences
type SentinelDataConnectorThreatIntelligenceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SentinelDataConnectorThreatIntelligence `json:"items"`
}

// Repository type metadata.
var (
	SentinelDataConnectorThreatIntelligence_Kind             = "SentinelDataConnectorThreatIntelligence"
	SentinelDataConnectorThreatIntelligence_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SentinelDataConnectorThreatIntelligence_Kind}.String()
	SentinelDataConnectorThreatIntelligence_KindAPIVersion   = SentinelDataConnectorThreatIntelligence_Kind + "." + CRDGroupVersion.String()
	SentinelDataConnectorThreatIntelligence_GroupVersionKind = CRDGroupVersion.WithKind(SentinelDataConnectorThreatIntelligence_Kind)
)

func init() {
	SchemeBuilder.Register(&SentinelDataConnectorThreatIntelligence{}, &SentinelDataConnectorThreatIntelligenceList{})
}
