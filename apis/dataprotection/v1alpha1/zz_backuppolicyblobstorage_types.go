/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BackupPolicyBlobStorageObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type BackupPolicyBlobStorageParameters struct {

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	RetentionDuration *string `json:"retentionDuration" tf:"retention_duration,omitempty"`

	// +kubebuilder:validation:Required
	VaultID *string `json:"vaultId" tf:"vault_id,omitempty"`
}

// BackupPolicyBlobStorageSpec defines the desired state of BackupPolicyBlobStorage
type BackupPolicyBlobStorageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BackupPolicyBlobStorageParameters `json:"forProvider"`
}

// BackupPolicyBlobStorageStatus defines the observed state of BackupPolicyBlobStorage.
type BackupPolicyBlobStorageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BackupPolicyBlobStorageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyBlobStorage is the Schema for the BackupPolicyBlobStorages API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type BackupPolicyBlobStorage struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              BackupPolicyBlobStorageSpec   `json:"spec"`
	Status            BackupPolicyBlobStorageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BackupPolicyBlobStorageList contains a list of BackupPolicyBlobStorages
type BackupPolicyBlobStorageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BackupPolicyBlobStorage `json:"items"`
}

// Repository type metadata.
var (
	BackupPolicyBlobStorage_Kind             = "BackupPolicyBlobStorage"
	BackupPolicyBlobStorage_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BackupPolicyBlobStorage_Kind}.String()
	BackupPolicyBlobStorage_KindAPIVersion   = BackupPolicyBlobStorage_Kind + "." + CRDGroupVersion.String()
	BackupPolicyBlobStorage_GroupVersionKind = CRDGroupVersion.WithKind(BackupPolicyBlobStorage_Kind)
)

func init() {
	SchemeBuilder.Register(&BackupPolicyBlobStorage{}, &BackupPolicyBlobStorageList{})
}
