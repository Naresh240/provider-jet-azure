/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSetDataLakeGen2Observation struct {
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type DataSetDataLakeGen2Parameters struct {

	// +kubebuilder:validation:Optional
	FilePath *string `json:"filePath,omitempty" tf:"file_path,omitempty"`

	// +kubebuilder:validation:Required
	FileSystemName *string `json:"fileSystemName" tf:"file_system_name,omitempty"`

	// +kubebuilder:validation:Optional
	FolderPath *string `json:"folderPath,omitempty" tf:"folder_path,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`
}

// DataSetDataLakeGen2Spec defines the desired state of DataSetDataLakeGen2
type DataSetDataLakeGen2Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSetDataLakeGen2Parameters `json:"forProvider"`
}

// DataSetDataLakeGen2Status defines the observed state of DataSetDataLakeGen2.
type DataSetDataLakeGen2Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSetDataLakeGen2Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetDataLakeGen2 is the Schema for the DataSetDataLakeGen2s API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DataSetDataLakeGen2 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSetDataLakeGen2Spec   `json:"spec"`
	Status            DataSetDataLakeGen2Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetDataLakeGen2List contains a list of DataSetDataLakeGen2s
type DataSetDataLakeGen2List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSetDataLakeGen2 `json:"items"`
}

// Repository type metadata.
var (
	DataSetDataLakeGen2_Kind             = "DataSetDataLakeGen2"
	DataSetDataLakeGen2_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSetDataLakeGen2_Kind}.String()
	DataSetDataLakeGen2_KindAPIVersion   = DataSetDataLakeGen2_Kind + "." + CRDGroupVersion.String()
	DataSetDataLakeGen2_GroupVersionKind = CRDGroupVersion.WithKind(DataSetDataLakeGen2_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSetDataLakeGen2{}, &DataSetDataLakeGen2List{})
}
