/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DataSetKustoClusterObservation struct {
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	KustoClusterLocation *string `json:"kustoClusterLocation,omitempty" tf:"kusto_cluster_location,omitempty"`
}

type DataSetKustoClusterParameters struct {

	// +kubebuilder:validation:Required
	KustoClusterID *string `json:"kustoClusterId" tf:"kusto_cluster_id,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ShareID *string `json:"shareId" tf:"share_id,omitempty"`
}

// DataSetKustoClusterSpec defines the desired state of DataSetKustoCluster
type DataSetKustoClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DataSetKustoClusterParameters `json:"forProvider"`
}

// DataSetKustoClusterStatus defines the observed state of DataSetKustoCluster.
type DataSetKustoClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DataSetKustoClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetKustoCluster is the Schema for the DataSetKustoClusters API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DataSetKustoCluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DataSetKustoClusterSpec   `json:"spec"`
	Status            DataSetKustoClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DataSetKustoClusterList contains a list of DataSetKustoClusters
type DataSetKustoClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DataSetKustoCluster `json:"items"`
}

// Repository type metadata.
var (
	DataSetKustoCluster_Kind             = "DataSetKustoCluster"
	DataSetKustoCluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DataSetKustoCluster_Kind}.String()
	DataSetKustoCluster_KindAPIVersion   = DataSetKustoCluster_Kind + "." + CRDGroupVersion.String()
	DataSetKustoCluster_GroupVersionKind = CRDGroupVersion.WithKind(DataSetKustoCluster_Kind)
)

func init() {
	SchemeBuilder.Register(&DataSetKustoCluster{}, &DataSetKustoClusterList{})
}
