/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnalyticsSolutionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AnalyticsSolutionParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Plan []PlanParameters `json:"plan" tf:"plan,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	SolutionName *string `json:"solutionName" tf:"solution_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	WorkspaceName *string `json:"workspaceName" tf:"workspace_name,omitempty"`

	// +kubebuilder:validation:Required
	WorkspaceResourceID *string `json:"workspaceResourceId" tf:"workspace_resource_id,omitempty"`
}

type PlanObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PlanParameters struct {

	// +kubebuilder:validation:Required
	Product *string `json:"product" tf:"product,omitempty"`

	// +kubebuilder:validation:Optional
	PromotionCode *string `json:"promotionCode,omitempty" tf:"promotion_code,omitempty"`

	// +kubebuilder:validation:Required
	Publisher *string `json:"publisher" tf:"publisher,omitempty"`
}

// AnalyticsSolutionSpec defines the desired state of AnalyticsSolution
type AnalyticsSolutionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AnalyticsSolutionParameters `json:"forProvider"`
}

// AnalyticsSolutionStatus defines the observed state of AnalyticsSolution.
type AnalyticsSolutionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AnalyticsSolutionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AnalyticsSolution is the Schema for the AnalyticsSolutions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AnalyticsSolution struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnalyticsSolutionSpec   `json:"spec"`
	Status            AnalyticsSolutionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnalyticsSolutionList contains a list of AnalyticsSolutions
type AnalyticsSolutionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AnalyticsSolution `json:"items"`
}

// Repository type metadata.
var (
	AnalyticsSolution_Kind             = "AnalyticsSolution"
	AnalyticsSolution_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AnalyticsSolution_Kind}.String()
	AnalyticsSolution_KindAPIVersion   = AnalyticsSolution_Kind + "." + CRDGroupVersion.String()
	AnalyticsSolution_GroupVersionKind = CRDGroupVersion.WithKind(AnalyticsSolution_Kind)
)

func init() {
	SchemeBuilder.Register(&AnalyticsSolution{}, &AnalyticsSolutionList{})
}
