/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AnalyticsClusterCustomerManagedKeyObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type AnalyticsClusterCustomerManagedKeyParameters struct {

	// +kubebuilder:validation:Required
	KeyVaultKeyID *string `json:"keyVaultKeyId" tf:"key_vault_key_id,omitempty"`

	// +kubebuilder:validation:Required
	LogAnalyticsClusterID *string `json:"logAnalyticsClusterId" tf:"log_analytics_cluster_id,omitempty"`
}

// AnalyticsClusterCustomerManagedKeySpec defines the desired state of AnalyticsClusterCustomerManagedKey
type AnalyticsClusterCustomerManagedKeySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AnalyticsClusterCustomerManagedKeyParameters `json:"forProvider"`
}

// AnalyticsClusterCustomerManagedKeyStatus defines the observed state of AnalyticsClusterCustomerManagedKey.
type AnalyticsClusterCustomerManagedKeyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AnalyticsClusterCustomerManagedKeyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AnalyticsClusterCustomerManagedKey is the Schema for the AnalyticsClusterCustomerManagedKeys API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type AnalyticsClusterCustomerManagedKey struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              AnalyticsClusterCustomerManagedKeySpec   `json:"spec"`
	Status            AnalyticsClusterCustomerManagedKeyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AnalyticsClusterCustomerManagedKeyList contains a list of AnalyticsClusterCustomerManagedKeys
type AnalyticsClusterCustomerManagedKeyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AnalyticsClusterCustomerManagedKey `json:"items"`
}

// Repository type metadata.
var (
	AnalyticsClusterCustomerManagedKey_Kind             = "AnalyticsClusterCustomerManagedKey"
	AnalyticsClusterCustomerManagedKey_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AnalyticsClusterCustomerManagedKey_Kind}.String()
	AnalyticsClusterCustomerManagedKey_KindAPIVersion   = AnalyticsClusterCustomerManagedKey_Kind + "." + CRDGroupVersion.String()
	AnalyticsClusterCustomerManagedKey_GroupVersionKind = CRDGroupVersion.WithKind(AnalyticsClusterCustomerManagedKey_Kind)
)

func init() {
	SchemeBuilder.Register(&AnalyticsClusterCustomerManagedKey{}, &AnalyticsClusterCustomerManagedKeyList{})
}
