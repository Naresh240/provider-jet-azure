/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AdvancedFilterObservation struct {
}

type AdvancedFilterParameters struct {

	// +kubebuilder:validation:Optional
	BoolEquals []BoolEqualsParameters `json:"boolEquals,omitempty" tf:"bool_equals,omitempty"`

	// +kubebuilder:validation:Optional
	IsNotNull []IsNotNullParameters `json:"isNotNull,omitempty" tf:"is_not_null,omitempty"`

	// +kubebuilder:validation:Optional
	IsNullOrUndefined []IsNullOrUndefinedParameters `json:"isNullOrUndefined,omitempty" tf:"is_null_or_undefined,omitempty"`

	// +kubebuilder:validation:Optional
	NumberGreaterThan []NumberGreaterThanParameters `json:"numberGreaterThan,omitempty" tf:"number_greater_than,omitempty"`

	// +kubebuilder:validation:Optional
	NumberGreaterThanOrEquals []NumberGreaterThanOrEqualsParameters `json:"numberGreaterThanOrEquals,omitempty" tf:"number_greater_than_or_equals,omitempty"`

	// +kubebuilder:validation:Optional
	NumberIn []NumberInParameters `json:"numberIn,omitempty" tf:"number_in,omitempty"`

	// +kubebuilder:validation:Optional
	NumberInRange []NumberInRangeParameters `json:"numberInRange,omitempty" tf:"number_in_range,omitempty"`

	// +kubebuilder:validation:Optional
	NumberLessThan []NumberLessThanParameters `json:"numberLessThan,omitempty" tf:"number_less_than,omitempty"`

	// +kubebuilder:validation:Optional
	NumberLessThanOrEquals []NumberLessThanOrEqualsParameters `json:"numberLessThanOrEquals,omitempty" tf:"number_less_than_or_equals,omitempty"`

	// +kubebuilder:validation:Optional
	NumberNotIn []NumberNotInParameters `json:"numberNotIn,omitempty" tf:"number_not_in,omitempty"`

	// +kubebuilder:validation:Optional
	NumberNotInRange []NumberNotInRangeParameters `json:"numberNotInRange,omitempty" tf:"number_not_in_range,omitempty"`

	// +kubebuilder:validation:Optional
	StringBeginsWith []StringBeginsWithParameters `json:"stringBeginsWith,omitempty" tf:"string_begins_with,omitempty"`

	// +kubebuilder:validation:Optional
	StringContains []StringContainsParameters `json:"stringContains,omitempty" tf:"string_contains,omitempty"`

	// +kubebuilder:validation:Optional
	StringEndsWith []StringEndsWithParameters `json:"stringEndsWith,omitempty" tf:"string_ends_with,omitempty"`

	// +kubebuilder:validation:Optional
	StringIn []StringInParameters `json:"stringIn,omitempty" tf:"string_in,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotBeginsWith []StringNotBeginsWithParameters `json:"stringNotBeginsWith,omitempty" tf:"string_not_begins_with,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotContains []StringNotContainsParameters `json:"stringNotContains,omitempty" tf:"string_not_contains,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotEndsWith []StringNotEndsWithParameters `json:"stringNotEndsWith,omitempty" tf:"string_not_ends_with,omitempty"`

	// +kubebuilder:validation:Optional
	StringNotIn []StringNotInParameters `json:"stringNotIn,omitempty" tf:"string_not_in,omitempty"`
}

type AzureFunctionEndpointObservation struct {
}

type AzureFunctionEndpointParameters struct {

	// +kubebuilder:validation:Required
	FunctionID *string `json:"functionId" tf:"function_id,omitempty"`

	// +kubebuilder:validation:Optional
	MaxEventsPerBatch *float64 `json:"maxEventsPerBatch,omitempty" tf:"max_events_per_batch,omitempty"`

	// +kubebuilder:validation:Optional
	PreferredBatchSizeInKilobytes *float64 `json:"preferredBatchSizeInKilobytes,omitempty" tf:"preferred_batch_size_in_kilobytes,omitempty"`
}

type BoolEqualsObservation struct {
}

type BoolEqualsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *bool `json:"value" tf:"value,omitempty"`
}

type DeadLetterIdentityObservation struct {
}

type DeadLetterIdentityParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type DeliveryIdentityObservation struct {
}

type DeliveryIdentityParameters struct {

	// +kubebuilder:validation:Required
	Type *string `json:"type" tf:"type,omitempty"`
}

type EventHubEndpointObservation struct {
}

type EventHubEndpointParameters struct {

	// +kubebuilder:validation:Optional
	EventHubID *string `json:"eventhubId,omitempty" tf:"eventhub_id,omitempty"`
}

type EventSubscriptionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type EventSubscriptionParameters struct {

	// +kubebuilder:validation:Optional
	AdvancedFilter []AdvancedFilterParameters `json:"advancedFilter,omitempty" tf:"advanced_filter,omitempty"`

	// +kubebuilder:validation:Optional
	AdvancedFilteringOnArraysEnabled *bool `json:"advancedFilteringOnArraysEnabled,omitempty" tf:"advanced_filtering_on_arrays_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	AzureFunctionEndpoint []AzureFunctionEndpointParameters `json:"azureFunctionEndpoint,omitempty" tf:"azure_function_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	DeadLetterIdentity []DeadLetterIdentityParameters `json:"deadLetterIdentity,omitempty" tf:"dead_letter_identity,omitempty"`

	// +kubebuilder:validation:Optional
	DeliveryIdentity []DeliveryIdentityParameters `json:"deliveryIdentity,omitempty" tf:"delivery_identity,omitempty"`

	// +kubebuilder:validation:Optional
	EventDeliverySchema *string `json:"eventDeliverySchema,omitempty" tf:"event_delivery_schema,omitempty"`

	// +kubebuilder:validation:Optional
	EventHubEndpoint []EventHubEndpointParameters `json:"eventhubEndpoint,omitempty" tf:"eventhub_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	EventHubEndpointID *string `json:"eventhubEndpointId,omitempty" tf:"eventhub_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExpirationTimeUtc *string `json:"expirationTimeUtc,omitempty" tf:"expiration_time_utc,omitempty"`

	// +kubebuilder:validation:Optional
	HybridConnectionEndpoint []HybridConnectionEndpointParameters `json:"hybridConnectionEndpoint,omitempty" tf:"hybrid_connection_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	HybridConnectionEndpointID *string `json:"hybridConnectionEndpointId,omitempty" tf:"hybrid_connection_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	IncludedEventTypes []*string `json:"includedEventTypes,omitempty" tf:"included_event_types,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RetryPolicy []RetryPolicyParameters `json:"retryPolicy,omitempty" tf:"retry_policy,omitempty"`

	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceBusQueueEndpointID *string `json:"serviceBusQueueEndpointId,omitempty" tf:"service_bus_queue_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceBusTopicEndpointID *string `json:"serviceBusTopicEndpointId,omitempty" tf:"service_bus_topic_endpoint_id,omitempty"`

	// +kubebuilder:validation:Optional
	StorageBlobDeadLetterDestination []StorageBlobDeadLetterDestinationParameters `json:"storageBlobDeadLetterDestination,omitempty" tf:"storage_blob_dead_letter_destination,omitempty"`

	// +kubebuilder:validation:Optional
	StorageQueueEndpoint []StorageQueueEndpointParameters `json:"storageQueueEndpoint,omitempty" tf:"storage_queue_endpoint,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectFilter []SubjectFilterParameters `json:"subjectFilter,omitempty" tf:"subject_filter,omitempty"`

	// +kubebuilder:validation:Optional
	TopicName *string `json:"topicName,omitempty" tf:"topic_name,omitempty"`

	// +kubebuilder:validation:Optional
	WebhookEndpoint []WebhookEndpointParameters `json:"webhookEndpoint,omitempty" tf:"webhook_endpoint,omitempty"`
}

type HybridConnectionEndpointObservation struct {
}

type HybridConnectionEndpointParameters struct {

	// +kubebuilder:validation:Optional
	HybridConnectionID *string `json:"hybridConnectionId,omitempty" tf:"hybrid_connection_id,omitempty"`
}

type IsNotNullObservation struct {
}

type IsNotNullParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`
}

type IsNullOrUndefinedObservation struct {
}

type IsNullOrUndefinedParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`
}

type NumberGreaterThanObservation struct {
}

type NumberGreaterThanOrEqualsObservation struct {
}

type NumberGreaterThanOrEqualsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type NumberGreaterThanParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type NumberInObservation struct {
}

type NumberInParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*float64 `json:"values" tf:"values,omitempty"`
}

type NumberInRangeObservation struct {
}

type NumberInRangeParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values [][]*float64 `json:"values" tf:"values,omitempty"`
}

type NumberLessThanObservation struct {
}

type NumberLessThanOrEqualsObservation struct {
}

type NumberLessThanOrEqualsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type NumberLessThanParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Value *float64 `json:"value" tf:"value,omitempty"`
}

type NumberNotInObservation struct {
}

type NumberNotInParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*float64 `json:"values" tf:"values,omitempty"`
}

type NumberNotInRangeObservation struct {
}

type NumberNotInRangeParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values [][]*float64 `json:"values" tf:"values,omitempty"`
}

type RetryPolicyObservation struct {
}

type RetryPolicyParameters struct {

	// +kubebuilder:validation:Required
	EventTimeToLive *float64 `json:"eventTimeToLive" tf:"event_time_to_live,omitempty"`

	// +kubebuilder:validation:Required
	MaxDeliveryAttempts *float64 `json:"maxDeliveryAttempts" tf:"max_delivery_attempts,omitempty"`
}

type StorageBlobDeadLetterDestinationObservation struct {
}

type StorageBlobDeadLetterDestinationParameters struct {

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`

	// +kubebuilder:validation:Required
	StorageBlobContainerName *string `json:"storageBlobContainerName" tf:"storage_blob_container_name,omitempty"`
}

type StorageQueueEndpointObservation struct {
}

type StorageQueueEndpointParameters struct {

	// +kubebuilder:validation:Required
	QueueName *string `json:"queueName" tf:"queue_name,omitempty"`

	// +kubebuilder:validation:Required
	StorageAccountID *string `json:"storageAccountId" tf:"storage_account_id,omitempty"`
}

type StringBeginsWithObservation struct {
}

type StringBeginsWithParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringContainsObservation struct {
}

type StringContainsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringEndsWithObservation struct {
}

type StringEndsWithParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringInObservation struct {
}

type StringInParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringNotBeginsWithObservation struct {
}

type StringNotBeginsWithParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringNotContainsObservation struct {
}

type StringNotContainsParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringNotEndsWithObservation struct {
}

type StringNotEndsWithParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type StringNotInObservation struct {
}

type StringNotInParameters struct {

	// +kubebuilder:validation:Required
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Required
	Values []*string `json:"values" tf:"values,omitempty"`
}

type SubjectFilterObservation struct {
}

type SubjectFilterParameters struct {

	// +kubebuilder:validation:Optional
	CaseSensitive *bool `json:"caseSensitive,omitempty" tf:"case_sensitive,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectBeginsWith *string `json:"subjectBeginsWith,omitempty" tf:"subject_begins_with,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectEndsWith *string `json:"subjectEndsWith,omitempty" tf:"subject_ends_with,omitempty"`
}

type WebhookEndpointObservation struct {
	BaseURL *string `json:"baseUrl,omitempty" tf:"base_url,omitempty"`
}

type WebhookEndpointParameters struct {

	// +kubebuilder:validation:Optional
	ActiveDirectoryAppIDOrURI *string `json:"activeDirectoryAppIdOrUri,omitempty" tf:"active_directory_app_id_or_uri,omitempty"`

	// +kubebuilder:validation:Optional
	ActiveDirectoryTenantID *string `json:"activeDirectoryTenantId,omitempty" tf:"active_directory_tenant_id,omitempty"`

	// +kubebuilder:validation:Optional
	MaxEventsPerBatch *float64 `json:"maxEventsPerBatch,omitempty" tf:"max_events_per_batch,omitempty"`

	// +kubebuilder:validation:Optional
	PreferredBatchSizeInKilobytes *float64 `json:"preferredBatchSizeInKilobytes,omitempty" tf:"preferred_batch_size_in_kilobytes,omitempty"`

	// +kubebuilder:validation:Required
	URL *string `json:"url" tf:"url,omitempty"`
}

// EventSubscriptionSpec defines the desired state of EventSubscription
type EventSubscriptionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     EventSubscriptionParameters `json:"forProvider"`
}

// EventSubscriptionStatus defines the observed state of EventSubscription.
type EventSubscriptionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        EventSubscriptionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// EventSubscription is the Schema for the EventSubscriptions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type EventSubscription struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              EventSubscriptionSpec   `json:"spec"`
	Status            EventSubscriptionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// EventSubscriptionList contains a list of EventSubscriptions
type EventSubscriptionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []EventSubscription `json:"items"`
}

// Repository type metadata.
var (
	EventSubscription_Kind             = "EventSubscription"
	EventSubscription_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: EventSubscription_Kind}.String()
	EventSubscription_KindAPIVersion   = EventSubscription_Kind + "." + CRDGroupVersion.String()
	EventSubscription_GroupVersionKind = CRDGroupVersion.WithKind(EventSubscription_Kind)
)

func init() {
	SchemeBuilder.Register(&EventSubscription{}, &EventSubscriptionList{})
}
