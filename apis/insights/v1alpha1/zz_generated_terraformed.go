/*
Copyright 2022 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	"github.com/pkg/errors"

	"github.com/crossplane/terrajet/pkg/resource"
	"github.com/crossplane/terrajet/pkg/resource/json"
)

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsights
func (mg *ApplicationInsights) GetTerraformResourceType() string {
	return "azurerm_application_insights"
}

// GetConnectionDetailsMapping for this ApplicationInsights
func (tr *ApplicationInsights) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"connection_string": "status.atProvider.connectionString", "instrumentation_key": "status.atProvider.instrumentationKey"}
}

// GetObservation of this ApplicationInsights
func (tr *ApplicationInsights) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsights
func (tr *ApplicationInsights) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsights
func (tr *ApplicationInsights) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsights
func (tr *ApplicationInsights) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsights
func (tr *ApplicationInsights) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationInsights using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsights) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsights) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsAnalyticsItem
func (mg *ApplicationInsightsAnalyticsItem) GetTerraformResourceType() string {
	return "azurerm_application_insights_analytics_item"
}

// GetConnectionDetailsMapping for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsAnalyticsItem
func (tr *ApplicationInsightsAnalyticsItem) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationInsightsAnalyticsItem using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsAnalyticsItem) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsAnalyticsItemParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsAnalyticsItem) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsAPIKey
func (mg *ApplicationInsightsAPIKey) GetTerraformResourceType() string {
	return "azurerm_application_insights_api_key"
}

// GetConnectionDetailsMapping for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetConnectionDetailsMapping() map[string]string {
	return map[string]string{"api_key": "status.atProvider.apiKey"}
}

// GetObservation of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsAPIKey
func (tr *ApplicationInsightsAPIKey) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationInsightsAPIKey using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsAPIKey) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsAPIKeyParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsAPIKey) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsSmartDetectionRule
func (mg *ApplicationInsightsSmartDetectionRule) GetTerraformResourceType() string {
	return "azurerm_application_insights_smart_detection_rule"
}

// GetConnectionDetailsMapping for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsSmartDetectionRule
func (tr *ApplicationInsightsSmartDetectionRule) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationInsightsSmartDetectionRule using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsSmartDetectionRule) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsSmartDetectionRuleParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsSmartDetectionRule) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this ApplicationInsightsWebTest
func (mg *ApplicationInsightsWebTest) GetTerraformResourceType() string {
	return "azurerm_application_insights_web_test"
}

// GetConnectionDetailsMapping for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this ApplicationInsightsWebTest
func (tr *ApplicationInsightsWebTest) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this ApplicationInsightsWebTest using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *ApplicationInsightsWebTest) LateInitialize(attrs []byte) (bool, error) {
	params := &ApplicationInsightsWebTestParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *ApplicationInsightsWebTest) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorActionGroup
func (mg *MonitorActionGroup) GetTerraformResourceType() string {
	return "azurerm_monitor_action_group"
}

// GetConnectionDetailsMapping for this MonitorActionGroup
func (tr *MonitorActionGroup) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActionGroup
func (tr *MonitorActionGroup) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActionGroup
func (tr *MonitorActionGroup) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActionGroup
func (tr *MonitorActionGroup) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActionGroup
func (tr *MonitorActionGroup) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActionGroup
func (tr *MonitorActionGroup) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorActionGroup using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActionGroup) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActionGroupParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActionGroup) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorActivityLogAlert
func (mg *MonitorActivityLogAlert) GetTerraformResourceType() string {
	return "azurerm_monitor_activity_log_alert"
}

// GetConnectionDetailsMapping for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorActivityLogAlert
func (tr *MonitorActivityLogAlert) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorActivityLogAlert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorActivityLogAlert) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorActivityLogAlertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorActivityLogAlert) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorAutoscaleSetting
func (mg *MonitorAutoscaleSetting) GetTerraformResourceType() string {
	return "azurerm_monitor_autoscale_setting"
}

// GetConnectionDetailsMapping for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorAutoscaleSetting
func (tr *MonitorAutoscaleSetting) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorAutoscaleSetting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorAutoscaleSetting) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorAutoscaleSettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorAutoscaleSetting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorDiagnosticSetting
func (mg *MonitorDiagnosticSetting) GetTerraformResourceType() string {
	return "azurerm_monitor_diagnostic_setting"
}

// GetConnectionDetailsMapping for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorDiagnosticSetting
func (tr *MonitorDiagnosticSetting) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorDiagnosticSetting using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorDiagnosticSetting) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorDiagnosticSettingParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorDiagnosticSetting) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorScheduledQueryRulesAlert
func (mg *MonitorScheduledQueryRulesAlert) GetTerraformResourceType() string {
	return "azurerm_monitor_scheduled_query_rules_alert"
}

// GetConnectionDetailsMapping for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorScheduledQueryRulesAlert
func (tr *MonitorScheduledQueryRulesAlert) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorScheduledQueryRulesAlert using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorScheduledQueryRulesAlert) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorScheduledQueryRulesAlertParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorScheduledQueryRulesAlert) GetTerraformSchemaVersion() int {
	return 0
}

// GetTerraformResourceType returns Terraform resource type for this MonitorScheduledQueryRulesLog
func (mg *MonitorScheduledQueryRulesLog) GetTerraformResourceType() string {
	return "azurerm_monitor_scheduled_query_rules_log"
}

// GetConnectionDetailsMapping for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetConnectionDetailsMapping() map[string]string {
	return nil
}

// GetObservation of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetObservation() (map[string]interface{}, error) {
	o, err := json.TFParser.Marshal(tr.Status.AtProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(o, &base)
}

// SetObservation for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) SetObservation(obs map[string]interface{}) error {
	p, err := json.TFParser.Marshal(obs)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Status.AtProvider)
}

// GetID returns ID of underlying Terraform resource of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetID() string {
	if tr.Status.AtProvider.ID == nil {
		return ""
	}
	return *tr.Status.AtProvider.ID
}

// GetParameters of this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) GetParameters() (map[string]interface{}, error) {
	p, err := json.TFParser.Marshal(tr.Spec.ForProvider)
	if err != nil {
		return nil, err
	}
	base := map[string]interface{}{}
	return base, json.TFParser.Unmarshal(p, &base)
}

// SetParameters for this MonitorScheduledQueryRulesLog
func (tr *MonitorScheduledQueryRulesLog) SetParameters(params map[string]interface{}) error {
	p, err := json.TFParser.Marshal(params)
	if err != nil {
		return err
	}
	return json.TFParser.Unmarshal(p, &tr.Spec.ForProvider)
}

// LateInitialize this MonitorScheduledQueryRulesLog using its observed tfState.
// returns True if there are any spec changes for the resource.
func (tr *MonitorScheduledQueryRulesLog) LateInitialize(attrs []byte) (bool, error) {
	params := &MonitorScheduledQueryRulesLogParameters{}
	if err := json.TFParser.Unmarshal(attrs, params); err != nil {
		return false, errors.Wrap(err, "failed to unmarshal Terraform state parameters for late-initialization")
	}
	opts := []resource.GenericLateInitializerOption{resource.WithZeroValueJSONOmitEmptyFilter(resource.CNameWildcard)}

	li := resource.NewGenericLateInitializer(opts...)
	return li.LateInitialize(&tr.Spec.ForProvider, params)
}

// GetTerraformSchemaVersion returns the associated Terraform schema version
func (tr *MonitorScheduledQueryRulesLog) GetTerraformSchemaVersion() int {
	return 0
}
