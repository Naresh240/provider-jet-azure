/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type MigrationProjectObservation struct {
}

type MigrationProjectParameters struct {

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Required
	ResourceGroupName *string `json:"resourceGroupName" tf:"resource_group_name,omitempty"`

	// +kubebuilder:validation:Required
	ServiceName *string `json:"serviceName" tf:"service_name,omitempty"`

	// +kubebuilder:validation:Required
	SourcePlatform *string `json:"sourcePlatform" tf:"source_platform,omitempty"`

	// +kubebuilder:validation:Optional
	Tags map[string]*string `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Required
	TargetPlatform *string `json:"targetPlatform" tf:"target_platform,omitempty"`
}

// MigrationProjectSpec defines the desired state of MigrationProject
type MigrationProjectSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     MigrationProjectParameters `json:"forProvider"`
}

// MigrationProjectStatus defines the observed state of MigrationProject.
type MigrationProjectStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        MigrationProjectObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// MigrationProject is the Schema for the MigrationProjects API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type MigrationProject struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              MigrationProjectSpec   `json:"spec"`
	Status            MigrationProjectStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// MigrationProjectList contains a list of MigrationProjects
type MigrationProjectList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []MigrationProject `json:"items"`
}

// Repository type metadata.
var (
	MigrationProject_Kind             = "MigrationProject"
	MigrationProject_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: MigrationProject_Kind}.String()
	MigrationProject_KindAPIVersion   = MigrationProject_Kind + "." + CRDGroupVersion.String()
	MigrationProject_GroupVersionKind = CRDGroupVersion.WithKind(MigrationProject_Kind)
)

func init() {
	SchemeBuilder.Register(&MigrationProject{}, &MigrationProjectList{})
}
