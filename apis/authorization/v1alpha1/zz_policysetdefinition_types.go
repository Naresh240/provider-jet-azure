/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type PolicyDefinitionGroupObservation struct {
}

type PolicyDefinitionGroupParameters struct {

	// +kubebuilder:validation:Optional
	AdditionalMetadataResourceID *string `json:"additionalMetadataResourceId,omitempty" tf:"additional_metadata_resource_id,omitempty"`

	// +kubebuilder:validation:Optional
	Category *string `json:"category,omitempty" tf:"category,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisplayName *string `json:"displayName,omitempty" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`
}

type PolicyDefinitionReferenceObservation struct {
}

type PolicyDefinitionReferenceParameters struct {

	// +kubebuilder:validation:Optional
	ParameterValues *string `json:"parameterValues,omitempty" tf:"parameter_values,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters map[string]*string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Required
	PolicyDefinitionID *string `json:"policyDefinitionId" tf:"policy_definition_id,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyGroupNames []*string `json:"policyGroupNames,omitempty" tf:"policy_group_names,omitempty"`

	// +kubebuilder:validation:Optional
	ReferenceID *string `json:"referenceId,omitempty" tf:"reference_id,omitempty"`
}

type PolicySetDefinitionObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type PolicySetDefinitionParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Required
	DisplayName *string `json:"displayName" tf:"display_name,omitempty"`

	// +kubebuilder:validation:Optional
	ManagementGroupID *string `json:"managementGroupId,omitempty" tf:"management_group_id,omitempty"`

	// +kubebuilder:validation:Optional
	ManagementGroupName *string `json:"managementGroupName,omitempty" tf:"management_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Parameters *string `json:"parameters,omitempty" tf:"parameters,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionGroup []PolicyDefinitionGroupParameters `json:"policyDefinitionGroup,omitempty" tf:"policy_definition_group,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitionReference []PolicyDefinitionReferenceParameters `json:"policyDefinitionReference,omitempty" tf:"policy_definition_reference,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyDefinitions *string `json:"policyDefinitions,omitempty" tf:"policy_definitions,omitempty"`

	// +kubebuilder:validation:Required
	PolicyType *string `json:"policyType" tf:"policy_type,omitempty"`
}

// PolicySetDefinitionSpec defines the desired state of PolicySetDefinition
type PolicySetDefinitionSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PolicySetDefinitionParameters `json:"forProvider"`
}

// PolicySetDefinitionStatus defines the observed state of PolicySetDefinition.
type PolicySetDefinitionStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PolicySetDefinitionObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySetDefinition is the Schema for the PolicySetDefinitions API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type PolicySetDefinition struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              PolicySetDefinitionSpec   `json:"spec"`
	Status            PolicySetDefinitionStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PolicySetDefinitionList contains a list of PolicySetDefinitions
type PolicySetDefinitionList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PolicySetDefinition `json:"items"`
}

// Repository type metadata.
var (
	PolicySetDefinition_Kind             = "PolicySetDefinition"
	PolicySetDefinition_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PolicySetDefinition_Kind}.String()
	PolicySetDefinition_KindAPIVersion   = PolicySetDefinition_Kind + "." + CRDGroupVersion.String()
	PolicySetDefinition_GroupVersionKind = CRDGroupVersion.WithKind(PolicySetDefinition_Kind)
)

func init() {
	SchemeBuilder.Register(&PolicySetDefinition{}, &PolicySetDefinitionList{})
}
