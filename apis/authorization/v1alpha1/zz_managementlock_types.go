/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ManagementLockObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`
}

type ManagementLockParameters struct {

	// +kubebuilder:validation:Required
	LockLevel *string `json:"lockLevel" tf:"lock_level,omitempty"`

	// +kubebuilder:validation:Required
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Notes *string `json:"notes,omitempty" tf:"notes,omitempty"`

	// +kubebuilder:validation:Required
	Scope *string `json:"scope" tf:"scope,omitempty"`
}

// ManagementLockSpec defines the desired state of ManagementLock
type ManagementLockSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ManagementLockParameters `json:"forProvider"`
}

// ManagementLockStatus defines the observed state of ManagementLock.
type ManagementLockStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ManagementLockObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementLock is the Schema for the ManagementLocks API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type ManagementLock struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              ManagementLockSpec   `json:"spec"`
	Status            ManagementLockStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ManagementLockList contains a list of ManagementLocks
type ManagementLockList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ManagementLock `json:"items"`
}

// Repository type metadata.
var (
	ManagementLock_Kind             = "ManagementLock"
	ManagementLock_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ManagementLock_Kind}.String()
	ManagementLock_KindAPIVersion   = ManagementLock_Kind + "." + CRDGroupVersion.String()
	ManagementLock_GroupVersionKind = CRDGroupVersion.WithKind(ManagementLock_Kind)
)

func init() {
	SchemeBuilder.Register(&ManagementLock{}, &ManagementLockList{})
}
