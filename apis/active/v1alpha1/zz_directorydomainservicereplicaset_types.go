/*
Copyright 2020 The Crossplane Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by terrajet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DirectoryDomainServiceReplicaSetObservation struct {
	DomainControllerIPAddresses []*string `json:"domainControllerIpAddresses,omitempty" tf:"domain_controller_ip_addresses,omitempty"`

	ExternalAccessIPAddress *string `json:"externalAccessIpAddress,omitempty" tf:"external_access_ip_address,omitempty"`

	ServiceStatus *string `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`
}

type DirectoryDomainServiceReplicaSetParameters struct {

	// +kubebuilder:validation:Required
	DomainServiceID *string `json:"domainServiceId" tf:"domain_service_id,omitempty"`

	// +kubebuilder:validation:Required
	Location *string `json:"location" tf:"location,omitempty"`

	// +kubebuilder:validation:Required
	SubnetID *string `json:"subnetId" tf:"subnet_id,omitempty"`
}

// DirectoryDomainServiceReplicaSetSpec defines the desired state of DirectoryDomainServiceReplicaSet
type DirectoryDomainServiceReplicaSetSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DirectoryDomainServiceReplicaSetParameters `json:"forProvider"`
}

// DirectoryDomainServiceReplicaSetStatus defines the observed state of DirectoryDomainServiceReplicaSet.
type DirectoryDomainServiceReplicaSetStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DirectoryDomainServiceReplicaSetObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryDomainServiceReplicaSet is the Schema for the DirectoryDomainServiceReplicaSets API
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,azurejet}
type DirectoryDomainServiceReplicaSet struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DirectoryDomainServiceReplicaSetSpec   `json:"spec"`
	Status            DirectoryDomainServiceReplicaSetStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DirectoryDomainServiceReplicaSetList contains a list of DirectoryDomainServiceReplicaSets
type DirectoryDomainServiceReplicaSetList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DirectoryDomainServiceReplicaSet `json:"items"`
}

// Repository type metadata.
var (
	DirectoryDomainServiceReplicaSet_Kind             = "DirectoryDomainServiceReplicaSet"
	DirectoryDomainServiceReplicaSet_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DirectoryDomainServiceReplicaSet_Kind}.String()
	DirectoryDomainServiceReplicaSet_KindAPIVersion   = DirectoryDomainServiceReplicaSet_Kind + "." + CRDGroupVersion.String()
	DirectoryDomainServiceReplicaSet_GroupVersionKind = CRDGroupVersion.WithKind(DirectoryDomainServiceReplicaSet_Kind)
)

func init() {
	SchemeBuilder.Register(&DirectoryDomainServiceReplicaSet{}, &DirectoryDomainServiceReplicaSetList{})
}
